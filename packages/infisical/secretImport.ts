// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SecretImport extends pulumi.CustomResource {
    /**
     * Get an existing SecretImport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretImportState, opts?: pulumi.CustomResourceOptions): SecretImport {
        return new SecretImport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/secretImport:SecretImport';

    /**
     * Returns true if the given object is an instance of SecretImport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretImport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretImport.__pulumiType;
    }

    /**
     * The environment slug of the secret import to modify/create
     */
    public readonly environmentSlug!: pulumi.Output<string>;
    /**
     * The path where the secret should be imported
     */
    public readonly folderPath!: pulumi.Output<string>;
    /**
     * The environment slug of the secret import to modify/create
     */
    public readonly importEnvironmentSlug!: pulumi.Output<string>;
    /**
     * The path where the secret should be imported from
     */
    public readonly importFolderPath!: pulumi.Output<string>;
    /**
     * The is_replication of the secret import to modify/create
     */
    public readonly isReplication!: pulumi.Output<boolean>;
    /**
     * The Infisical project ID
     */
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a SecretImport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretImportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretImportArgs | SecretImportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretImportState | undefined;
            resourceInputs["environmentSlug"] = state ? state.environmentSlug : undefined;
            resourceInputs["folderPath"] = state ? state.folderPath : undefined;
            resourceInputs["importEnvironmentSlug"] = state ? state.importEnvironmentSlug : undefined;
            resourceInputs["importFolderPath"] = state ? state.importFolderPath : undefined;
            resourceInputs["isReplication"] = state ? state.isReplication : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as SecretImportArgs | undefined;
            if ((!args || args.environmentSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentSlug'");
            }
            if ((!args || args.folderPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'folderPath'");
            }
            if ((!args || args.importEnvironmentSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'importEnvironmentSlug'");
            }
            if ((!args || args.importFolderPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'importFolderPath'");
            }
            if ((!args || args.isReplication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isReplication'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["environmentSlug"] = args ? args.environmentSlug : undefined;
            resourceInputs["folderPath"] = args ? args.folderPath : undefined;
            resourceInputs["importEnvironmentSlug"] = args ? args.importEnvironmentSlug : undefined;
            resourceInputs["importFolderPath"] = args ? args.importFolderPath : undefined;
            resourceInputs["isReplication"] = args ? args.isReplication : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretImport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecretImport resources.
 */
export interface SecretImportState {
    /**
     * The environment slug of the secret import to modify/create
     */
    environmentSlug?: pulumi.Input<string>;
    /**
     * The path where the secret should be imported
     */
    folderPath?: pulumi.Input<string>;
    /**
     * The environment slug of the secret import to modify/create
     */
    importEnvironmentSlug?: pulumi.Input<string>;
    /**
     * The path where the secret should be imported from
     */
    importFolderPath?: pulumi.Input<string>;
    /**
     * The is_replication of the secret import to modify/create
     */
    isReplication?: pulumi.Input<boolean>;
    /**
     * The Infisical project ID
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretImport resource.
 */
export interface SecretImportArgs {
    /**
     * The environment slug of the secret import to modify/create
     */
    environmentSlug: pulumi.Input<string>;
    /**
     * The path where the secret should be imported
     */
    folderPath: pulumi.Input<string>;
    /**
     * The environment slug of the secret import to modify/create
     */
    importEnvironmentSlug: pulumi.Input<string>;
    /**
     * The path where the secret should be imported from
     */
    importFolderPath: pulumi.Input<string>;
    /**
     * The is_replication of the secret import to modify/create
     */
    isReplication: pulumi.Input<boolean>;
    /**
     * The Infisical project ID
     */
    projectId: pulumi.Input<string>;
}

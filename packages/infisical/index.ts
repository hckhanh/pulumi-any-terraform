// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessApprovalPolicyArgs, AccessApprovalPolicyState } from "./accessApprovalPolicy";
export type AccessApprovalPolicy = import("./accessApprovalPolicy").AccessApprovalPolicy;
export const AccessApprovalPolicy: typeof import("./accessApprovalPolicy").AccessApprovalPolicy = null as any;
utilities.lazyLoad(exports, ["AccessApprovalPolicy"], () => require("./accessApprovalPolicy"));

export { AppConnectionGcpArgs, AppConnectionGcpState } from "./appConnectionGcp";
export type AppConnectionGcp = import("./appConnectionGcp").AppConnectionGcp;
export const AppConnectionGcp: typeof import("./appConnectionGcp").AppConnectionGcp = null as any;
utilities.lazyLoad(exports, ["AppConnectionGcp"], () => require("./appConnectionGcp"));

export { GetGroupsResult } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetSecretFoldersArgs, GetSecretFoldersResult, GetSecretFoldersOutputArgs } from "./getSecretFolders";
export const getSecretFolders: typeof import("./getSecretFolders").getSecretFolders = null as any;
export const getSecretFoldersOutput: typeof import("./getSecretFolders").getSecretFoldersOutput = null as any;
utilities.lazyLoad(exports, ["getSecretFolders","getSecretFoldersOutput"], () => require("./getSecretFolders"));

export { GetSecretTagArgs, GetSecretTagResult, GetSecretTagOutputArgs } from "./getSecretTag";
export const getSecretTag: typeof import("./getSecretTag").getSecretTag = null as any;
export const getSecretTagOutput: typeof import("./getSecretTag").getSecretTagOutput = null as any;
utilities.lazyLoad(exports, ["getSecretTag","getSecretTagOutput"], () => require("./getSecretTag"));

export { GetSecretsArgs, GetSecretsResult, GetSecretsOutputArgs } from "./getSecrets";
export const getSecrets: typeof import("./getSecrets").getSecrets = null as any;
export const getSecretsOutput: typeof import("./getSecrets").getSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getSecrets","getSecretsOutput"], () => require("./getSecrets"));

export { IdentityArgs, IdentityState } from "./identity";
export type Identity = import("./identity").Identity;
export const Identity: typeof import("./identity").Identity = null as any;
utilities.lazyLoad(exports, ["Identity"], () => require("./identity"));

export { IdentityAwsAuthArgs, IdentityAwsAuthState } from "./identityAwsAuth";
export type IdentityAwsAuth = import("./identityAwsAuth").IdentityAwsAuth;
export const IdentityAwsAuth: typeof import("./identityAwsAuth").IdentityAwsAuth = null as any;
utilities.lazyLoad(exports, ["IdentityAwsAuth"], () => require("./identityAwsAuth"));

export { IdentityAzureAuthArgs, IdentityAzureAuthState } from "./identityAzureAuth";
export type IdentityAzureAuth = import("./identityAzureAuth").IdentityAzureAuth;
export const IdentityAzureAuth: typeof import("./identityAzureAuth").IdentityAzureAuth = null as any;
utilities.lazyLoad(exports, ["IdentityAzureAuth"], () => require("./identityAzureAuth"));

export { IdentityGcpAuthArgs, IdentityGcpAuthState } from "./identityGcpAuth";
export type IdentityGcpAuth = import("./identityGcpAuth").IdentityGcpAuth;
export const IdentityGcpAuth: typeof import("./identityGcpAuth").IdentityGcpAuth = null as any;
utilities.lazyLoad(exports, ["IdentityGcpAuth"], () => require("./identityGcpAuth"));

export { IdentityKubernetesAuthArgs, IdentityKubernetesAuthState } from "./identityKubernetesAuth";
export type IdentityKubernetesAuth = import("./identityKubernetesAuth").IdentityKubernetesAuth;
export const IdentityKubernetesAuth: typeof import("./identityKubernetesAuth").IdentityKubernetesAuth = null as any;
utilities.lazyLoad(exports, ["IdentityKubernetesAuth"], () => require("./identityKubernetesAuth"));

export { IdentityOidcAuthArgs, IdentityOidcAuthState } from "./identityOidcAuth";
export type IdentityOidcAuth = import("./identityOidcAuth").IdentityOidcAuth;
export const IdentityOidcAuth: typeof import("./identityOidcAuth").IdentityOidcAuth = null as any;
utilities.lazyLoad(exports, ["IdentityOidcAuth"], () => require("./identityOidcAuth"));

export { IdentityUniversalAuthArgs, IdentityUniversalAuthState } from "./identityUniversalAuth";
export type IdentityUniversalAuth = import("./identityUniversalAuth").IdentityUniversalAuth;
export const IdentityUniversalAuth: typeof import("./identityUniversalAuth").IdentityUniversalAuth = null as any;
utilities.lazyLoad(exports, ["IdentityUniversalAuth"], () => require("./identityUniversalAuth"));

export { IdentityUniversalAuthClientSecretArgs, IdentityUniversalAuthClientSecretState } from "./identityUniversalAuthClientSecret";
export type IdentityUniversalAuthClientSecret = import("./identityUniversalAuthClientSecret").IdentityUniversalAuthClientSecret;
export const IdentityUniversalAuthClientSecret: typeof import("./identityUniversalAuthClientSecret").IdentityUniversalAuthClientSecret = null as any;
utilities.lazyLoad(exports, ["IdentityUniversalAuthClientSecret"], () => require("./identityUniversalAuthClientSecret"));

export { IntegrationAwsParameterStoreArgs, IntegrationAwsParameterStoreState } from "./integrationAwsParameterStore";
export type IntegrationAwsParameterStore = import("./integrationAwsParameterStore").IntegrationAwsParameterStore;
export const IntegrationAwsParameterStore: typeof import("./integrationAwsParameterStore").IntegrationAwsParameterStore = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsParameterStore"], () => require("./integrationAwsParameterStore"));

export { IntegrationAwsSecretsManagerArgs, IntegrationAwsSecretsManagerState } from "./integrationAwsSecretsManager";
export type IntegrationAwsSecretsManager = import("./integrationAwsSecretsManager").IntegrationAwsSecretsManager;
export const IntegrationAwsSecretsManager: typeof import("./integrationAwsSecretsManager").IntegrationAwsSecretsManager = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsSecretsManager"], () => require("./integrationAwsSecretsManager"));

export { IntegrationCircleciArgs, IntegrationCircleciState } from "./integrationCircleci";
export type IntegrationCircleci = import("./integrationCircleci").IntegrationCircleci;
export const IntegrationCircleci: typeof import("./integrationCircleci").IntegrationCircleci = null as any;
utilities.lazyLoad(exports, ["IntegrationCircleci"], () => require("./integrationCircleci"));

export { IntegrationDatabricksArgs, IntegrationDatabricksState } from "./integrationDatabricks";
export type IntegrationDatabricks = import("./integrationDatabricks").IntegrationDatabricks;
export const IntegrationDatabricks: typeof import("./integrationDatabricks").IntegrationDatabricks = null as any;
utilities.lazyLoad(exports, ["IntegrationDatabricks"], () => require("./integrationDatabricks"));

export { IntegrationGcpSecretManagerArgs, IntegrationGcpSecretManagerState } from "./integrationGcpSecretManager";
export type IntegrationGcpSecretManager = import("./integrationGcpSecretManager").IntegrationGcpSecretManager;
export const IntegrationGcpSecretManager: typeof import("./integrationGcpSecretManager").IntegrationGcpSecretManager = null as any;
utilities.lazyLoad(exports, ["IntegrationGcpSecretManager"], () => require("./integrationGcpSecretManager"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectEnvironmentArgs, ProjectEnvironmentState } from "./projectEnvironment";
export type ProjectEnvironment = import("./projectEnvironment").ProjectEnvironment;
export const ProjectEnvironment: typeof import("./projectEnvironment").ProjectEnvironment = null as any;
utilities.lazyLoad(exports, ["ProjectEnvironment"], () => require("./projectEnvironment"));

export { ProjectGroupArgs, ProjectGroupState } from "./projectGroup";
export type ProjectGroup = import("./projectGroup").ProjectGroup;
export const ProjectGroup: typeof import("./projectGroup").ProjectGroup = null as any;
utilities.lazyLoad(exports, ["ProjectGroup"], () => require("./projectGroup"));

export { ProjectIdentityArgs, ProjectIdentityState } from "./projectIdentity";
export type ProjectIdentity = import("./projectIdentity").ProjectIdentity;
export const ProjectIdentity: typeof import("./projectIdentity").ProjectIdentity = null as any;
utilities.lazyLoad(exports, ["ProjectIdentity"], () => require("./projectIdentity"));

export { ProjectIdentitySpecificPrivilegeArgs, ProjectIdentitySpecificPrivilegeState } from "./projectIdentitySpecificPrivilege";
export type ProjectIdentitySpecificPrivilege = import("./projectIdentitySpecificPrivilege").ProjectIdentitySpecificPrivilege;
export const ProjectIdentitySpecificPrivilege: typeof import("./projectIdentitySpecificPrivilege").ProjectIdentitySpecificPrivilege = null as any;
utilities.lazyLoad(exports, ["ProjectIdentitySpecificPrivilege"], () => require("./projectIdentitySpecificPrivilege"));

export { ProjectRoleArgs, ProjectRoleState } from "./projectRole";
export type ProjectRole = import("./projectRole").ProjectRole;
export const ProjectRole: typeof import("./projectRole").ProjectRole = null as any;
utilities.lazyLoad(exports, ["ProjectRole"], () => require("./projectRole"));

export { ProjectUserArgs, ProjectUserState } from "./projectUser";
export type ProjectUser = import("./projectUser").ProjectUser;
export const ProjectUser: typeof import("./projectUser").ProjectUser = null as any;
utilities.lazyLoad(exports, ["ProjectUser"], () => require("./projectUser"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { SecretApprovalPolicyArgs, SecretApprovalPolicyState } from "./secretApprovalPolicy";
export type SecretApprovalPolicy = import("./secretApprovalPolicy").SecretApprovalPolicy;
export const SecretApprovalPolicy: typeof import("./secretApprovalPolicy").SecretApprovalPolicy = null as any;
utilities.lazyLoad(exports, ["SecretApprovalPolicy"], () => require("./secretApprovalPolicy"));

export { SecretFolderArgs, SecretFolderState } from "./secretFolder";
export type SecretFolder = import("./secretFolder").SecretFolder;
export const SecretFolder: typeof import("./secretFolder").SecretFolder = null as any;
utilities.lazyLoad(exports, ["SecretFolder"], () => require("./secretFolder"));

export { SecretImportArgs, SecretImportState } from "./secretImport";
export type SecretImport = import("./secretImport").SecretImport;
export const SecretImport: typeof import("./secretImport").SecretImport = null as any;
utilities.lazyLoad(exports, ["SecretImport"], () => require("./secretImport"));

export { SecretSyncAwsParameterStoreArgs, SecretSyncAwsParameterStoreState } from "./secretSyncAwsParameterStore";
export type SecretSyncAwsParameterStore = import("./secretSyncAwsParameterStore").SecretSyncAwsParameterStore;
export const SecretSyncAwsParameterStore: typeof import("./secretSyncAwsParameterStore").SecretSyncAwsParameterStore = null as any;
utilities.lazyLoad(exports, ["SecretSyncAwsParameterStore"], () => require("./secretSyncAwsParameterStore"));

export { SecretSyncAwsSecretsManagerArgs, SecretSyncAwsSecretsManagerState } from "./secretSyncAwsSecretsManager";
export type SecretSyncAwsSecretsManager = import("./secretSyncAwsSecretsManager").SecretSyncAwsSecretsManager;
export const SecretSyncAwsSecretsManager: typeof import("./secretSyncAwsSecretsManager").SecretSyncAwsSecretsManager = null as any;
utilities.lazyLoad(exports, ["SecretSyncAwsSecretsManager"], () => require("./secretSyncAwsSecretsManager"));

export { SecretSyncAzureAppConfigurationArgs, SecretSyncAzureAppConfigurationState } from "./secretSyncAzureAppConfiguration";
export type SecretSyncAzureAppConfiguration = import("./secretSyncAzureAppConfiguration").SecretSyncAzureAppConfiguration;
export const SecretSyncAzureAppConfiguration: typeof import("./secretSyncAzureAppConfiguration").SecretSyncAzureAppConfiguration = null as any;
utilities.lazyLoad(exports, ["SecretSyncAzureAppConfiguration"], () => require("./secretSyncAzureAppConfiguration"));

export { SecretSyncAzureKeyVaultArgs, SecretSyncAzureKeyVaultState } from "./secretSyncAzureKeyVault";
export type SecretSyncAzureKeyVault = import("./secretSyncAzureKeyVault").SecretSyncAzureKeyVault;
export const SecretSyncAzureKeyVault: typeof import("./secretSyncAzureKeyVault").SecretSyncAzureKeyVault = null as any;
utilities.lazyLoad(exports, ["SecretSyncAzureKeyVault"], () => require("./secretSyncAzureKeyVault"));

export { SecretSyncGcpSecretManagerArgs, SecretSyncGcpSecretManagerState } from "./secretSyncGcpSecretManager";
export type SecretSyncGcpSecretManager = import("./secretSyncGcpSecretManager").SecretSyncGcpSecretManager;
export const SecretSyncGcpSecretManager: typeof import("./secretSyncGcpSecretManager").SecretSyncGcpSecretManager = null as any;
utilities.lazyLoad(exports, ["SecretSyncGcpSecretManager"], () => require("./secretSyncGcpSecretManager"));

export { SecretTagArgs, SecretTagState } from "./secretTag";
export type SecretTag = import("./secretTag").SecretTag;
export const SecretTag: typeof import("./secretTag").SecretTag = null as any;
utilities.lazyLoad(exports, ["SecretTag"], () => require("./secretTag"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "infisical:index/accessApprovalPolicy:AccessApprovalPolicy":
                return new AccessApprovalPolicy(name, <any>undefined, { urn })
            case "infisical:index/appConnectionGcp:AppConnectionGcp":
                return new AppConnectionGcp(name, <any>undefined, { urn })
            case "infisical:index/identity:Identity":
                return new Identity(name, <any>undefined, { urn })
            case "infisical:index/identityAwsAuth:IdentityAwsAuth":
                return new IdentityAwsAuth(name, <any>undefined, { urn })
            case "infisical:index/identityAzureAuth:IdentityAzureAuth":
                return new IdentityAzureAuth(name, <any>undefined, { urn })
            case "infisical:index/identityGcpAuth:IdentityGcpAuth":
                return new IdentityGcpAuth(name, <any>undefined, { urn })
            case "infisical:index/identityKubernetesAuth:IdentityKubernetesAuth":
                return new IdentityKubernetesAuth(name, <any>undefined, { urn })
            case "infisical:index/identityOidcAuth:IdentityOidcAuth":
                return new IdentityOidcAuth(name, <any>undefined, { urn })
            case "infisical:index/identityUniversalAuth:IdentityUniversalAuth":
                return new IdentityUniversalAuth(name, <any>undefined, { urn })
            case "infisical:index/identityUniversalAuthClientSecret:IdentityUniversalAuthClientSecret":
                return new IdentityUniversalAuthClientSecret(name, <any>undefined, { urn })
            case "infisical:index/integrationAwsParameterStore:IntegrationAwsParameterStore":
                return new IntegrationAwsParameterStore(name, <any>undefined, { urn })
            case "infisical:index/integrationAwsSecretsManager:IntegrationAwsSecretsManager":
                return new IntegrationAwsSecretsManager(name, <any>undefined, { urn })
            case "infisical:index/integrationCircleci:IntegrationCircleci":
                return new IntegrationCircleci(name, <any>undefined, { urn })
            case "infisical:index/integrationDatabricks:IntegrationDatabricks":
                return new IntegrationDatabricks(name, <any>undefined, { urn })
            case "infisical:index/integrationGcpSecretManager:IntegrationGcpSecretManager":
                return new IntegrationGcpSecretManager(name, <any>undefined, { urn })
            case "infisical:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "infisical:index/projectEnvironment:ProjectEnvironment":
                return new ProjectEnvironment(name, <any>undefined, { urn })
            case "infisical:index/projectGroup:ProjectGroup":
                return new ProjectGroup(name, <any>undefined, { urn })
            case "infisical:index/projectIdentity:ProjectIdentity":
                return new ProjectIdentity(name, <any>undefined, { urn })
            case "infisical:index/projectIdentitySpecificPrivilege:ProjectIdentitySpecificPrivilege":
                return new ProjectIdentitySpecificPrivilege(name, <any>undefined, { urn })
            case "infisical:index/projectRole:ProjectRole":
                return new ProjectRole(name, <any>undefined, { urn })
            case "infisical:index/projectUser:ProjectUser":
                return new ProjectUser(name, <any>undefined, { urn })
            case "infisical:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "infisical:index/secretApprovalPolicy:SecretApprovalPolicy":
                return new SecretApprovalPolicy(name, <any>undefined, { urn })
            case "infisical:index/secretFolder:SecretFolder":
                return new SecretFolder(name, <any>undefined, { urn })
            case "infisical:index/secretImport:SecretImport":
                return new SecretImport(name, <any>undefined, { urn })
            case "infisical:index/secretSyncAwsParameterStore:SecretSyncAwsParameterStore":
                return new SecretSyncAwsParameterStore(name, <any>undefined, { urn })
            case "infisical:index/secretSyncAwsSecretsManager:SecretSyncAwsSecretsManager":
                return new SecretSyncAwsSecretsManager(name, <any>undefined, { urn })
            case "infisical:index/secretSyncAzureAppConfiguration:SecretSyncAzureAppConfiguration":
                return new SecretSyncAzureAppConfiguration(name, <any>undefined, { urn })
            case "infisical:index/secretSyncAzureKeyVault:SecretSyncAzureKeyVault":
                return new SecretSyncAzureKeyVault(name, <any>undefined, { urn })
            case "infisical:index/secretSyncGcpSecretManager:SecretSyncGcpSecretManager":
                return new SecretSyncGcpSecretManager(name, <any>undefined, { urn })
            case "infisical:index/secretTag:SecretTag":
                return new SecretTag(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("infisical", "index/accessApprovalPolicy", _module)
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionGcp", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identity", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityAwsAuth", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityAzureAuth", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityGcpAuth", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityKubernetesAuth", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityOidcAuth", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityUniversalAuth", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityUniversalAuthClientSecret", _module)
pulumi.runtime.registerResourceModule("infisical", "index/integrationAwsParameterStore", _module)
pulumi.runtime.registerResourceModule("infisical", "index/integrationAwsSecretsManager", _module)
pulumi.runtime.registerResourceModule("infisical", "index/integrationCircleci", _module)
pulumi.runtime.registerResourceModule("infisical", "index/integrationDatabricks", _module)
pulumi.runtime.registerResourceModule("infisical", "index/integrationGcpSecretManager", _module)
pulumi.runtime.registerResourceModule("infisical", "index/project", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectEnvironment", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectGroup", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectIdentity", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectIdentitySpecificPrivilege", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectRole", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectUser", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secret", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretApprovalPolicy", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretFolder", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretImport", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAwsParameterStore", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAwsSecretsManager", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAzureAppConfiguration", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAzureKeyVault", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncGcpSecretManager", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretTag", _module)
pulumi.runtime.registerResourcePackage("infisical", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:infisical") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

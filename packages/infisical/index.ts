// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export type { AccessApprovalPolicyArgs, AccessApprovalPolicyState } from "./accessApprovalPolicy";
export type AccessApprovalPolicy = import("./accessApprovalPolicy").AccessApprovalPolicy;
export const AccessApprovalPolicy: typeof import("./accessApprovalPolicy").AccessApprovalPolicy = null as any;
utilities.lazyLoad(exports, ["AccessApprovalPolicy"], () => require("./accessApprovalPolicy"));

export type { AppConnection1passwordArgs, AppConnection1passwordState } from "./appConnection1password";
export type AppConnection1password = import("./appConnection1password").AppConnection1password;
export const AppConnection1password: typeof import("./appConnection1password").AppConnection1password = null as any;
utilities.lazyLoad(exports, ["AppConnection1password"], () => require("./appConnection1password"));

export type { AppConnectionAwsArgs, AppConnectionAwsState } from "./appConnectionAws";
export type AppConnectionAws = import("./appConnectionAws").AppConnectionAws;
export const AppConnectionAws: typeof import("./appConnectionAws").AppConnectionAws = null as any;
utilities.lazyLoad(exports, ["AppConnectionAws"], () => require("./appConnectionAws"));

export type { AppConnectionAzureClientSecretsArgs, AppConnectionAzureClientSecretsState } from "./appConnectionAzureClientSecrets";
export type AppConnectionAzureClientSecrets = import("./appConnectionAzureClientSecrets").AppConnectionAzureClientSecrets;
export const AppConnectionAzureClientSecrets: typeof import("./appConnectionAzureClientSecrets").AppConnectionAzureClientSecrets = null as any;
utilities.lazyLoad(exports, ["AppConnectionAzureClientSecrets"], () => require("./appConnectionAzureClientSecrets"));

export type { AppConnectionGcpArgs, AppConnectionGcpState } from "./appConnectionGcp";
export type AppConnectionGcp = import("./appConnectionGcp").AppConnectionGcp;
export const AppConnectionGcp: typeof import("./appConnectionGcp").AppConnectionGcp = null as any;
utilities.lazyLoad(exports, ["AppConnectionGcp"], () => require("./appConnectionGcp"));

export type { AppConnectionMssqlArgs, AppConnectionMssqlState } from "./appConnectionMssql";
export type AppConnectionMssql = import("./appConnectionMssql").AppConnectionMssql;
export const AppConnectionMssql: typeof import("./appConnectionMssql").AppConnectionMssql = null as any;
utilities.lazyLoad(exports, ["AppConnectionMssql"], () => require("./appConnectionMssql"));

export type { AppConnectionMysqlArgs, AppConnectionMysqlState } from "./appConnectionMysql";
export type AppConnectionMysql = import("./appConnectionMysql").AppConnectionMysql;
export const AppConnectionMysql: typeof import("./appConnectionMysql").AppConnectionMysql = null as any;
utilities.lazyLoad(exports, ["AppConnectionMysql"], () => require("./appConnectionMysql"));

export type { AppConnectionRenderArgs, AppConnectionRenderState } from "./appConnectionRender";
export type AppConnectionRender = import("./appConnectionRender").AppConnectionRender;
export const AppConnectionRender: typeof import("./appConnectionRender").AppConnectionRender = null as any;
utilities.lazyLoad(exports, ["AppConnectionRender"], () => require("./appConnectionRender"));

export type { DynamicSecretAwsIamArgs, DynamicSecretAwsIamState } from "./dynamicSecretAwsIam";
export type DynamicSecretAwsIam = import("./dynamicSecretAwsIam").DynamicSecretAwsIam;
export const DynamicSecretAwsIam: typeof import("./dynamicSecretAwsIam").DynamicSecretAwsIam = null as any;
utilities.lazyLoad(exports, ["DynamicSecretAwsIam"], () => require("./dynamicSecretAwsIam"));

export type { DynamicSecretKubernetesArgs, DynamicSecretKubernetesState } from "./dynamicSecretKubernetes";
export type DynamicSecretKubernetes = import("./dynamicSecretKubernetes").DynamicSecretKubernetes;
export const DynamicSecretKubernetes: typeof import("./dynamicSecretKubernetes").DynamicSecretKubernetes = null as any;
utilities.lazyLoad(exports, ["DynamicSecretKubernetes"], () => require("./dynamicSecretKubernetes"));

export type { DynamicSecretSqlDatabaseArgs, DynamicSecretSqlDatabaseState } from "./dynamicSecretSqlDatabase";
export type DynamicSecretSqlDatabase = import("./dynamicSecretSqlDatabase").DynamicSecretSqlDatabase;
export const DynamicSecretSqlDatabase: typeof import("./dynamicSecretSqlDatabase").DynamicSecretSqlDatabase = null as any;
utilities.lazyLoad(exports, ["DynamicSecretSqlDatabase"], () => require("./dynamicSecretSqlDatabase"));

export type { GetGroupsResult } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export type { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export type { GetSecretFoldersArgs, GetSecretFoldersResult, GetSecretFoldersOutputArgs } from "./getSecretFolders";
export const getSecretFolders: typeof import("./getSecretFolders").getSecretFolders = null as any;
export const getSecretFoldersOutput: typeof import("./getSecretFolders").getSecretFoldersOutput = null as any;
utilities.lazyLoad(exports, ["getSecretFolders","getSecretFoldersOutput"], () => require("./getSecretFolders"));

export type { GetSecretTagArgs, GetSecretTagResult, GetSecretTagOutputArgs } from "./getSecretTag";
export const getSecretTag: typeof import("./getSecretTag").getSecretTag = null as any;
export const getSecretTagOutput: typeof import("./getSecretTag").getSecretTagOutput = null as any;
utilities.lazyLoad(exports, ["getSecretTag","getSecretTagOutput"], () => require("./getSecretTag"));

export type { GetSecretsArgs, GetSecretsResult, GetSecretsOutputArgs } from "./getSecrets";
export const getSecrets: typeof import("./getSecrets").getSecrets = null as any;
export const getSecretsOutput: typeof import("./getSecrets").getSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getSecrets","getSecretsOutput"], () => require("./getSecrets"));

export type { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export type { IdentityArgs, IdentityState } from "./identity";
export type Identity = import("./identity").Identity;
export const Identity: typeof import("./identity").Identity = null as any;
utilities.lazyLoad(exports, ["Identity"], () => require("./identity"));

export type { IdentityAwsAuthArgs, IdentityAwsAuthState } from "./identityAwsAuth";
export type IdentityAwsAuth = import("./identityAwsAuth").IdentityAwsAuth;
export const IdentityAwsAuth: typeof import("./identityAwsAuth").IdentityAwsAuth = null as any;
utilities.lazyLoad(exports, ["IdentityAwsAuth"], () => require("./identityAwsAuth"));

export type { IdentityAzureAuthArgs, IdentityAzureAuthState } from "./identityAzureAuth";
export type IdentityAzureAuth = import("./identityAzureAuth").IdentityAzureAuth;
export const IdentityAzureAuth: typeof import("./identityAzureAuth").IdentityAzureAuth = null as any;
utilities.lazyLoad(exports, ["IdentityAzureAuth"], () => require("./identityAzureAuth"));

export type { IdentityGcpAuthArgs, IdentityGcpAuthState } from "./identityGcpAuth";
export type IdentityGcpAuth = import("./identityGcpAuth").IdentityGcpAuth;
export const IdentityGcpAuth: typeof import("./identityGcpAuth").IdentityGcpAuth = null as any;
utilities.lazyLoad(exports, ["IdentityGcpAuth"], () => require("./identityGcpAuth"));

export type { IdentityKubernetesAuthArgs, IdentityKubernetesAuthState } from "./identityKubernetesAuth";
export type IdentityKubernetesAuth = import("./identityKubernetesAuth").IdentityKubernetesAuth;
export const IdentityKubernetesAuth: typeof import("./identityKubernetesAuth").IdentityKubernetesAuth = null as any;
utilities.lazyLoad(exports, ["IdentityKubernetesAuth"], () => require("./identityKubernetesAuth"));

export type { IdentityOidcAuthArgs, IdentityOidcAuthState } from "./identityOidcAuth";
export type IdentityOidcAuth = import("./identityOidcAuth").IdentityOidcAuth;
export const IdentityOidcAuth: typeof import("./identityOidcAuth").IdentityOidcAuth = null as any;
utilities.lazyLoad(exports, ["IdentityOidcAuth"], () => require("./identityOidcAuth"));

export type { IdentityUniversalAuthArgs, IdentityUniversalAuthState } from "./identityUniversalAuth";
export type IdentityUniversalAuth = import("./identityUniversalAuth").IdentityUniversalAuth;
export const IdentityUniversalAuth: typeof import("./identityUniversalAuth").IdentityUniversalAuth = null as any;
utilities.lazyLoad(exports, ["IdentityUniversalAuth"], () => require("./identityUniversalAuth"));

export type { IdentityUniversalAuthClientSecretArgs, IdentityUniversalAuthClientSecretState } from "./identityUniversalAuthClientSecret";
export type IdentityUniversalAuthClientSecret = import("./identityUniversalAuthClientSecret").IdentityUniversalAuthClientSecret;
export const IdentityUniversalAuthClientSecret: typeof import("./identityUniversalAuthClientSecret").IdentityUniversalAuthClientSecret = null as any;
utilities.lazyLoad(exports, ["IdentityUniversalAuthClientSecret"], () => require("./identityUniversalAuthClientSecret"));

export type { IntegrationAwsParameterStoreArgs, IntegrationAwsParameterStoreState } from "./integrationAwsParameterStore";
export type IntegrationAwsParameterStore = import("./integrationAwsParameterStore").IntegrationAwsParameterStore;
export const IntegrationAwsParameterStore: typeof import("./integrationAwsParameterStore").IntegrationAwsParameterStore = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsParameterStore"], () => require("./integrationAwsParameterStore"));

export type { IntegrationAwsSecretsManagerArgs, IntegrationAwsSecretsManagerState } from "./integrationAwsSecretsManager";
export type IntegrationAwsSecretsManager = import("./integrationAwsSecretsManager").IntegrationAwsSecretsManager;
export const IntegrationAwsSecretsManager: typeof import("./integrationAwsSecretsManager").IntegrationAwsSecretsManager = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsSecretsManager"], () => require("./integrationAwsSecretsManager"));

export type { IntegrationCircleciArgs, IntegrationCircleciState } from "./integrationCircleci";
export type IntegrationCircleci = import("./integrationCircleci").IntegrationCircleci;
export const IntegrationCircleci: typeof import("./integrationCircleci").IntegrationCircleci = null as any;
utilities.lazyLoad(exports, ["IntegrationCircleci"], () => require("./integrationCircleci"));

export type { IntegrationDatabricksArgs, IntegrationDatabricksState } from "./integrationDatabricks";
export type IntegrationDatabricks = import("./integrationDatabricks").IntegrationDatabricks;
export const IntegrationDatabricks: typeof import("./integrationDatabricks").IntegrationDatabricks = null as any;
utilities.lazyLoad(exports, ["IntegrationDatabricks"], () => require("./integrationDatabricks"));

export type { IntegrationGcpSecretManagerArgs, IntegrationGcpSecretManagerState } from "./integrationGcpSecretManager";
export type IntegrationGcpSecretManager = import("./integrationGcpSecretManager").IntegrationGcpSecretManager;
export const IntegrationGcpSecretManager: typeof import("./integrationGcpSecretManager").IntegrationGcpSecretManager = null as any;
utilities.lazyLoad(exports, ["IntegrationGcpSecretManager"], () => require("./integrationGcpSecretManager"));

export type { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export type { ProjectEnvironmentArgs, ProjectEnvironmentState } from "./projectEnvironment";
export type ProjectEnvironment = import("./projectEnvironment").ProjectEnvironment;
export const ProjectEnvironment: typeof import("./projectEnvironment").ProjectEnvironment = null as any;
utilities.lazyLoad(exports, ["ProjectEnvironment"], () => require("./projectEnvironment"));

export type { ProjectGroupArgs, ProjectGroupState } from "./projectGroup";
export type ProjectGroup = import("./projectGroup").ProjectGroup;
export const ProjectGroup: typeof import("./projectGroup").ProjectGroup = null as any;
utilities.lazyLoad(exports, ["ProjectGroup"], () => require("./projectGroup"));

export type { ProjectIdentityArgs, ProjectIdentityState } from "./projectIdentity";
export type ProjectIdentity = import("./projectIdentity").ProjectIdentity;
export const ProjectIdentity: typeof import("./projectIdentity").ProjectIdentity = null as any;
utilities.lazyLoad(exports, ["ProjectIdentity"], () => require("./projectIdentity"));

export type { ProjectIdentitySpecificPrivilegeArgs, ProjectIdentitySpecificPrivilegeState } from "./projectIdentitySpecificPrivilege";
export type ProjectIdentitySpecificPrivilege = import("./projectIdentitySpecificPrivilege").ProjectIdentitySpecificPrivilege;
export const ProjectIdentitySpecificPrivilege: typeof import("./projectIdentitySpecificPrivilege").ProjectIdentitySpecificPrivilege = null as any;
utilities.lazyLoad(exports, ["ProjectIdentitySpecificPrivilege"], () => require("./projectIdentitySpecificPrivilege"));

export type { ProjectRoleArgs, ProjectRoleState } from "./projectRole";
export type ProjectRole = import("./projectRole").ProjectRole;
export const ProjectRole: typeof import("./projectRole").ProjectRole = null as any;
utilities.lazyLoad(exports, ["ProjectRole"], () => require("./projectRole"));

export type { ProjectTemplateArgs, ProjectTemplateState } from "./projectTemplate";
export type ProjectTemplate = import("./projectTemplate").ProjectTemplate;
export const ProjectTemplate: typeof import("./projectTemplate").ProjectTemplate = null as any;
utilities.lazyLoad(exports, ["ProjectTemplate"], () => require("./projectTemplate"));

export type { ProjectUserArgs, ProjectUserState } from "./projectUser";
export type ProjectUser = import("./projectUser").ProjectUser;
export const ProjectUser: typeof import("./projectUser").ProjectUser = null as any;
utilities.lazyLoad(exports, ["ProjectUser"], () => require("./projectUser"));

export type { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export type { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export type { SecretApprovalPolicyArgs, SecretApprovalPolicyState } from "./secretApprovalPolicy";
export type SecretApprovalPolicy = import("./secretApprovalPolicy").SecretApprovalPolicy;
export const SecretApprovalPolicy: typeof import("./secretApprovalPolicy").SecretApprovalPolicy = null as any;
utilities.lazyLoad(exports, ["SecretApprovalPolicy"], () => require("./secretApprovalPolicy"));

export type { SecretFolderArgs, SecretFolderState } from "./secretFolder";
export type SecretFolder = import("./secretFolder").SecretFolder;
export const SecretFolder: typeof import("./secretFolder").SecretFolder = null as any;
utilities.lazyLoad(exports, ["SecretFolder"], () => require("./secretFolder"));

export type { SecretImportArgs, SecretImportState } from "./secretImport";
export type SecretImport = import("./secretImport").SecretImport;
export const SecretImport: typeof import("./secretImport").SecretImport = null as any;
utilities.lazyLoad(exports, ["SecretImport"], () => require("./secretImport"));

export type { SecretRotationAwsIamUserSecretArgs, SecretRotationAwsIamUserSecretState } from "./secretRotationAwsIamUserSecret";
export type SecretRotationAwsIamUserSecret = import("./secretRotationAwsIamUserSecret").SecretRotationAwsIamUserSecret;
export const SecretRotationAwsIamUserSecret: typeof import("./secretRotationAwsIamUserSecret").SecretRotationAwsIamUserSecret = null as any;
utilities.lazyLoad(exports, ["SecretRotationAwsIamUserSecret"], () => require("./secretRotationAwsIamUserSecret"));

export type { SecretRotationAzureClientSecretArgs, SecretRotationAzureClientSecretState } from "./secretRotationAzureClientSecret";
export type SecretRotationAzureClientSecret = import("./secretRotationAzureClientSecret").SecretRotationAzureClientSecret;
export const SecretRotationAzureClientSecret: typeof import("./secretRotationAzureClientSecret").SecretRotationAzureClientSecret = null as any;
utilities.lazyLoad(exports, ["SecretRotationAzureClientSecret"], () => require("./secretRotationAzureClientSecret"));

export type { SecretRotationMssqlCredentialsArgs, SecretRotationMssqlCredentialsState } from "./secretRotationMssqlCredentials";
export type SecretRotationMssqlCredentials = import("./secretRotationMssqlCredentials").SecretRotationMssqlCredentials;
export const SecretRotationMssqlCredentials: typeof import("./secretRotationMssqlCredentials").SecretRotationMssqlCredentials = null as any;
utilities.lazyLoad(exports, ["SecretRotationMssqlCredentials"], () => require("./secretRotationMssqlCredentials"));

export type { SecretRotationMysqlCredentialsArgs, SecretRotationMysqlCredentialsState } from "./secretRotationMysqlCredentials";
export type SecretRotationMysqlCredentials = import("./secretRotationMysqlCredentials").SecretRotationMysqlCredentials;
export const SecretRotationMysqlCredentials: typeof import("./secretRotationMysqlCredentials").SecretRotationMysqlCredentials = null as any;
utilities.lazyLoad(exports, ["SecretRotationMysqlCredentials"], () => require("./secretRotationMysqlCredentials"));

export type { SecretSync1passwordArgs, SecretSync1passwordState } from "./secretSync1password";
export type SecretSync1password = import("./secretSync1password").SecretSync1password;
export const SecretSync1password: typeof import("./secretSync1password").SecretSync1password = null as any;
utilities.lazyLoad(exports, ["SecretSync1password"], () => require("./secretSync1password"));

export type { SecretSyncAwsParameterStoreArgs, SecretSyncAwsParameterStoreState } from "./secretSyncAwsParameterStore";
export type SecretSyncAwsParameterStore = import("./secretSyncAwsParameterStore").SecretSyncAwsParameterStore;
export const SecretSyncAwsParameterStore: typeof import("./secretSyncAwsParameterStore").SecretSyncAwsParameterStore = null as any;
utilities.lazyLoad(exports, ["SecretSyncAwsParameterStore"], () => require("./secretSyncAwsParameterStore"));

export type { SecretSyncAwsSecretsManagerArgs, SecretSyncAwsSecretsManagerState } from "./secretSyncAwsSecretsManager";
export type SecretSyncAwsSecretsManager = import("./secretSyncAwsSecretsManager").SecretSyncAwsSecretsManager;
export const SecretSyncAwsSecretsManager: typeof import("./secretSyncAwsSecretsManager").SecretSyncAwsSecretsManager = null as any;
utilities.lazyLoad(exports, ["SecretSyncAwsSecretsManager"], () => require("./secretSyncAwsSecretsManager"));

export type { SecretSyncAzureAppConfigurationArgs, SecretSyncAzureAppConfigurationState } from "./secretSyncAzureAppConfiguration";
export type SecretSyncAzureAppConfiguration = import("./secretSyncAzureAppConfiguration").SecretSyncAzureAppConfiguration;
export const SecretSyncAzureAppConfiguration: typeof import("./secretSyncAzureAppConfiguration").SecretSyncAzureAppConfiguration = null as any;
utilities.lazyLoad(exports, ["SecretSyncAzureAppConfiguration"], () => require("./secretSyncAzureAppConfiguration"));

export type { SecretSyncAzureDevopsArgs, SecretSyncAzureDevopsState } from "./secretSyncAzureDevops";
export type SecretSyncAzureDevops = import("./secretSyncAzureDevops").SecretSyncAzureDevops;
export const SecretSyncAzureDevops: typeof import("./secretSyncAzureDevops").SecretSyncAzureDevops = null as any;
utilities.lazyLoad(exports, ["SecretSyncAzureDevops"], () => require("./secretSyncAzureDevops"));

export type { SecretSyncAzureKeyVaultArgs, SecretSyncAzureKeyVaultState } from "./secretSyncAzureKeyVault";
export type SecretSyncAzureKeyVault = import("./secretSyncAzureKeyVault").SecretSyncAzureKeyVault;
export const SecretSyncAzureKeyVault: typeof import("./secretSyncAzureKeyVault").SecretSyncAzureKeyVault = null as any;
utilities.lazyLoad(exports, ["SecretSyncAzureKeyVault"], () => require("./secretSyncAzureKeyVault"));

export type { SecretSyncGcpSecretManagerArgs, SecretSyncGcpSecretManagerState } from "./secretSyncGcpSecretManager";
export type SecretSyncGcpSecretManager = import("./secretSyncGcpSecretManager").SecretSyncGcpSecretManager;
export const SecretSyncGcpSecretManager: typeof import("./secretSyncGcpSecretManager").SecretSyncGcpSecretManager = null as any;
utilities.lazyLoad(exports, ["SecretSyncGcpSecretManager"], () => require("./secretSyncGcpSecretManager"));

export type { SecretSyncGithubArgs, SecretSyncGithubState } from "./secretSyncGithub";
export type SecretSyncGithub = import("./secretSyncGithub").SecretSyncGithub;
export const SecretSyncGithub: typeof import("./secretSyncGithub").SecretSyncGithub = null as any;
utilities.lazyLoad(exports, ["SecretSyncGithub"], () => require("./secretSyncGithub"));

export type { SecretSyncRenderArgs, SecretSyncRenderState } from "./secretSyncRender";
export type SecretSyncRender = import("./secretSyncRender").SecretSyncRender;
export const SecretSyncRender: typeof import("./secretSyncRender").SecretSyncRender = null as any;
utilities.lazyLoad(exports, ["SecretSyncRender"], () => require("./secretSyncRender"));

export type { SecretTagArgs, SecretTagState } from "./secretTag";
export type SecretTag = import("./secretTag").SecretTag;
export const SecretTag: typeof import("./secretTag").SecretTag = null as any;
utilities.lazyLoad(exports, ["SecretTag"], () => require("./secretTag"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "infisical:index/accessApprovalPolicy:AccessApprovalPolicy":
                return new AccessApprovalPolicy(name, <any>undefined, { urn })
            case "infisical:index/appConnection1password:AppConnection1password":
                return new AppConnection1password(name, <any>undefined, { urn })
            case "infisical:index/appConnectionAws:AppConnectionAws":
                return new AppConnectionAws(name, <any>undefined, { urn })
            case "infisical:index/appConnectionAzureClientSecrets:AppConnectionAzureClientSecrets":
                return new AppConnectionAzureClientSecrets(name, <any>undefined, { urn })
            case "infisical:index/appConnectionGcp:AppConnectionGcp":
                return new AppConnectionGcp(name, <any>undefined, { urn })
            case "infisical:index/appConnectionMssql:AppConnectionMssql":
                return new AppConnectionMssql(name, <any>undefined, { urn })
            case "infisical:index/appConnectionMysql:AppConnectionMysql":
                return new AppConnectionMysql(name, <any>undefined, { urn })
            case "infisical:index/appConnectionRender:AppConnectionRender":
                return new AppConnectionRender(name, <any>undefined, { urn })
            case "infisical:index/dynamicSecretAwsIam:DynamicSecretAwsIam":
                return new DynamicSecretAwsIam(name, <any>undefined, { urn })
            case "infisical:index/dynamicSecretKubernetes:DynamicSecretKubernetes":
                return new DynamicSecretKubernetes(name, <any>undefined, { urn })
            case "infisical:index/dynamicSecretSqlDatabase:DynamicSecretSqlDatabase":
                return new DynamicSecretSqlDatabase(name, <any>undefined, { urn })
            case "infisical:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "infisical:index/identity:Identity":
                return new Identity(name, <any>undefined, { urn })
            case "infisical:index/identityAwsAuth:IdentityAwsAuth":
                return new IdentityAwsAuth(name, <any>undefined, { urn })
            case "infisical:index/identityAzureAuth:IdentityAzureAuth":
                return new IdentityAzureAuth(name, <any>undefined, { urn })
            case "infisical:index/identityGcpAuth:IdentityGcpAuth":
                return new IdentityGcpAuth(name, <any>undefined, { urn })
            case "infisical:index/identityKubernetesAuth:IdentityKubernetesAuth":
                return new IdentityKubernetesAuth(name, <any>undefined, { urn })
            case "infisical:index/identityOidcAuth:IdentityOidcAuth":
                return new IdentityOidcAuth(name, <any>undefined, { urn })
            case "infisical:index/identityUniversalAuth:IdentityUniversalAuth":
                return new IdentityUniversalAuth(name, <any>undefined, { urn })
            case "infisical:index/identityUniversalAuthClientSecret:IdentityUniversalAuthClientSecret":
                return new IdentityUniversalAuthClientSecret(name, <any>undefined, { urn })
            case "infisical:index/integrationAwsParameterStore:IntegrationAwsParameterStore":
                return new IntegrationAwsParameterStore(name, <any>undefined, { urn })
            case "infisical:index/integrationAwsSecretsManager:IntegrationAwsSecretsManager":
                return new IntegrationAwsSecretsManager(name, <any>undefined, { urn })
            case "infisical:index/integrationCircleci:IntegrationCircleci":
                return new IntegrationCircleci(name, <any>undefined, { urn })
            case "infisical:index/integrationDatabricks:IntegrationDatabricks":
                return new IntegrationDatabricks(name, <any>undefined, { urn })
            case "infisical:index/integrationGcpSecretManager:IntegrationGcpSecretManager":
                return new IntegrationGcpSecretManager(name, <any>undefined, { urn })
            case "infisical:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "infisical:index/projectEnvironment:ProjectEnvironment":
                return new ProjectEnvironment(name, <any>undefined, { urn })
            case "infisical:index/projectGroup:ProjectGroup":
                return new ProjectGroup(name, <any>undefined, { urn })
            case "infisical:index/projectIdentity:ProjectIdentity":
                return new ProjectIdentity(name, <any>undefined, { urn })
            case "infisical:index/projectIdentitySpecificPrivilege:ProjectIdentitySpecificPrivilege":
                return new ProjectIdentitySpecificPrivilege(name, <any>undefined, { urn })
            case "infisical:index/projectRole:ProjectRole":
                return new ProjectRole(name, <any>undefined, { urn })
            case "infisical:index/projectTemplate:ProjectTemplate":
                return new ProjectTemplate(name, <any>undefined, { urn })
            case "infisical:index/projectUser:ProjectUser":
                return new ProjectUser(name, <any>undefined, { urn })
            case "infisical:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "infisical:index/secretApprovalPolicy:SecretApprovalPolicy":
                return new SecretApprovalPolicy(name, <any>undefined, { urn })
            case "infisical:index/secretFolder:SecretFolder":
                return new SecretFolder(name, <any>undefined, { urn })
            case "infisical:index/secretImport:SecretImport":
                return new SecretImport(name, <any>undefined, { urn })
            case "infisical:index/secretRotationAwsIamUserSecret:SecretRotationAwsIamUserSecret":
                return new SecretRotationAwsIamUserSecret(name, <any>undefined, { urn })
            case "infisical:index/secretRotationAzureClientSecret:SecretRotationAzureClientSecret":
                return new SecretRotationAzureClientSecret(name, <any>undefined, { urn })
            case "infisical:index/secretRotationMssqlCredentials:SecretRotationMssqlCredentials":
                return new SecretRotationMssqlCredentials(name, <any>undefined, { urn })
            case "infisical:index/secretRotationMysqlCredentials:SecretRotationMysqlCredentials":
                return new SecretRotationMysqlCredentials(name, <any>undefined, { urn })
            case "infisical:index/secretSync1password:SecretSync1password":
                return new SecretSync1password(name, <any>undefined, { urn })
            case "infisical:index/secretSyncAwsParameterStore:SecretSyncAwsParameterStore":
                return new SecretSyncAwsParameterStore(name, <any>undefined, { urn })
            case "infisical:index/secretSyncAwsSecretsManager:SecretSyncAwsSecretsManager":
                return new SecretSyncAwsSecretsManager(name, <any>undefined, { urn })
            case "infisical:index/secretSyncAzureAppConfiguration:SecretSyncAzureAppConfiguration":
                return new SecretSyncAzureAppConfiguration(name, <any>undefined, { urn })
            case "infisical:index/secretSyncAzureDevops:SecretSyncAzureDevops":
                return new SecretSyncAzureDevops(name, <any>undefined, { urn })
            case "infisical:index/secretSyncAzureKeyVault:SecretSyncAzureKeyVault":
                return new SecretSyncAzureKeyVault(name, <any>undefined, { urn })
            case "infisical:index/secretSyncGcpSecretManager:SecretSyncGcpSecretManager":
                return new SecretSyncGcpSecretManager(name, <any>undefined, { urn })
            case "infisical:index/secretSyncGithub:SecretSyncGithub":
                return new SecretSyncGithub(name, <any>undefined, { urn })
            case "infisical:index/secretSyncRender:SecretSyncRender":
                return new SecretSyncRender(name, <any>undefined, { urn })
            case "infisical:index/secretTag:SecretTag":
                return new SecretTag(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("infisical", "index/accessApprovalPolicy", _module)
pulumi.runtime.registerResourceModule("infisical", "index/appConnection1password", _module)
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionAws", _module)
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionAzureClientSecrets", _module)
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionGcp", _module)
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionMssql", _module)
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionMysql", _module)
pulumi.runtime.registerResourceModule("infisical", "index/appConnectionRender", _module)
pulumi.runtime.registerResourceModule("infisical", "index/dynamicSecretAwsIam", _module)
pulumi.runtime.registerResourceModule("infisical", "index/dynamicSecretKubernetes", _module)
pulumi.runtime.registerResourceModule("infisical", "index/dynamicSecretSqlDatabase", _module)
pulumi.runtime.registerResourceModule("infisical", "index/group", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identity", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityAwsAuth", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityAzureAuth", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityGcpAuth", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityKubernetesAuth", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityOidcAuth", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityUniversalAuth", _module)
pulumi.runtime.registerResourceModule("infisical", "index/identityUniversalAuthClientSecret", _module)
pulumi.runtime.registerResourceModule("infisical", "index/integrationAwsParameterStore", _module)
pulumi.runtime.registerResourceModule("infisical", "index/integrationAwsSecretsManager", _module)
pulumi.runtime.registerResourceModule("infisical", "index/integrationCircleci", _module)
pulumi.runtime.registerResourceModule("infisical", "index/integrationDatabricks", _module)
pulumi.runtime.registerResourceModule("infisical", "index/integrationGcpSecretManager", _module)
pulumi.runtime.registerResourceModule("infisical", "index/project", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectEnvironment", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectGroup", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectIdentity", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectIdentitySpecificPrivilege", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectRole", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectTemplate", _module)
pulumi.runtime.registerResourceModule("infisical", "index/projectUser", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secret", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretApprovalPolicy", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretFolder", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretImport", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretRotationAwsIamUserSecret", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretRotationAzureClientSecret", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretRotationMssqlCredentials", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretRotationMysqlCredentials", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSync1password", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAwsParameterStore", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAwsSecretsManager", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAzureAppConfiguration", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAzureDevops", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncAzureKeyVault", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncGcpSecretManager", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncGithub", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretSyncRender", _module)
pulumi.runtime.registerResourceModule("infisical", "index/secretTag", _module)
pulumi.runtime.registerResourcePackage("infisical", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:infisical") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IdentityUniversalAuthClientSecret extends pulumi.CustomResource {
    /**
     * Get an existing IdentityUniversalAuthClientSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityUniversalAuthClientSecretState, opts?: pulumi.CustomResourceOptions): IdentityUniversalAuthClientSecret {
        return new IdentityUniversalAuthClientSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/identityUniversalAuthClientSecret:IdentityUniversalAuthClientSecret';

    /**
     * Returns true if the given object is an instance of IdentityUniversalAuthClientSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityUniversalAuthClientSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityUniversalAuthClientSecret.__pulumiType;
    }

    /**
     * The client ID of the secret.
     */
    public /*out*/ readonly clientId!: pulumi.Output<string>;
    /**
     * The client secret.
     */
    public /*out*/ readonly clientSecret!: pulumi.Output<string>;
    /**
     * The UTC timestamp of the created at.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the client secret.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the identity to create a client secret for
     */
    public readonly identityId!: pulumi.Output<string>;
    /**
     * A flag indicating token has been revoked
     */
    public /*out*/ readonly isRevoked!: pulumi.Output<boolean>;
    /**
     * The number of times that the client secret is used
     */
    public /*out*/ readonly numberOfUses!: pulumi.Output<number>;
    /**
     * The maximum number of times that the client secret can be used; a value of 0 implies infinite number of uses. Default: 0
     */
    public readonly numberOfUsesLimit!: pulumi.Output<number>;
    /**
     * The lifetime for the client secret in seconds. Default: 0 - not expiring
     */
    public readonly ttl!: pulumi.Output<number>;

    /**
     * Create a IdentityUniversalAuthClientSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityUniversalAuthClientSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityUniversalAuthClientSecretArgs | IdentityUniversalAuthClientSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityUniversalAuthClientSecretState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["identityId"] = state ? state.identityId : undefined;
            resourceInputs["isRevoked"] = state ? state.isRevoked : undefined;
            resourceInputs["numberOfUses"] = state ? state.numberOfUses : undefined;
            resourceInputs["numberOfUsesLimit"] = state ? state.numberOfUsesLimit : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as IdentityUniversalAuthClientSecretArgs | undefined;
            if ((!args || args.identityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["identityId"] = args ? args.identityId : undefined;
            resourceInputs["numberOfUsesLimit"] = args ? args.numberOfUsesLimit : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["clientId"] = undefined /*out*/;
            resourceInputs["clientSecret"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["isRevoked"] = undefined /*out*/;
            resourceInputs["numberOfUses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IdentityUniversalAuthClientSecret.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityUniversalAuthClientSecret resources.
 */
export interface IdentityUniversalAuthClientSecretState {
    /**
     * The client ID of the secret.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The client secret.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The UTC timestamp of the created at.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the client secret.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the identity to create a client secret for
     */
    identityId?: pulumi.Input<string>;
    /**
     * A flag indicating token has been revoked
     */
    isRevoked?: pulumi.Input<boolean>;
    /**
     * The number of times that the client secret is used
     */
    numberOfUses?: pulumi.Input<number>;
    /**
     * The maximum number of times that the client secret can be used; a value of 0 implies infinite number of uses. Default: 0
     */
    numberOfUsesLimit?: pulumi.Input<number>;
    /**
     * The lifetime for the client secret in seconds. Default: 0 - not expiring
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a IdentityUniversalAuthClientSecret resource.
 */
export interface IdentityUniversalAuthClientSecretArgs {
    /**
     * The description of the client secret.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the identity to create a client secret for
     */
    identityId: pulumi.Input<string>;
    /**
     * The maximum number of times that the client secret can be used; a value of 0 implies infinite number of uses. Default: 0
     */
    numberOfUsesLimit?: pulumi.Input<number>;
    /**
     * The lifetime for the client secret in seconds. Default: 0 - not expiring
     */
    ttl?: pulumi.Input<number>;
}

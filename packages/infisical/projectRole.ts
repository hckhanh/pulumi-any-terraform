// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProjectRole extends pulumi.CustomResource {
    /**
     * Get an existing ProjectRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectRoleState, opts?: pulumi.CustomResourceOptions): ProjectRole {
        return new ProjectRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/projectRole:ProjectRole';

    /**
     * Returns true if the given object is an instance of ProjectRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectRole.__pulumiType;
    }

    /**
     * The description for the new role. Defaults to an empty string.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name for the new role
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (DEPRECATED, USE permissions_v2. Refer to the migration guide in
     * https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned
     * to the project role
     */
    public readonly permissions!: pulumi.Output<outputs.ProjectRolePermission[] | undefined>;
    /**
     * The permissions assigned to the project role. Refer to the documentation here
     * https://infisical.com/docs/internals/permissions for its usage.
     */
    public readonly permissionsV2s!: pulumi.Output<outputs.ProjectRolePermissionsV2[] | undefined>;
    /**
     * The slug of the project to create role
     */
    public readonly projectSlug!: pulumi.Output<string>;
    /**
     * The slug for the new role
     */
    public readonly slug!: pulumi.Output<string>;

    /**
     * Create a ProjectRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectRoleArgs | ProjectRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectRoleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["permissionsV2s"] = state ? state.permissionsV2s : undefined;
            resourceInputs["projectSlug"] = state ? state.projectSlug : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
        } else {
            const args = argsOrState as ProjectRoleArgs | undefined;
            if ((!args || args.projectSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectSlug'");
            }
            if ((!args || args.slug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["permissionsV2s"] = args ? args.permissionsV2s : undefined;
            resourceInputs["projectSlug"] = args ? args.projectSlug : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProjectRole resources.
 */
export interface ProjectRoleState {
    /**
     * The description for the new role. Defaults to an empty string.
     */
    description?: pulumi.Input<string>;
    /**
     * The name for the new role
     */
    name?: pulumi.Input<string>;
    /**
     * (DEPRECATED, USE permissions_v2. Refer to the migration guide in
     * https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned
     * to the project role
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.ProjectRolePermission>[]>;
    /**
     * The permissions assigned to the project role. Refer to the documentation here
     * https://infisical.com/docs/internals/permissions for its usage.
     */
    permissionsV2s?: pulumi.Input<pulumi.Input<inputs.ProjectRolePermissionsV2>[]>;
    /**
     * The slug of the project to create role
     */
    projectSlug?: pulumi.Input<string>;
    /**
     * The slug for the new role
     */
    slug?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectRole resource.
 */
export interface ProjectRoleArgs {
    /**
     * The description for the new role. Defaults to an empty string.
     */
    description?: pulumi.Input<string>;
    /**
     * The name for the new role
     */
    name?: pulumi.Input<string>;
    /**
     * (DEPRECATED, USE permissions_v2. Refer to the migration guide in
     * https://infisical.com/docs/internals/permissions#migrating-from-permission-v1-to-permission-v2) The permissions assigned
     * to the project role
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.ProjectRolePermission>[]>;
    /**
     * The permissions assigned to the project role. Refer to the documentation here
     * https://infisical.com/docs/internals/permissions for its usage.
     */
    permissionsV2s?: pulumi.Input<pulumi.Input<inputs.ProjectRolePermissionsV2>[]>;
    /**
     * The slug of the project to create role
     */
    projectSlug: pulumi.Input<string>;
    /**
     * The slug for the new role
     */
    slug: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppConnectionPostgres extends pulumi.CustomResource {
    /**
     * Get an existing AppConnectionPostgres resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppConnectionPostgresState, opts?: pulumi.CustomResourceOptions): AppConnectionPostgres {
        return new AppConnectionPostgres(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/appConnectionPostgres:AppConnectionPostgres';

    /**
     * Returns true if the given object is an instance of AppConnectionPostgres.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppConnectionPostgres {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppConnectionPostgres.__pulumiType;
    }

    /**
     * The credentials for the PostgreSQL App Connection
     */
    public readonly credentials!: pulumi.Output<outputs.AppConnectionPostgresCredentials>;
    /**
     * The hash of the PostgreSQL App Connection credentials
     */
    public /*out*/ readonly credentialsHash!: pulumi.Output<string>;
    /**
     * An optional description for the PostgreSQL App Connection.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The method used to authenticate with PostgreSQL. Possible values are: username-and-password
     */
    public readonly method!: pulumi.Output<string>;
    /**
     * The name of the PostgreSQL App Connection to create. Must be slug-friendly
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a AppConnectionPostgres resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppConnectionPostgresArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppConnectionPostgresArgs | AppConnectionPostgresState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppConnectionPostgresState | undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["credentialsHash"] = state ? state.credentialsHash : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as AppConnectionPostgresArgs | undefined;
            if ((!args || args.credentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentials'");
            }
            if ((!args || args.method === undefined) && !opts.urn) {
                throw new Error("Missing required property 'method'");
            }
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["credentialsHash"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppConnectionPostgres.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppConnectionPostgres resources.
 */
export interface AppConnectionPostgresState {
    /**
     * The credentials for the PostgreSQL App Connection
     */
    credentials?: pulumi.Input<inputs.AppConnectionPostgresCredentials>;
    /**
     * The hash of the PostgreSQL App Connection credentials
     */
    credentialsHash?: pulumi.Input<string>;
    /**
     * An optional description for the PostgreSQL App Connection.
     */
    description?: pulumi.Input<string>;
    /**
     * The method used to authenticate with PostgreSQL. Possible values are: username-and-password
     */
    method?: pulumi.Input<string>;
    /**
     * The name of the PostgreSQL App Connection to create. Must be slug-friendly
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppConnectionPostgres resource.
 */
export interface AppConnectionPostgresArgs {
    /**
     * The credentials for the PostgreSQL App Connection
     */
    credentials: pulumi.Input<inputs.AppConnectionPostgresCredentials>;
    /**
     * An optional description for the PostgreSQL App Connection.
     */
    description?: pulumi.Input<string>;
    /**
     * The method used to authenticate with PostgreSQL. Possible values are: username-and-password
     */
    method: pulumi.Input<string>;
    /**
     * The name of the PostgreSQL App Connection to create. Must be slug-friendly
     */
    name?: pulumi.Input<string>;
}

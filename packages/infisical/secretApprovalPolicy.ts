// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecretApprovalPolicy extends pulumi.CustomResource {
    /**
     * Get an existing SecretApprovalPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretApprovalPolicyState, opts?: pulumi.CustomResourceOptions): SecretApprovalPolicy {
        return new SecretApprovalPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/secretApprovalPolicy:SecretApprovalPolicy';

    /**
     * Returns true if the given object is an instance of SecretApprovalPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretApprovalPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretApprovalPolicy.__pulumiType;
    }

    /**
     * The required approvers
     */
    public readonly approvers!: pulumi.Output<outputs.SecretApprovalPolicyApprover[]>;
    /**
     * The enforcement level of the policy. This can either be hard or soft
     */
    public readonly enforcementLevel!: pulumi.Output<string>;
    /**
     * The environment to apply the secret approval policy to
     */
    public readonly environmentSlug!: pulumi.Output<string>;
    /**
     * The name of the secret approval policy
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the project to add the secret approval policy
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The number of required approvers
     */
    public readonly requiredApprovals!: pulumi.Output<number>;
    /**
     * The secret path to apply the secret approval policy to
     */
    public readonly secretPath!: pulumi.Output<string>;

    /**
     * Create a SecretApprovalPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretApprovalPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretApprovalPolicyArgs | SecretApprovalPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretApprovalPolicyState | undefined;
            resourceInputs["approvers"] = state ? state.approvers : undefined;
            resourceInputs["enforcementLevel"] = state ? state.enforcementLevel : undefined;
            resourceInputs["environmentSlug"] = state ? state.environmentSlug : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["requiredApprovals"] = state ? state.requiredApprovals : undefined;
            resourceInputs["secretPath"] = state ? state.secretPath : undefined;
        } else {
            const args = argsOrState as SecretApprovalPolicyArgs | undefined;
            if ((!args || args.approvers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'approvers'");
            }
            if ((!args || args.environmentSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentSlug'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.requiredApprovals === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requiredApprovals'");
            }
            if ((!args || args.secretPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretPath'");
            }
            resourceInputs["approvers"] = args ? args.approvers : undefined;
            resourceInputs["enforcementLevel"] = args ? args.enforcementLevel : undefined;
            resourceInputs["environmentSlug"] = args ? args.environmentSlug : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["requiredApprovals"] = args ? args.requiredApprovals : undefined;
            resourceInputs["secretPath"] = args ? args.secretPath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretApprovalPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecretApprovalPolicy resources.
 */
export interface SecretApprovalPolicyState {
    /**
     * The required approvers
     */
    approvers?: pulumi.Input<pulumi.Input<inputs.SecretApprovalPolicyApprover>[]>;
    /**
     * The enforcement level of the policy. This can either be hard or soft
     */
    enforcementLevel?: pulumi.Input<string>;
    /**
     * The environment to apply the secret approval policy to
     */
    environmentSlug?: pulumi.Input<string>;
    /**
     * The name of the secret approval policy
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project to add the secret approval policy
     */
    projectId?: pulumi.Input<string>;
    /**
     * The number of required approvers
     */
    requiredApprovals?: pulumi.Input<number>;
    /**
     * The secret path to apply the secret approval policy to
     */
    secretPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretApprovalPolicy resource.
 */
export interface SecretApprovalPolicyArgs {
    /**
     * The required approvers
     */
    approvers: pulumi.Input<pulumi.Input<inputs.SecretApprovalPolicyApprover>[]>;
    /**
     * The enforcement level of the policy. This can either be hard or soft
     */
    enforcementLevel?: pulumi.Input<string>;
    /**
     * The environment to apply the secret approval policy to
     */
    environmentSlug: pulumi.Input<string>;
    /**
     * The name of the secret approval policy
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project to add the secret approval policy
     */
    projectId: pulumi.Input<string>;
    /**
     * The number of required approvers
     */
    requiredApprovals: pulumi.Input<number>;
    /**
     * The secret path to apply the secret approval policy to
     */
    secretPath: pulumi.Input<string>;
}

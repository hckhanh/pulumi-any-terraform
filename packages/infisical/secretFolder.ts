// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SecretFolder extends pulumi.CustomResource {
    /**
     * Get an existing SecretFolder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretFolderState, opts?: pulumi.CustomResourceOptions): SecretFolder {
        return new SecretFolder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/secretFolder:SecretFolder';

    /**
     * Returns true if the given object is an instance of SecretFolder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretFolder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretFolder.__pulumiType;
    }

    /**
     * The ID of the environment
     */
    public /*out*/ readonly environmentId!: pulumi.Output<string>;
    /**
     * The environment slug of the folder to modify/create
     */
    public readonly environmentSlug!: pulumi.Output<string>;
    /**
     * The path where the folder should be created/updated
     */
    public readonly folderPath!: pulumi.Output<string>;
    /**
     * The name for the folder
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The full path of the folder, including its name.
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
     */
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a SecretFolder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretFolderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretFolderArgs | SecretFolderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretFolderState | undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["environmentSlug"] = state ? state.environmentSlug : undefined;
            resourceInputs["folderPath"] = state ? state.folderPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as SecretFolderArgs | undefined;
            if ((!args || args.environmentSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentSlug'");
            }
            if ((!args || args.folderPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'folderPath'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["environmentSlug"] = args ? args.environmentSlug : undefined;
            resourceInputs["folderPath"] = args ? args.folderPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["environmentId"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretFolder.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecretFolder resources.
 */
export interface SecretFolderState {
    /**
     * The ID of the environment
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The environment slug of the folder to modify/create
     */
    environmentSlug?: pulumi.Input<string>;
    /**
     * The path where the folder should be created/updated
     */
    folderPath?: pulumi.Input<string>;
    /**
     * The name for the folder
     */
    name?: pulumi.Input<string>;
    /**
     * The full path of the folder, including its name.
     */
    path?: pulumi.Input<string>;
    /**
     * The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretFolder resource.
 */
export interface SecretFolderArgs {
    /**
     * The environment slug of the folder to modify/create
     */
    environmentSlug: pulumi.Input<string>;
    /**
     * The path where the folder should be created/updated
     */
    folderPath: pulumi.Input<string>;
    /**
     * The name for the folder
     */
    name?: pulumi.Input<string>;
    /**
     * The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
     */
    projectId: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DynamicSecretKubernetes extends pulumi.CustomResource {
    /**
     * Get an existing DynamicSecretKubernetes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DynamicSecretKubernetesState, opts?: pulumi.CustomResourceOptions): DynamicSecretKubernetes {
        return new DynamicSecretKubernetes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/dynamicSecretKubernetes:DynamicSecretKubernetes';

    /**
     * Returns true if the given object is an instance of DynamicSecretKubernetes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DynamicSecretKubernetes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DynamicSecretKubernetes.__pulumiType;
    }

    /**
     * The configuration of the dynamic secret
     */
    public readonly configuration!: pulumi.Output<outputs.DynamicSecretKubernetesConfiguration>;
    /**
     * The default TTL that will be applied for all the leases.
     */
    public readonly defaultTtl!: pulumi.Output<string>;
    /**
     * The slug of the environment to create the dynamic secret in.
     */
    public readonly environmentSlug!: pulumi.Output<string>;
    /**
     * The maximum limit a TTL can be leases or renewed.
     */
    public readonly maxTtl!: pulumi.Output<string | undefined>;
    /**
     * The metadata associated with this dynamic secret
     */
    public readonly metadatas!: pulumi.Output<outputs.DynamicSecretKubernetesMetadata[] | undefined>;
    /**
     * The name of the dynamic secret.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The path to create the dynamic secret in.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * The slug of the project to create dynamic secret in.
     */
    public readonly projectSlug!: pulumi.Output<string>;
    /**
     * The username template of the dynamic secret
     */
    public readonly usernameTemplate!: pulumi.Output<string | undefined>;

    /**
     * Create a DynamicSecretKubernetes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DynamicSecretKubernetesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DynamicSecretKubernetesArgs | DynamicSecretKubernetesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DynamicSecretKubernetesState | undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["defaultTtl"] = state ? state.defaultTtl : undefined;
            resourceInputs["environmentSlug"] = state ? state.environmentSlug : undefined;
            resourceInputs["maxTtl"] = state ? state.maxTtl : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["projectSlug"] = state ? state.projectSlug : undefined;
            resourceInputs["usernameTemplate"] = state ? state.usernameTemplate : undefined;
        } else {
            const args = argsOrState as DynamicSecretKubernetesArgs | undefined;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.defaultTtl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultTtl'");
            }
            if ((!args || args.environmentSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentSlug'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.projectSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectSlug'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["defaultTtl"] = args ? args.defaultTtl : undefined;
            resourceInputs["environmentSlug"] = args ? args.environmentSlug : undefined;
            resourceInputs["maxTtl"] = args ? args.maxTtl : undefined;
            resourceInputs["metadatas"] = args ? args.metadatas : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["projectSlug"] = args ? args.projectSlug : undefined;
            resourceInputs["usernameTemplate"] = args ? args.usernameTemplate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DynamicSecretKubernetes.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DynamicSecretKubernetes resources.
 */
export interface DynamicSecretKubernetesState {
    /**
     * The configuration of the dynamic secret
     */
    configuration?: pulumi.Input<inputs.DynamicSecretKubernetesConfiguration>;
    /**
     * The default TTL that will be applied for all the leases.
     */
    defaultTtl?: pulumi.Input<string>;
    /**
     * The slug of the environment to create the dynamic secret in.
     */
    environmentSlug?: pulumi.Input<string>;
    /**
     * The maximum limit a TTL can be leases or renewed.
     */
    maxTtl?: pulumi.Input<string>;
    /**
     * The metadata associated with this dynamic secret
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.DynamicSecretKubernetesMetadata>[]>;
    /**
     * The name of the dynamic secret.
     */
    name?: pulumi.Input<string>;
    /**
     * The path to create the dynamic secret in.
     */
    path?: pulumi.Input<string>;
    /**
     * The slug of the project to create dynamic secret in.
     */
    projectSlug?: pulumi.Input<string>;
    /**
     * The username template of the dynamic secret
     */
    usernameTemplate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DynamicSecretKubernetes resource.
 */
export interface DynamicSecretKubernetesArgs {
    /**
     * The configuration of the dynamic secret
     */
    configuration: pulumi.Input<inputs.DynamicSecretKubernetesConfiguration>;
    /**
     * The default TTL that will be applied for all the leases.
     */
    defaultTtl: pulumi.Input<string>;
    /**
     * The slug of the environment to create the dynamic secret in.
     */
    environmentSlug: pulumi.Input<string>;
    /**
     * The maximum limit a TTL can be leases or renewed.
     */
    maxTtl?: pulumi.Input<string>;
    /**
     * The metadata associated with this dynamic secret
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.DynamicSecretKubernetesMetadata>[]>;
    /**
     * The name of the dynamic secret.
     */
    name?: pulumi.Input<string>;
    /**
     * The path to create the dynamic secret in.
     */
    path: pulumi.Input<string>;
    /**
     * The slug of the project to create dynamic secret in.
     */
    projectSlug: pulumi.Input<string>;
    /**
     * The username template of the dynamic secret
     */
    usernameTemplate?: pulumi.Input<string>;
}

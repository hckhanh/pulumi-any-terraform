// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IntegrationGcpSecretManager extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationGcpSecretManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationGcpSecretManagerState, opts?: pulumi.CustomResourceOptions): IntegrationGcpSecretManager {
        return new IntegrationGcpSecretManager(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/integrationGcpSecretManager:IntegrationGcpSecretManager';

    /**
     * Returns true if the given object is an instance of IntegrationGcpSecretManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationGcpSecretManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationGcpSecretManager.__pulumiType;
    }

    /**
     * The slug of the environment to sync to GCP Secret Manager (prod, dev, staging, etc).
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The ID of the GCP project.
     */
    public readonly gcpProjectId!: pulumi.Output<string>;
    /**
     * The ID of the integration auth, used internally by Infisical.
     */
    public /*out*/ readonly integrationAuthId!: pulumi.Output<string>;
    /**
     * The ID of the integration, used internally by Infisical.
     */
    public /*out*/ readonly integrationId!: pulumi.Output<string>;
    /**
     * Integration options
     */
    public readonly options!: pulumi.Output<outputs.IntegrationGcpSecretManagerOptions>;
    /**
     * The ID of your Infisical project.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The secret path in Infisical to sync secrets from.
     */
    public readonly secretPath!: pulumi.Output<string>;
    /**
     * Service account json for the GCP project.
     */
    public readonly serviceAccountJson!: pulumi.Output<string>;

    /**
     * Create a IntegrationGcpSecretManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationGcpSecretManagerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationGcpSecretManagerArgs | IntegrationGcpSecretManagerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationGcpSecretManagerState | undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["gcpProjectId"] = state ? state.gcpProjectId : undefined;
            resourceInputs["integrationAuthId"] = state ? state.integrationAuthId : undefined;
            resourceInputs["integrationId"] = state ? state.integrationId : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["secretPath"] = state ? state.secretPath : undefined;
            resourceInputs["serviceAccountJson"] = state ? state.serviceAccountJson : undefined;
        } else {
            const args = argsOrState as IntegrationGcpSecretManagerArgs | undefined;
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.gcpProjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gcpProjectId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.secretPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretPath'");
            }
            if ((!args || args.serviceAccountJson === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountJson'");
            }
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["gcpProjectId"] = args ? args.gcpProjectId : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["secretPath"] = args ? args.secretPath : undefined;
            resourceInputs["serviceAccountJson"] = args?.serviceAccountJson ? pulumi.secret(args.serviceAccountJson) : undefined;
            resourceInputs["integrationAuthId"] = undefined /*out*/;
            resourceInputs["integrationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["serviceAccountJson"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IntegrationGcpSecretManager.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IntegrationGcpSecretManager resources.
 */
export interface IntegrationGcpSecretManagerState {
    /**
     * The slug of the environment to sync to GCP Secret Manager (prod, dev, staging, etc).
     */
    environment?: pulumi.Input<string>;
    /**
     * The ID of the GCP project.
     */
    gcpProjectId?: pulumi.Input<string>;
    /**
     * The ID of the integration auth, used internally by Infisical.
     */
    integrationAuthId?: pulumi.Input<string>;
    /**
     * The ID of the integration, used internally by Infisical.
     */
    integrationId?: pulumi.Input<string>;
    /**
     * Integration options
     */
    options?: pulumi.Input<inputs.IntegrationGcpSecretManagerOptions>;
    /**
     * The ID of your Infisical project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The secret path in Infisical to sync secrets from.
     */
    secretPath?: pulumi.Input<string>;
    /**
     * Service account json for the GCP project.
     */
    serviceAccountJson?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationGcpSecretManager resource.
 */
export interface IntegrationGcpSecretManagerArgs {
    /**
     * The slug of the environment to sync to GCP Secret Manager (prod, dev, staging, etc).
     */
    environment: pulumi.Input<string>;
    /**
     * The ID of the GCP project.
     */
    gcpProjectId: pulumi.Input<string>;
    /**
     * Integration options
     */
    options?: pulumi.Input<inputs.IntegrationGcpSecretManagerOptions>;
    /**
     * The ID of your Infisical project.
     */
    projectId: pulumi.Input<string>;
    /**
     * The secret path in Infisical to sync secrets from.
     */
    secretPath: pulumi.Input<string>;
    /**
     * Service account json for the GCP project.
     */
    serviceAccountJson: pulumi.Input<string>;
}

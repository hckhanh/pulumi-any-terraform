// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecretSyncAwsParameterStore extends pulumi.CustomResource {
    /**
     * Get an existing SecretSyncAwsParameterStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretSyncAwsParameterStoreState, opts?: pulumi.CustomResourceOptions): SecretSyncAwsParameterStore {
        return new SecretSyncAwsParameterStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/secretSyncAwsParameterStore:SecretSyncAwsParameterStore';

    /**
     * Returns true if the given object is an instance of SecretSyncAwsParameterStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretSyncAwsParameterStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretSyncAwsParameterStore.__pulumiType;
    }

    /**
     * Whether secrets should be automatically synced when changes occur at the source location or not.
     */
    public readonly autoSyncEnabled!: pulumi.Output<boolean>;
    /**
     * The ID of the aws Connection to use for syncing.
     */
    public readonly connectionId!: pulumi.Output<string>;
    /**
     * An optional description for the AWS Parameter Store sync.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The destination configuration for the secret sync.
     */
    public readonly destinationConfig!: pulumi.Output<outputs.SecretSyncAwsParameterStoreDestinationConfig>;
    /**
     * The slug of the project environment to sync secrets from.
     */
    public readonly environment!: pulumi.Output<string>;
    /**
     * The name of the AWS Parameter Store sync to create. Must be slug-friendly.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the Infisical project to create the sync in.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The folder path to sync secrets from.
     */
    public readonly secretPath!: pulumi.Output<string>;
    /**
     * Parameters to modify how secrets are synced.
     */
    public readonly syncOptions!: pulumi.Output<outputs.SecretSyncAwsParameterStoreSyncOptions>;

    /**
     * Create a SecretSyncAwsParameterStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretSyncAwsParameterStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretSyncAwsParameterStoreArgs | SecretSyncAwsParameterStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretSyncAwsParameterStoreState | undefined;
            resourceInputs["autoSyncEnabled"] = state ? state.autoSyncEnabled : undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationConfig"] = state ? state.destinationConfig : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["secretPath"] = state ? state.secretPath : undefined;
            resourceInputs["syncOptions"] = state ? state.syncOptions : undefined;
        } else {
            const args = argsOrState as SecretSyncAwsParameterStoreArgs | undefined;
            if ((!args || args.connectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionId'");
            }
            if ((!args || args.destinationConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationConfig'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.secretPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretPath'");
            }
            if ((!args || args.syncOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncOptions'");
            }
            resourceInputs["autoSyncEnabled"] = args ? args.autoSyncEnabled : undefined;
            resourceInputs["connectionId"] = args ? args.connectionId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationConfig"] = args ? args.destinationConfig : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["secretPath"] = args ? args.secretPath : undefined;
            resourceInputs["syncOptions"] = args ? args.syncOptions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretSyncAwsParameterStore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecretSyncAwsParameterStore resources.
 */
export interface SecretSyncAwsParameterStoreState {
    /**
     * Whether secrets should be automatically synced when changes occur at the source location or not.
     */
    autoSyncEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the aws Connection to use for syncing.
     */
    connectionId?: pulumi.Input<string>;
    /**
     * An optional description for the AWS Parameter Store sync.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination configuration for the secret sync.
     */
    destinationConfig?: pulumi.Input<inputs.SecretSyncAwsParameterStoreDestinationConfig>;
    /**
     * The slug of the project environment to sync secrets from.
     */
    environment?: pulumi.Input<string>;
    /**
     * The name of the AWS Parameter Store sync to create. Must be slug-friendly.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Infisical project to create the sync in.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The folder path to sync secrets from.
     */
    secretPath?: pulumi.Input<string>;
    /**
     * Parameters to modify how secrets are synced.
     */
    syncOptions?: pulumi.Input<inputs.SecretSyncAwsParameterStoreSyncOptions>;
}

/**
 * The set of arguments for constructing a SecretSyncAwsParameterStore resource.
 */
export interface SecretSyncAwsParameterStoreArgs {
    /**
     * Whether secrets should be automatically synced when changes occur at the source location or not.
     */
    autoSyncEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the aws Connection to use for syncing.
     */
    connectionId: pulumi.Input<string>;
    /**
     * An optional description for the AWS Parameter Store sync.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination configuration for the secret sync.
     */
    destinationConfig: pulumi.Input<inputs.SecretSyncAwsParameterStoreDestinationConfig>;
    /**
     * The slug of the project environment to sync secrets from.
     */
    environment: pulumi.Input<string>;
    /**
     * The name of the AWS Parameter Store sync to create. Must be slug-friendly.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Infisical project to create the sync in.
     */
    projectId: pulumi.Input<string>;
    /**
     * The folder path to sync secrets from.
     */
    secretPath: pulumi.Input<string>;
    /**
     * Parameters to modify how secrets are synced.
     */
    syncOptions: pulumi.Input<inputs.SecretSyncAwsParameterStoreSyncOptions>;
}

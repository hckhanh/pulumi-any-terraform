// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Identity extends pulumi.CustomResource {
    /**
     * Get an existing Identity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityState, opts?: pulumi.CustomResourceOptions): Identity {
        return new Identity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infisical:index/identity:Identity';

    /**
     * Returns true if the given object is an instance of Identity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Identity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Identity.__pulumiType;
    }

    /**
     * The authentication types of the identity
     */
    public /*out*/ readonly authModes!: pulumi.Output<string[]>;
    /**
     * The name for the identity
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the organization for the identity
     */
    public readonly orgId!: pulumi.Output<string>;
    /**
     * The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created
     * custom roles, you can use their slugs as well.
     */
    public readonly role!: pulumi.Output<string>;

    /**
     * Create a Identity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityArgs | IdentityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityState | undefined;
            resourceInputs["authModes"] = state ? state.authModes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
        } else {
            const args = argsOrState as IdentityArgs | undefined;
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["authModes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Identity.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Identity resources.
 */
export interface IdentityState {
    /**
     * The authentication types of the identity
     */
    authModes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name for the identity
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the organization for the identity
     */
    orgId?: pulumi.Input<string>;
    /**
     * The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created
     * custom roles, you can use their slugs as well.
     */
    role?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Identity resource.
 */
export interface IdentityArgs {
    /**
     * The name for the identity
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the organization for the identity
     */
    orgId: pulumi.Input<string>;
    /**
     * The role for the identity. Available default role options are 'admin', 'member', and 'no-access'. If you've created
     * custom roles, you can use their slugs as well.
     */
    role: pulumi.Input<string>;
}

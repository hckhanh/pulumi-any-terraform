// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DomainRecords extends pulumi.CustomResource {
    /**
     * Get an existing DomainRecords resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainRecordsState, opts?: pulumi.CustomResourceOptions): DomainRecords {
        return new DomainRecords(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'namecheap:index/domainRecords:DomainRecords';

    /**
     * Returns true if the given object is an instance of DomainRecords.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainRecords {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainRecords.__pulumiType;
    }

    /**
     * Purchased available domain name on your account
     */
    declare public readonly domain: pulumi.Output<string>;
    declare public readonly domainRecordsId: pulumi.Output<string>;
    /**
     * Possible values: NONE, MXE, MX, FWD, OX, GMAIL
     */
    declare public readonly emailType: pulumi.Output<string | undefined>;
    /**
     * Possible values: MERGE (default), OVERWRITE
     */
    declare public readonly mode: pulumi.Output<string | undefined>;
    declare public readonly nameservers: pulumi.Output<string[] | undefined>;
    declare public readonly records: pulumi.Output<outputs.DomainRecordsRecord[] | undefined>;

    /**
     * Create a DomainRecords resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainRecordsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainRecordsArgs | DomainRecordsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainRecordsState | undefined;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["domainRecordsId"] = state?.domainRecordsId;
            resourceInputs["emailType"] = state?.emailType;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["nameservers"] = state?.nameservers;
            resourceInputs["records"] = state?.records;
        } else {
            const args = argsOrState as DomainRecordsArgs | undefined;
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            resourceInputs["domain"] = args?.domain;
            resourceInputs["domainRecordsId"] = args?.domainRecordsId;
            resourceInputs["emailType"] = args?.emailType;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["nameservers"] = args?.nameservers;
            resourceInputs["records"] = args?.records;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainRecords.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DomainRecords resources.
 */
export interface DomainRecordsState {
    /**
     * Purchased available domain name on your account
     */
    domain?: pulumi.Input<string>;
    domainRecordsId?: pulumi.Input<string>;
    /**
     * Possible values: NONE, MXE, MX, FWD, OX, GMAIL
     */
    emailType?: pulumi.Input<string>;
    /**
     * Possible values: MERGE (default), OVERWRITE
     */
    mode?: pulumi.Input<string>;
    nameservers?: pulumi.Input<pulumi.Input<string>[]>;
    records?: pulumi.Input<pulumi.Input<inputs.DomainRecordsRecord>[]>;
}

/**
 * The set of arguments for constructing a DomainRecords resource.
 */
export interface DomainRecordsArgs {
    /**
     * Purchased available domain name on your account
     */
    domain: pulumi.Input<string>;
    domainRecordsId?: pulumi.Input<string>;
    /**
     * Possible values: NONE, MXE, MX, FWD, OX, GMAIL
     */
    emailType?: pulumi.Input<string>;
    /**
     * Possible values: MERGE (default), OVERWRITE
     */
    mode?: pulumi.Input<string>;
    nameservers?: pulumi.Input<pulumi.Input<string>[]>;
    records?: pulumi.Input<pulumi.Input<inputs.DomainRecordsRecord>[]>;
}

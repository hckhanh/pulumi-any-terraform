// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PullzoneOptimizerClass extends pulumi.CustomResource {
    /**
     * Get an existing PullzoneOptimizerClass resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PullzoneOptimizerClassState, opts?: pulumi.CustomResourceOptions): PullzoneOptimizerClass {
        return new PullzoneOptimizerClass(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/pullzoneOptimizerClass:PullzoneOptimizerClass';

    /**
     * Returns true if the given object is an instance of PullzoneOptimizerClass.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PullzoneOptimizerClass {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PullzoneOptimizerClass.__pulumiType;
    }

    /**
     * The aspect ratio for image optimization.
     */
    declare public readonly aspectRatio: pulumi.Output<string | undefined>;
    /**
     * Indicates whether automatic optimization for images is enabled.
     */
    declare public readonly autoOptimize: pulumi.Output<string | undefined>;
    /**
     * The level of blur to apply to images.
     */
    declare public readonly blur: pulumi.Output<number | undefined>;
    /**
     * The brightness adjustment for images.
     */
    declare public readonly brightness: pulumi.Output<number | undefined>;
    /**
     * The contrast adjustment for images.
     */
    declare public readonly contrast: pulumi.Output<number | undefined>;
    /**
     * The cropping settings for images.
     */
    declare public readonly crop: pulumi.Output<string | undefined>;
    /**
     * The gravity setting for cropping.
     */
    declare public readonly cropGravity: pulumi.Output<string | undefined>;
    /**
     * Indicates whether to flip images horizontally.
     */
    declare public readonly flip: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether to flip images vertically.
     */
    declare public readonly flop: pulumi.Output<boolean | undefined>;
    /**
     * The height to which images should be resized.
     */
    declare public readonly height: pulumi.Output<number | undefined>;
    /**
     * The hue adjustment for images.
     */
    declare public readonly hue: pulumi.Output<number | undefined>;
    /**
     * The name of the optimizer class.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the linked pull zone.
     */
    declare public readonly pullzone: pulumi.Output<number>;
    /**
     * The quality setting for image optimization.
     */
    declare public readonly quality: pulumi.Output<number | undefined>;
    /**
     * The saturation adjustment for images.
     */
    declare public readonly saturation: pulumi.Output<number | undefined>;
    /**
     * The level of sepia tone to apply to images.
     */
    declare public readonly sepia: pulumi.Output<number | undefined>;
    /**
     * Indicates whether to sharpen images.
     */
    declare public readonly sharpen: pulumi.Output<boolean | undefined>;
    /**
     * The width to which images should be resized.
     */
    declare public readonly width: pulumi.Output<number | undefined>;

    /**
     * Create a PullzoneOptimizerClass resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PullzoneOptimizerClassArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PullzoneOptimizerClassArgs | PullzoneOptimizerClassState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PullzoneOptimizerClassState | undefined;
            resourceInputs["aspectRatio"] = state?.aspectRatio;
            resourceInputs["autoOptimize"] = state?.autoOptimize;
            resourceInputs["blur"] = state?.blur;
            resourceInputs["brightness"] = state?.brightness;
            resourceInputs["contrast"] = state?.contrast;
            resourceInputs["crop"] = state?.crop;
            resourceInputs["cropGravity"] = state?.cropGravity;
            resourceInputs["flip"] = state?.flip;
            resourceInputs["flop"] = state?.flop;
            resourceInputs["height"] = state?.height;
            resourceInputs["hue"] = state?.hue;
            resourceInputs["name"] = state?.name;
            resourceInputs["pullzone"] = state?.pullzone;
            resourceInputs["quality"] = state?.quality;
            resourceInputs["saturation"] = state?.saturation;
            resourceInputs["sepia"] = state?.sepia;
            resourceInputs["sharpen"] = state?.sharpen;
            resourceInputs["width"] = state?.width;
        } else {
            const args = argsOrState as PullzoneOptimizerClassArgs | undefined;
            if (args?.pullzone === undefined && !opts.urn) {
                throw new Error("Missing required property 'pullzone'");
            }
            resourceInputs["aspectRatio"] = args?.aspectRatio;
            resourceInputs["autoOptimize"] = args?.autoOptimize;
            resourceInputs["blur"] = args?.blur;
            resourceInputs["brightness"] = args?.brightness;
            resourceInputs["contrast"] = args?.contrast;
            resourceInputs["crop"] = args?.crop;
            resourceInputs["cropGravity"] = args?.cropGravity;
            resourceInputs["flip"] = args?.flip;
            resourceInputs["flop"] = args?.flop;
            resourceInputs["height"] = args?.height;
            resourceInputs["hue"] = args?.hue;
            resourceInputs["name"] = args?.name;
            resourceInputs["pullzone"] = args?.pullzone;
            resourceInputs["quality"] = args?.quality;
            resourceInputs["saturation"] = args?.saturation;
            resourceInputs["sepia"] = args?.sepia;
            resourceInputs["sharpen"] = args?.sharpen;
            resourceInputs["width"] = args?.width;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PullzoneOptimizerClass.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PullzoneOptimizerClass resources.
 */
export interface PullzoneOptimizerClassState {
    /**
     * The aspect ratio for image optimization.
     */
    aspectRatio?: pulumi.Input<string>;
    /**
     * Indicates whether automatic optimization for images is enabled.
     */
    autoOptimize?: pulumi.Input<string>;
    /**
     * The level of blur to apply to images.
     */
    blur?: pulumi.Input<number>;
    /**
     * The brightness adjustment for images.
     */
    brightness?: pulumi.Input<number>;
    /**
     * The contrast adjustment for images.
     */
    contrast?: pulumi.Input<number>;
    /**
     * The cropping settings for images.
     */
    crop?: pulumi.Input<string>;
    /**
     * The gravity setting for cropping.
     */
    cropGravity?: pulumi.Input<string>;
    /**
     * Indicates whether to flip images horizontally.
     */
    flip?: pulumi.Input<boolean>;
    /**
     * Indicates whether to flip images vertically.
     */
    flop?: pulumi.Input<boolean>;
    /**
     * The height to which images should be resized.
     */
    height?: pulumi.Input<number>;
    /**
     * The hue adjustment for images.
     */
    hue?: pulumi.Input<number>;
    /**
     * The name of the optimizer class.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the linked pull zone.
     */
    pullzone?: pulumi.Input<number>;
    /**
     * The quality setting for image optimization.
     */
    quality?: pulumi.Input<number>;
    /**
     * The saturation adjustment for images.
     */
    saturation?: pulumi.Input<number>;
    /**
     * The level of sepia tone to apply to images.
     */
    sepia?: pulumi.Input<number>;
    /**
     * Indicates whether to sharpen images.
     */
    sharpen?: pulumi.Input<boolean>;
    /**
     * The width to which images should be resized.
     */
    width?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PullzoneOptimizerClass resource.
 */
export interface PullzoneOptimizerClassArgs {
    /**
     * The aspect ratio for image optimization.
     */
    aspectRatio?: pulumi.Input<string>;
    /**
     * Indicates whether automatic optimization for images is enabled.
     */
    autoOptimize?: pulumi.Input<string>;
    /**
     * The level of blur to apply to images.
     */
    blur?: pulumi.Input<number>;
    /**
     * The brightness adjustment for images.
     */
    brightness?: pulumi.Input<number>;
    /**
     * The contrast adjustment for images.
     */
    contrast?: pulumi.Input<number>;
    /**
     * The cropping settings for images.
     */
    crop?: pulumi.Input<string>;
    /**
     * The gravity setting for cropping.
     */
    cropGravity?: pulumi.Input<string>;
    /**
     * Indicates whether to flip images horizontally.
     */
    flip?: pulumi.Input<boolean>;
    /**
     * Indicates whether to flip images vertically.
     */
    flop?: pulumi.Input<boolean>;
    /**
     * The height to which images should be resized.
     */
    height?: pulumi.Input<number>;
    /**
     * The hue adjustment for images.
     */
    hue?: pulumi.Input<number>;
    /**
     * The name of the optimizer class.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the linked pull zone.
     */
    pullzone: pulumi.Input<number>;
    /**
     * The quality setting for image optimization.
     */
    quality?: pulumi.Input<number>;
    /**
     * The saturation adjustment for images.
     */
    saturation?: pulumi.Input<number>;
    /**
     * The level of sepia tone to apply to images.
     */
    sepia?: pulumi.Input<number>;
    /**
     * Indicates whether to sharpen images.
     */
    sharpen?: pulumi.Input<boolean>;
    /**
     * The width to which images should be resized.
     */
    width?: pulumi.Input<number>;
}

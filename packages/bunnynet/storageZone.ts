// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StorageZone extends pulumi.CustomResource {
    /**
     * Get an existing StorageZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageZoneState, opts?: pulumi.CustomResourceOptions): StorageZone {
        return new StorageZone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/storageZone:StorageZone';

    /**
     * Returns true if the given object is an instance of StorageZone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageZone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageZone.__pulumiType;
    }

    /**
     * The file path for a custom 404 error page.
     */
    public readonly custom404FilePath!: pulumi.Output<string | undefined>;
    /**
     * The date when the zone was last modified.
     */
    public /*out*/ readonly dateModified!: pulumi.Output<string>;
    /**
     * The hostname for accessing the storage zone.
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * The name of the storage zone.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password for accessing the storage zone.
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * The read-only password for accessing the storage zone.
     */
    public /*out*/ readonly passwordReadonly!: pulumi.Output<string>;
    /**
     * The region where the storage zone is located.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * A set of regions for data replication.
     */
    public readonly replicationRegions!: pulumi.Output<string[]>;
    /**
     * Indicates whether to rewrite 404 errors to 200 status.
     */
    public readonly rewrite404To200!: pulumi.Output<boolean>;
    /**
     * The ID of the storage zone.
     */
    public /*out*/ readonly storageZoneId!: pulumi.Output<number>;
    /**
     * Options: `Edge`, `Standard`
     */
    public readonly zoneTier!: pulumi.Output<string>;

    /**
     * Create a StorageZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageZoneArgs | StorageZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageZoneState | undefined;
            resourceInputs["custom404FilePath"] = state ? state.custom404FilePath : undefined;
            resourceInputs["dateModified"] = state ? state.dateModified : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordReadonly"] = state ? state.passwordReadonly : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["replicationRegions"] = state ? state.replicationRegions : undefined;
            resourceInputs["rewrite404To200"] = state ? state.rewrite404To200 : undefined;
            resourceInputs["storageZoneId"] = state ? state.storageZoneId : undefined;
            resourceInputs["zoneTier"] = state ? state.zoneTier : undefined;
        } else {
            const args = argsOrState as StorageZoneArgs | undefined;
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.zoneTier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneTier'");
            }
            resourceInputs["custom404FilePath"] = args ? args.custom404FilePath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["replicationRegions"] = args ? args.replicationRegions : undefined;
            resourceInputs["rewrite404To200"] = args ? args.rewrite404To200 : undefined;
            resourceInputs["zoneTier"] = args ? args.zoneTier : undefined;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["passwordReadonly"] = undefined /*out*/;
            resourceInputs["storageZoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "passwordReadonly"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StorageZone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageZone resources.
 */
export interface StorageZoneState {
    /**
     * The file path for a custom 404 error page.
     */
    custom404FilePath?: pulumi.Input<string>;
    /**
     * The date when the zone was last modified.
     */
    dateModified?: pulumi.Input<string>;
    /**
     * The hostname for accessing the storage zone.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The name of the storage zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The password for accessing the storage zone.
     */
    password?: pulumi.Input<string>;
    /**
     * The read-only password for accessing the storage zone.
     */
    passwordReadonly?: pulumi.Input<string>;
    /**
     * The region where the storage zone is located.
     */
    region?: pulumi.Input<string>;
    /**
     * A set of regions for data replication.
     */
    replicationRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether to rewrite 404 errors to 200 status.
     */
    rewrite404To200?: pulumi.Input<boolean>;
    /**
     * The ID of the storage zone.
     */
    storageZoneId?: pulumi.Input<number>;
    /**
     * Options: `Edge`, `Standard`
     */
    zoneTier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageZone resource.
 */
export interface StorageZoneArgs {
    /**
     * The file path for a custom 404 error page.
     */
    custom404FilePath?: pulumi.Input<string>;
    /**
     * The name of the storage zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The region where the storage zone is located.
     */
    region: pulumi.Input<string>;
    /**
     * A set of regions for data replication.
     */
    replicationRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether to rewrite 404 errors to 200 status.
     */
    rewrite404To200?: pulumi.Input<boolean>;
    /**
     * Options: `Edge`, `Standard`
     */
    zoneTier: pulumi.Input<string>;
}

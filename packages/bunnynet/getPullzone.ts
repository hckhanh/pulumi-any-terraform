// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPullzone(args: GetPullzoneArgs, opts?: pulumi.InvokeOptions): Promise<GetPullzoneResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("bunnynet:index/getPullzone:getPullzone", {
        "id": args.id,
        "origin": args.origin,
        "routing": args.routing,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPullzone.
 */
export interface GetPullzoneArgs {
    id: number;
    origin?: inputs.GetPullzoneOrigin;
    routing?: inputs.GetPullzoneRouting;
}

/**
 * A collection of values returned by getPullzone.
 */
export interface GetPullzoneResult {
    readonly addCanonicalHeader: boolean;
    readonly allowReferers: string[];
    readonly blockIps: string[];
    readonly blockNoReferer: boolean;
    readonly blockPostRequests: boolean;
    readonly blockReferers: string[];
    readonly blockRootPath: boolean;
    readonly cacheChunked: boolean;
    readonly cacheEnabled: boolean;
    readonly cacheErrors: boolean;
    readonly cacheExpirationTime: number;
    readonly cacheExpirationTimeBrowser: number;
    readonly cacheStales: string[];
    readonly cacheVaries: string[];
    readonly cacheVaryCookies: string[];
    readonly cacheVaryQuerystrings: string[];
    readonly cdnDomain: string;
    readonly corsEnabled: boolean;
    readonly corsExtensions: string[];
    readonly disableLetsencrypt: boolean;
    readonly errorpageCustomContent: string;
    readonly errorpageCustomEnabled: boolean;
    readonly errorpageStatuspageCode: string;
    readonly errorpageStatuspageEnabled: boolean;
    readonly errorpageWhitelabel: boolean;
    readonly id: number;
    readonly limitAfter: number;
    readonly limitBandwidth: number;
    readonly limitBurst: number;
    readonly limitConnections: number;
    readonly limitDownloadSpeed: number;
    readonly limitRequests: number;
    readonly logAnonymized: boolean;
    readonly logAnonymizedStyle: string;
    readonly logEnabled: boolean;
    readonly logForwardEnabled: boolean;
    readonly logForwardFormat: string;
    readonly logForwardPort: number;
    readonly logForwardProtocol: string;
    readonly logForwardServer: string;
    readonly logForwardToken: string;
    readonly logStorageEnabled: boolean;
    readonly logStorageZone: number;
    readonly name: string;
    readonly optimizerBurrow: boolean;
    readonly optimizerClassesForce: boolean;
    readonly optimizerDynamicImageApi: boolean;
    readonly optimizerEnabled: boolean;
    readonly optimizerHtmlPrerender: boolean;
    readonly optimizerMinifyCss: boolean;
    readonly optimizerMinifyJs: boolean;
    readonly optimizerSmartimage: boolean;
    readonly optimizerSmartimageDesktopMaxwidth: number;
    readonly optimizerSmartimageDesktopQuality: number;
    readonly optimizerSmartimageMobileMaxwidth: number;
    readonly optimizerSmartimageMobileQuality: number;
    readonly optimizerWatermark: boolean;
    readonly optimizerWatermarkBorderoffset: number;
    readonly optimizerWatermarkMinsize: number;
    readonly optimizerWatermarkPosition: string;
    readonly optimizerWatermarkUrl: string;
    readonly optimizerWebp: boolean;
    readonly origin?: outputs.GetPullzoneOrigin;
    readonly originshieldConcurrencyLimit: boolean;
    readonly originshieldConcurrencyRequests: number;
    readonly originshieldEnabled: boolean;
    readonly originshieldQueueRequests: number;
    readonly originshieldQueueWait: number;
    readonly originshieldZone: string;
    readonly permacacheStoragezone: number;
    readonly requestCoalescingEnabled: boolean;
    readonly requestCoalescingTimeout: number;
    readonly routing?: outputs.GetPullzoneRouting;
    readonly s3AuthEnabled: boolean;
    readonly s3AuthKey: string;
    readonly s3AuthRegion: string;
    readonly s3AuthSecret: string;
    readonly safehopConnectionTimeout: number;
    readonly safehopEnabled: boolean;
    readonly safehopResponseTimeout: number;
    readonly safehopRetryCount: number;
    readonly safehopRetryDelay: number;
    readonly safehopRetryReasons: string[];
    readonly sortQuerystring: boolean;
    readonly stripCookies: boolean;
    readonly tlsSupports: string[];
    readonly tokenAuthEnabled: boolean;
    readonly tokenAuthIpValidation: boolean;
    readonly tokenAuthKey: string;
    readonly useBackgroundUpdate: boolean;
    readonly websocketsEnabled: boolean;
    readonly websocketsMaxConnections: number;
}
export function getPullzoneOutput(args: GetPullzoneOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPullzoneResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("bunnynet:index/getPullzone:getPullzone", {
        "id": args.id,
        "origin": args.origin,
        "routing": args.routing,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPullzone.
 */
export interface GetPullzoneOutputArgs {
    id: pulumi.Input<number>;
    origin?: pulumi.Input<inputs.GetPullzoneOriginArgs>;
    routing?: pulumi.Input<inputs.GetPullzoneRoutingArgs>;
}

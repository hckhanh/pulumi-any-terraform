// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StreamLibrary extends pulumi.CustomResource {
    /**
     * Get an existing StreamLibrary resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamLibraryState, opts?: pulumi.CustomResourceOptions): StreamLibrary {
        return new StreamLibrary(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/streamLibrary:StreamLibrary';

    /**
     * Returns true if the given object is an instance of StreamLibrary.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamLibrary {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamLibrary.__pulumiType;
    }

    /**
     * The API key for accessing the stream library.
     */
    declare public /*out*/ readonly apiKey: pulumi.Output<string>;
    /**
     * The bitrate used for encoding 1080p videos, in kilobits per second.
     */
    declare public readonly bitrate1080p: pulumi.Output<number>;
    /**
     * The bitrate used for encoding 1440p videos, in kilobits per second.
     */
    declare public readonly bitrate1440p: pulumi.Output<number>;
    /**
     * The bitrate used for encoding 2160p videos, in kilobits per second.
     */
    declare public readonly bitrate2160p: pulumi.Output<number>;
    /**
     * The bitrate used for encoding 240p videos, in kilobits per second.
     */
    declare public readonly bitrate240p: pulumi.Output<number>;
    /**
     * The bitrate used for encoding 360p videos, in kilobits per second.
     */
    declare public readonly bitrate360p: pulumi.Output<number>;
    /**
     * The bitrate used for encoding 480p videos, in kilobits per second.
     */
    declare public readonly bitrate480p: pulumi.Output<number>;
    /**
     * The bitrate used for encoding 720p videos, in kilobits per second.
     */
    declare public readonly bitrate720p: pulumi.Output<number>;
    /**
     * Indicates whether CDN token authentication is required.
     */
    declare public readonly cdnTokenAuthenticationRequired: pulumi.Output<boolean>;
    /**
     * Indicates whether content tagging is enabled.
     */
    declare public readonly contentTaggingEnabled: pulumi.Output<boolean>;
    /**
     * Determines direct play URLs are enabled.
     */
    declare public readonly directPlayEnabled: pulumi.Output<boolean>;
    /**
     * Indicates whether the requests without a referrer are blocked.
     */
    declare public readonly directUrlFileAccessBlocked: pulumi.Output<boolean>;
    /**
     * Indicates whether the MediaCage basic DRM is enabled
     */
    declare public readonly drmMediacageBasicEnabled: pulumi.Output<boolean>;
    /**
     * Indicates whether the Early-Play feature is enabled.
     */
    declare public readonly earlyPlayEnabled: pulumi.Output<boolean>;
    /**
     * Options: `Free`, `Premium`
     */
    declare public readonly encodingTier: pulumi.Output<string>;
    /**
     * Indicates whether Just-In-Time Encoding is enabled
     */
    declare public readonly jitEncoding: pulumi.Output<boolean>;
    /**
     * Indicates whether the MP4 fallback feature is enabled.
     */
    declare public readonly mp4FallbackEnabled: pulumi.Output<boolean>;
    /**
     * Indicates whether multiple output audio track support is enabled.
     */
    declare public readonly multiAudioTrackSupportEnabled: pulumi.Output<boolean>;
    /**
     * The name of the stream library.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Indicates whether to keep original files after encoding.
     */
    declare public readonly originalFilesKeep: pulumi.Output<boolean>;
    /**
     * Options: `av1`, `hevc`, `vp9`, `x264`
     */
    declare public readonly outputCodecs: pulumi.Output<string[]>;
    /**
     * The background color of the captions in the video player.
     */
    declare public readonly playerCaptionsBackgroundColor: pulumi.Output<string>;
    /**
     * The font color of the captions in the video player.
     */
    declare public readonly playerCaptionsFontColor: pulumi.Output<string>;
    /**
     * The font size of the captions in the video player.
     */
    declare public readonly playerCaptionsFontSize: pulumi.Output<number>;
    /**
     * Options: `airplay`, `captions`, `chromecast`, `current-time`, `duration`, `fast-forward`, `fullscreen`, `mute`, `pip`,
     * `play`, `play-large`, `progress`, `rewind`, `settings`, `volume`
     */
    declare public readonly playerControls: pulumi.Output<string[]>;
    /**
     * Custom HTML to be included in the head of the video player.
     */
    declare public readonly playerCustomHead: pulumi.Output<string>;
    /**
     * Options: `arial`, `inter`, `lato`, `oswald`, `raleway`, `roboto`, `rubik`, `ubuntu`
     */
    declare public readonly playerFontFamily: pulumi.Output<string>;
    /**
     * Specifies the language for the video player interface.
     */
    declare public readonly playerLanguage: pulumi.Output<string>;
    /**
     * Customizes the appearance of the video player.
     */
    declare public readonly playerPrimaryColor: pulumi.Output<string>;
    /**
     * Indicates whether the video watch heatmap should be displayed in the player.
     */
    declare public readonly playerWatchtimeHeatmapEnabled: pulumi.Output<boolean>;
    /**
     * The ID of the linked pullzone.
     */
    declare public /*out*/ readonly pullzone: pulumi.Output<number>;
    /**
     * The list of allowed referrer domains allowed to access videos in this library.
     */
    declare public readonly referersAlloweds: pulumi.Output<string[]>;
    /**
     * The list of blocked referrer domains blocked from accessing videos in this library.
     */
    declare public readonly referersBlockeds: pulumi.Output<string[]>;
    /**
     * A list of resolutions available for the videos.
     */
    declare public readonly resolutions: pulumi.Output<string[]>;
    /**
     * The ID of the linked storage zone.
     */
    declare public /*out*/ readonly storageZone: pulumi.Output<number>;
    declare public /*out*/ readonly streamLibraryId: pulumi.Output<number>;
    /**
     * Indicates whether the automatic audio transcribing is currently enabled for this zone.
     */
    declare public readonly transcribingEnabled: pulumi.Output<boolean>;
    /**
     * The list of languages that the captions will be automatically transcribed to.
     */
    declare public readonly transcribingLanguages: pulumi.Output<string[]>;
    /**
     * Indicates whether automatic transcribing description generation is currently enabled.
     */
    declare public readonly transcribingSmartDescriptionEnabled: pulumi.Output<boolean>;
    /**
     * Indicates whether automatic transcribing title generation is currently enabled.
     */
    declare public readonly transcribingSmartTitleEnabled: pulumi.Output<boolean>;
    /**
     * The URL of the VAST tag for ad integration.
     */
    declare public readonly vastTagUrl: pulumi.Output<string>;
    /**
     * Indicates whether the player token authentication is enabled
     */
    declare public readonly viewTokenAuthenticationRequired: pulumi.Output<boolean>;
    /**
     * The height of the watermark (in %).
     */
    declare public readonly watermarkHeight: pulumi.Output<number>;
    /**
     * The left offset of the watermark position (in %).
     */
    declare public readonly watermarkPositionLeft: pulumi.Output<number>;
    /**
     * The top offset of the watermark position (in %).
     */
    declare public readonly watermarkPositionTop: pulumi.Output<number>;
    /**
     * The width of the watermark (in %).
     */
    declare public readonly watermarkWidth: pulumi.Output<number>;
    /**
     * The URL for webhook notifications.
     */
    declare public readonly webhookUrl: pulumi.Output<string>;

    /**
     * Create a StreamLibrary resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StreamLibraryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamLibraryArgs | StreamLibraryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamLibraryState | undefined;
            resourceInputs["apiKey"] = state?.apiKey;
            resourceInputs["bitrate1080p"] = state?.bitrate1080p;
            resourceInputs["bitrate1440p"] = state?.bitrate1440p;
            resourceInputs["bitrate2160p"] = state?.bitrate2160p;
            resourceInputs["bitrate240p"] = state?.bitrate240p;
            resourceInputs["bitrate360p"] = state?.bitrate360p;
            resourceInputs["bitrate480p"] = state?.bitrate480p;
            resourceInputs["bitrate720p"] = state?.bitrate720p;
            resourceInputs["cdnTokenAuthenticationRequired"] = state?.cdnTokenAuthenticationRequired;
            resourceInputs["contentTaggingEnabled"] = state?.contentTaggingEnabled;
            resourceInputs["directPlayEnabled"] = state?.directPlayEnabled;
            resourceInputs["directUrlFileAccessBlocked"] = state?.directUrlFileAccessBlocked;
            resourceInputs["drmMediacageBasicEnabled"] = state?.drmMediacageBasicEnabled;
            resourceInputs["earlyPlayEnabled"] = state?.earlyPlayEnabled;
            resourceInputs["encodingTier"] = state?.encodingTier;
            resourceInputs["jitEncoding"] = state?.jitEncoding;
            resourceInputs["mp4FallbackEnabled"] = state?.mp4FallbackEnabled;
            resourceInputs["multiAudioTrackSupportEnabled"] = state?.multiAudioTrackSupportEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["originalFilesKeep"] = state?.originalFilesKeep;
            resourceInputs["outputCodecs"] = state?.outputCodecs;
            resourceInputs["playerCaptionsBackgroundColor"] = state?.playerCaptionsBackgroundColor;
            resourceInputs["playerCaptionsFontColor"] = state?.playerCaptionsFontColor;
            resourceInputs["playerCaptionsFontSize"] = state?.playerCaptionsFontSize;
            resourceInputs["playerControls"] = state?.playerControls;
            resourceInputs["playerCustomHead"] = state?.playerCustomHead;
            resourceInputs["playerFontFamily"] = state?.playerFontFamily;
            resourceInputs["playerLanguage"] = state?.playerLanguage;
            resourceInputs["playerPrimaryColor"] = state?.playerPrimaryColor;
            resourceInputs["playerWatchtimeHeatmapEnabled"] = state?.playerWatchtimeHeatmapEnabled;
            resourceInputs["pullzone"] = state?.pullzone;
            resourceInputs["referersAlloweds"] = state?.referersAlloweds;
            resourceInputs["referersBlockeds"] = state?.referersBlockeds;
            resourceInputs["resolutions"] = state?.resolutions;
            resourceInputs["storageZone"] = state?.storageZone;
            resourceInputs["streamLibraryId"] = state?.streamLibraryId;
            resourceInputs["transcribingEnabled"] = state?.transcribingEnabled;
            resourceInputs["transcribingLanguages"] = state?.transcribingLanguages;
            resourceInputs["transcribingSmartDescriptionEnabled"] = state?.transcribingSmartDescriptionEnabled;
            resourceInputs["transcribingSmartTitleEnabled"] = state?.transcribingSmartTitleEnabled;
            resourceInputs["vastTagUrl"] = state?.vastTagUrl;
            resourceInputs["viewTokenAuthenticationRequired"] = state?.viewTokenAuthenticationRequired;
            resourceInputs["watermarkHeight"] = state?.watermarkHeight;
            resourceInputs["watermarkPositionLeft"] = state?.watermarkPositionLeft;
            resourceInputs["watermarkPositionTop"] = state?.watermarkPositionTop;
            resourceInputs["watermarkWidth"] = state?.watermarkWidth;
            resourceInputs["webhookUrl"] = state?.webhookUrl;
        } else {
            const args = argsOrState as StreamLibraryArgs | undefined;
            resourceInputs["bitrate1080p"] = args?.bitrate1080p;
            resourceInputs["bitrate1440p"] = args?.bitrate1440p;
            resourceInputs["bitrate2160p"] = args?.bitrate2160p;
            resourceInputs["bitrate240p"] = args?.bitrate240p;
            resourceInputs["bitrate360p"] = args?.bitrate360p;
            resourceInputs["bitrate480p"] = args?.bitrate480p;
            resourceInputs["bitrate720p"] = args?.bitrate720p;
            resourceInputs["cdnTokenAuthenticationRequired"] = args?.cdnTokenAuthenticationRequired;
            resourceInputs["contentTaggingEnabled"] = args?.contentTaggingEnabled;
            resourceInputs["directPlayEnabled"] = args?.directPlayEnabled;
            resourceInputs["directUrlFileAccessBlocked"] = args?.directUrlFileAccessBlocked;
            resourceInputs["drmMediacageBasicEnabled"] = args?.drmMediacageBasicEnabled;
            resourceInputs["earlyPlayEnabled"] = args?.earlyPlayEnabled;
            resourceInputs["encodingTier"] = args?.encodingTier;
            resourceInputs["jitEncoding"] = args?.jitEncoding;
            resourceInputs["mp4FallbackEnabled"] = args?.mp4FallbackEnabled;
            resourceInputs["multiAudioTrackSupportEnabled"] = args?.multiAudioTrackSupportEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["originalFilesKeep"] = args?.originalFilesKeep;
            resourceInputs["outputCodecs"] = args?.outputCodecs;
            resourceInputs["playerCaptionsBackgroundColor"] = args?.playerCaptionsBackgroundColor;
            resourceInputs["playerCaptionsFontColor"] = args?.playerCaptionsFontColor;
            resourceInputs["playerCaptionsFontSize"] = args?.playerCaptionsFontSize;
            resourceInputs["playerControls"] = args?.playerControls;
            resourceInputs["playerCustomHead"] = args?.playerCustomHead;
            resourceInputs["playerFontFamily"] = args?.playerFontFamily;
            resourceInputs["playerLanguage"] = args?.playerLanguage;
            resourceInputs["playerPrimaryColor"] = args?.playerPrimaryColor;
            resourceInputs["playerWatchtimeHeatmapEnabled"] = args?.playerWatchtimeHeatmapEnabled;
            resourceInputs["referersAlloweds"] = args?.referersAlloweds;
            resourceInputs["referersBlockeds"] = args?.referersBlockeds;
            resourceInputs["resolutions"] = args?.resolutions;
            resourceInputs["transcribingEnabled"] = args?.transcribingEnabled;
            resourceInputs["transcribingLanguages"] = args?.transcribingLanguages;
            resourceInputs["transcribingSmartDescriptionEnabled"] = args?.transcribingSmartDescriptionEnabled;
            resourceInputs["transcribingSmartTitleEnabled"] = args?.transcribingSmartTitleEnabled;
            resourceInputs["vastTagUrl"] = args?.vastTagUrl;
            resourceInputs["viewTokenAuthenticationRequired"] = args?.viewTokenAuthenticationRequired;
            resourceInputs["watermarkHeight"] = args?.watermarkHeight;
            resourceInputs["watermarkPositionLeft"] = args?.watermarkPositionLeft;
            resourceInputs["watermarkPositionTop"] = args?.watermarkPositionTop;
            resourceInputs["watermarkWidth"] = args?.watermarkWidth;
            resourceInputs["webhookUrl"] = args?.webhookUrl;
            resourceInputs["apiKey"] = undefined /*out*/;
            resourceInputs["pullzone"] = undefined /*out*/;
            resourceInputs["storageZone"] = undefined /*out*/;
            resourceInputs["streamLibraryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamLibrary.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StreamLibrary resources.
 */
export interface StreamLibraryState {
    /**
     * The API key for accessing the stream library.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The bitrate used for encoding 1080p videos, in kilobits per second.
     */
    bitrate1080p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 1440p videos, in kilobits per second.
     */
    bitrate1440p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 2160p videos, in kilobits per second.
     */
    bitrate2160p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 240p videos, in kilobits per second.
     */
    bitrate240p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 360p videos, in kilobits per second.
     */
    bitrate360p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 480p videos, in kilobits per second.
     */
    bitrate480p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 720p videos, in kilobits per second.
     */
    bitrate720p?: pulumi.Input<number>;
    /**
     * Indicates whether CDN token authentication is required.
     */
    cdnTokenAuthenticationRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether content tagging is enabled.
     */
    contentTaggingEnabled?: pulumi.Input<boolean>;
    /**
     * Determines direct play URLs are enabled.
     */
    directPlayEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the requests without a referrer are blocked.
     */
    directUrlFileAccessBlocked?: pulumi.Input<boolean>;
    /**
     * Indicates whether the MediaCage basic DRM is enabled
     */
    drmMediacageBasicEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the Early-Play feature is enabled.
     */
    earlyPlayEnabled?: pulumi.Input<boolean>;
    /**
     * Options: `Free`, `Premium`
     */
    encodingTier?: pulumi.Input<string>;
    /**
     * Indicates whether Just-In-Time Encoding is enabled
     */
    jitEncoding?: pulumi.Input<boolean>;
    /**
     * Indicates whether the MP4 fallback feature is enabled.
     */
    mp4FallbackEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether multiple output audio track support is enabled.
     */
    multiAudioTrackSupportEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the stream library.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether to keep original files after encoding.
     */
    originalFilesKeep?: pulumi.Input<boolean>;
    /**
     * Options: `av1`, `hevc`, `vp9`, `x264`
     */
    outputCodecs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The background color of the captions in the video player.
     */
    playerCaptionsBackgroundColor?: pulumi.Input<string>;
    /**
     * The font color of the captions in the video player.
     */
    playerCaptionsFontColor?: pulumi.Input<string>;
    /**
     * The font size of the captions in the video player.
     */
    playerCaptionsFontSize?: pulumi.Input<number>;
    /**
     * Options: `airplay`, `captions`, `chromecast`, `current-time`, `duration`, `fast-forward`, `fullscreen`, `mute`, `pip`,
     * `play`, `play-large`, `progress`, `rewind`, `settings`, `volume`
     */
    playerControls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Custom HTML to be included in the head of the video player.
     */
    playerCustomHead?: pulumi.Input<string>;
    /**
     * Options: `arial`, `inter`, `lato`, `oswald`, `raleway`, `roboto`, `rubik`, `ubuntu`
     */
    playerFontFamily?: pulumi.Input<string>;
    /**
     * Specifies the language for the video player interface.
     */
    playerLanguage?: pulumi.Input<string>;
    /**
     * Customizes the appearance of the video player.
     */
    playerPrimaryColor?: pulumi.Input<string>;
    /**
     * Indicates whether the video watch heatmap should be displayed in the player.
     */
    playerWatchtimeHeatmapEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the linked pullzone.
     */
    pullzone?: pulumi.Input<number>;
    /**
     * The list of allowed referrer domains allowed to access videos in this library.
     */
    referersAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of blocked referrer domains blocked from accessing videos in this library.
     */
    referersBlockeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of resolutions available for the videos.
     */
    resolutions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the linked storage zone.
     */
    storageZone?: pulumi.Input<number>;
    streamLibraryId?: pulumi.Input<number>;
    /**
     * Indicates whether the automatic audio transcribing is currently enabled for this zone.
     */
    transcribingEnabled?: pulumi.Input<boolean>;
    /**
     * The list of languages that the captions will be automatically transcribed to.
     */
    transcribingLanguages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether automatic transcribing description generation is currently enabled.
     */
    transcribingSmartDescriptionEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether automatic transcribing title generation is currently enabled.
     */
    transcribingSmartTitleEnabled?: pulumi.Input<boolean>;
    /**
     * The URL of the VAST tag for ad integration.
     */
    vastTagUrl?: pulumi.Input<string>;
    /**
     * Indicates whether the player token authentication is enabled
     */
    viewTokenAuthenticationRequired?: pulumi.Input<boolean>;
    /**
     * The height of the watermark (in %).
     */
    watermarkHeight?: pulumi.Input<number>;
    /**
     * The left offset of the watermark position (in %).
     */
    watermarkPositionLeft?: pulumi.Input<number>;
    /**
     * The top offset of the watermark position (in %).
     */
    watermarkPositionTop?: pulumi.Input<number>;
    /**
     * The width of the watermark (in %).
     */
    watermarkWidth?: pulumi.Input<number>;
    /**
     * The URL for webhook notifications.
     */
    webhookUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StreamLibrary resource.
 */
export interface StreamLibraryArgs {
    /**
     * The bitrate used for encoding 1080p videos, in kilobits per second.
     */
    bitrate1080p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 1440p videos, in kilobits per second.
     */
    bitrate1440p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 2160p videos, in kilobits per second.
     */
    bitrate2160p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 240p videos, in kilobits per second.
     */
    bitrate240p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 360p videos, in kilobits per second.
     */
    bitrate360p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 480p videos, in kilobits per second.
     */
    bitrate480p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 720p videos, in kilobits per second.
     */
    bitrate720p?: pulumi.Input<number>;
    /**
     * Indicates whether CDN token authentication is required.
     */
    cdnTokenAuthenticationRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether content tagging is enabled.
     */
    contentTaggingEnabled?: pulumi.Input<boolean>;
    /**
     * Determines direct play URLs are enabled.
     */
    directPlayEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the requests without a referrer are blocked.
     */
    directUrlFileAccessBlocked?: pulumi.Input<boolean>;
    /**
     * Indicates whether the MediaCage basic DRM is enabled
     */
    drmMediacageBasicEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the Early-Play feature is enabled.
     */
    earlyPlayEnabled?: pulumi.Input<boolean>;
    /**
     * Options: `Free`, `Premium`
     */
    encodingTier?: pulumi.Input<string>;
    /**
     * Indicates whether Just-In-Time Encoding is enabled
     */
    jitEncoding?: pulumi.Input<boolean>;
    /**
     * Indicates whether the MP4 fallback feature is enabled.
     */
    mp4FallbackEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether multiple output audio track support is enabled.
     */
    multiAudioTrackSupportEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the stream library.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether to keep original files after encoding.
     */
    originalFilesKeep?: pulumi.Input<boolean>;
    /**
     * Options: `av1`, `hevc`, `vp9`, `x264`
     */
    outputCodecs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The background color of the captions in the video player.
     */
    playerCaptionsBackgroundColor?: pulumi.Input<string>;
    /**
     * The font color of the captions in the video player.
     */
    playerCaptionsFontColor?: pulumi.Input<string>;
    /**
     * The font size of the captions in the video player.
     */
    playerCaptionsFontSize?: pulumi.Input<number>;
    /**
     * Options: `airplay`, `captions`, `chromecast`, `current-time`, `duration`, `fast-forward`, `fullscreen`, `mute`, `pip`,
     * `play`, `play-large`, `progress`, `rewind`, `settings`, `volume`
     */
    playerControls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Custom HTML to be included in the head of the video player.
     */
    playerCustomHead?: pulumi.Input<string>;
    /**
     * Options: `arial`, `inter`, `lato`, `oswald`, `raleway`, `roboto`, `rubik`, `ubuntu`
     */
    playerFontFamily?: pulumi.Input<string>;
    /**
     * Specifies the language for the video player interface.
     */
    playerLanguage?: pulumi.Input<string>;
    /**
     * Customizes the appearance of the video player.
     */
    playerPrimaryColor?: pulumi.Input<string>;
    /**
     * Indicates whether the video watch heatmap should be displayed in the player.
     */
    playerWatchtimeHeatmapEnabled?: pulumi.Input<boolean>;
    /**
     * The list of allowed referrer domains allowed to access videos in this library.
     */
    referersAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of blocked referrer domains blocked from accessing videos in this library.
     */
    referersBlockeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of resolutions available for the videos.
     */
    resolutions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the automatic audio transcribing is currently enabled for this zone.
     */
    transcribingEnabled?: pulumi.Input<boolean>;
    /**
     * The list of languages that the captions will be automatically transcribed to.
     */
    transcribingLanguages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether automatic transcribing description generation is currently enabled.
     */
    transcribingSmartDescriptionEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether automatic transcribing title generation is currently enabled.
     */
    transcribingSmartTitleEnabled?: pulumi.Input<boolean>;
    /**
     * The URL of the VAST tag for ad integration.
     */
    vastTagUrl?: pulumi.Input<string>;
    /**
     * Indicates whether the player token authentication is enabled
     */
    viewTokenAuthenticationRequired?: pulumi.Input<boolean>;
    /**
     * The height of the watermark (in %).
     */
    watermarkHeight?: pulumi.Input<number>;
    /**
     * The left offset of the watermark position (in %).
     */
    watermarkPositionLeft?: pulumi.Input<number>;
    /**
     * The top offset of the watermark position (in %).
     */
    watermarkPositionTop?: pulumi.Input<number>;
    /**
     * The width of the watermark (in %).
     */
    watermarkWidth?: pulumi.Input<number>;
    /**
     * The URL for webhook notifications.
     */
    webhookUrl?: pulumi.Input<string>;
}

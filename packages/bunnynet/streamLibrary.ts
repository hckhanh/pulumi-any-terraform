// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StreamLibrary extends pulumi.CustomResource {
    /**
     * Get an existing StreamLibrary resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamLibraryState, opts?: pulumi.CustomResourceOptions): StreamLibrary {
        return new StreamLibrary(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/streamLibrary:StreamLibrary';

    /**
     * Returns true if the given object is an instance of StreamLibrary.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamLibrary {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamLibrary.__pulumiType;
    }

    /**
     * The API key for accessing the stream library.
     */
    public /*out*/ readonly apiKey!: pulumi.Output<string>;
    /**
     * The bitrate used for encoding 1080p videos, in kilobits per second.
     */
    public readonly bitrate1080p!: pulumi.Output<number>;
    /**
     * The bitrate used for encoding 1440p videos, in kilobits per second.
     */
    public readonly bitrate1440p!: pulumi.Output<number>;
    /**
     * The bitrate used for encoding 2160p videos, in kilobits per second.
     */
    public readonly bitrate2160p!: pulumi.Output<number>;
    /**
     * The bitrate used for encoding 240p videos, in kilobits per second.
     */
    public readonly bitrate240p!: pulumi.Output<number>;
    /**
     * The bitrate used for encoding 360p videos, in kilobits per second.
     */
    public readonly bitrate360p!: pulumi.Output<number>;
    /**
     * The bitrate used for encoding 480p videos, in kilobits per second.
     */
    public readonly bitrate480p!: pulumi.Output<number>;
    /**
     * The bitrate used for encoding 720p videos, in kilobits per second.
     */
    public readonly bitrate720p!: pulumi.Output<number>;
    /**
     * Indicates whether CDN token authentication is required.
     */
    public readonly cdnTokenAuthenticationRequired!: pulumi.Output<boolean>;
    /**
     * Indicates whether content tagging is enabled.
     */
    public readonly contentTaggingEnabled!: pulumi.Output<boolean>;
    /**
     * Determines direct play URLs are enabled.
     */
    public readonly directPlayEnabled!: pulumi.Output<boolean>;
    /**
     * Indicates whether the requests without a referrer are blocked.
     */
    public readonly directUrlFileAccessBlocked!: pulumi.Output<boolean>;
    /**
     * Indicates whether the MediaCage basic DRM is enabled
     */
    public readonly drmMediacageBasicEnabled!: pulumi.Output<boolean>;
    /**
     * Indicates whether the Early-Play feature is enabled.
     */
    public readonly earlyPlayEnabled!: pulumi.Output<boolean>;
    /**
     * Options: `Free`, `Premium`
     */
    public readonly encodingTier!: pulumi.Output<string>;
    /**
     * Indicates whether Just-In-Time Encoding is enabled
     */
    public readonly jitEncoding!: pulumi.Output<boolean>;
    /**
     * Indicates whether the MP4 fallback feature is enabled.
     */
    public readonly mp4FallbackEnabled!: pulumi.Output<boolean>;
    /**
     * Indicates whether multiple output audio track support is enabled.
     */
    public readonly multiAudioTrackSupportEnabled!: pulumi.Output<boolean>;
    /**
     * The name of the stream library.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicates whether to keep original files after encoding.
     */
    public readonly originalFilesKeep!: pulumi.Output<boolean>;
    /**
     * Options: `av1`, `hevc`, `vp9`, `x264`
     */
    public readonly outputCodecs!: pulumi.Output<string[]>;
    /**
     * The background color of the captions in the video player.
     */
    public readonly playerCaptionsBackgroundColor!: pulumi.Output<string>;
    /**
     * The font color of the captions in the video player.
     */
    public readonly playerCaptionsFontColor!: pulumi.Output<string>;
    /**
     * The font size of the captions in the video player.
     */
    public readonly playerCaptionsFontSize!: pulumi.Output<number>;
    /**
     * Options: `airplay`, `captions`, `chromecast`, `current-time`, `duration`, `fast-forward`, `fullscreen`, `mute`, `pip`,
     * `play`, `play-large`, `progress`, `rewind`, `settings`, `volume`
     */
    public readonly playerControls!: pulumi.Output<string[]>;
    /**
     * Custom HTML to be included in the head of the video player.
     */
    public readonly playerCustomHead!: pulumi.Output<string>;
    /**
     * Options: `arial`, `inter`, `lato`, `oswald`, `raleway`, `roboto`, `rubik`, `ubuntu`
     */
    public readonly playerFontFamily!: pulumi.Output<string>;
    /**
     * Specifies the language for the video player interface.
     */
    public readonly playerLanguage!: pulumi.Output<string>;
    /**
     * Customizes the appearance of the video player.
     */
    public readonly playerPrimaryColor!: pulumi.Output<string>;
    /**
     * Indicates whether the video watch heatmap should be displayed in the player.
     */
    public readonly playerWatchtimeHeatmapEnabled!: pulumi.Output<boolean>;
    /**
     * The ID of the linked pullzone.
     */
    public /*out*/ readonly pullzone!: pulumi.Output<number>;
    /**
     * The list of allowed referrer domains allowed to access videos in this library.
     */
    public readonly referersAlloweds!: pulumi.Output<string[]>;
    /**
     * The list of blocked referrer domains blocked from accessing videos in this library.
     */
    public readonly referersBlockeds!: pulumi.Output<string[]>;
    /**
     * A list of resolutions available for the videos.
     */
    public readonly resolutions!: pulumi.Output<string[]>;
    /**
     * The ID of the linked storage zone.
     */
    public /*out*/ readonly storageZone!: pulumi.Output<number>;
    public /*out*/ readonly streamLibraryId!: pulumi.Output<number>;
    /**
     * Indicates whether the automatic audio transcribing is currently enabled for this zone.
     */
    public readonly transcribingEnabled!: pulumi.Output<boolean>;
    /**
     * The list of languages that the captions will be automatically transcribed to.
     */
    public readonly transcribingLanguages!: pulumi.Output<string[]>;
    /**
     * Indicates whether automatic transcribing description generation is currently enabled.
     */
    public readonly transcribingSmartDescriptionEnabled!: pulumi.Output<boolean>;
    /**
     * Indicates whether automatic transcribing title generation is currently enabled.
     */
    public readonly transcribingSmartTitleEnabled!: pulumi.Output<boolean>;
    /**
     * The URL of the VAST tag for ad integration.
     */
    public readonly vastTagUrl!: pulumi.Output<string>;
    /**
     * Indicates whether the player token authentication is enabled
     */
    public readonly viewTokenAuthenticationRequired!: pulumi.Output<boolean>;
    /**
     * The height of the watermark (in %).
     */
    public readonly watermarkHeight!: pulumi.Output<number>;
    /**
     * The left offset of the watermark position (in %).
     */
    public readonly watermarkPositionLeft!: pulumi.Output<number>;
    /**
     * The top offset of the watermark position (in %).
     */
    public readonly watermarkPositionTop!: pulumi.Output<number>;
    /**
     * The width of the watermark (in %).
     */
    public readonly watermarkWidth!: pulumi.Output<number>;
    /**
     * The URL for webhook notifications.
     */
    public readonly webhookUrl!: pulumi.Output<string>;

    /**
     * Create a StreamLibrary resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StreamLibraryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamLibraryArgs | StreamLibraryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamLibraryState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["bitrate1080p"] = state ? state.bitrate1080p : undefined;
            resourceInputs["bitrate1440p"] = state ? state.bitrate1440p : undefined;
            resourceInputs["bitrate2160p"] = state ? state.bitrate2160p : undefined;
            resourceInputs["bitrate240p"] = state ? state.bitrate240p : undefined;
            resourceInputs["bitrate360p"] = state ? state.bitrate360p : undefined;
            resourceInputs["bitrate480p"] = state ? state.bitrate480p : undefined;
            resourceInputs["bitrate720p"] = state ? state.bitrate720p : undefined;
            resourceInputs["cdnTokenAuthenticationRequired"] = state ? state.cdnTokenAuthenticationRequired : undefined;
            resourceInputs["contentTaggingEnabled"] = state ? state.contentTaggingEnabled : undefined;
            resourceInputs["directPlayEnabled"] = state ? state.directPlayEnabled : undefined;
            resourceInputs["directUrlFileAccessBlocked"] = state ? state.directUrlFileAccessBlocked : undefined;
            resourceInputs["drmMediacageBasicEnabled"] = state ? state.drmMediacageBasicEnabled : undefined;
            resourceInputs["earlyPlayEnabled"] = state ? state.earlyPlayEnabled : undefined;
            resourceInputs["encodingTier"] = state ? state.encodingTier : undefined;
            resourceInputs["jitEncoding"] = state ? state.jitEncoding : undefined;
            resourceInputs["mp4FallbackEnabled"] = state ? state.mp4FallbackEnabled : undefined;
            resourceInputs["multiAudioTrackSupportEnabled"] = state ? state.multiAudioTrackSupportEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["originalFilesKeep"] = state ? state.originalFilesKeep : undefined;
            resourceInputs["outputCodecs"] = state ? state.outputCodecs : undefined;
            resourceInputs["playerCaptionsBackgroundColor"] = state ? state.playerCaptionsBackgroundColor : undefined;
            resourceInputs["playerCaptionsFontColor"] = state ? state.playerCaptionsFontColor : undefined;
            resourceInputs["playerCaptionsFontSize"] = state ? state.playerCaptionsFontSize : undefined;
            resourceInputs["playerControls"] = state ? state.playerControls : undefined;
            resourceInputs["playerCustomHead"] = state ? state.playerCustomHead : undefined;
            resourceInputs["playerFontFamily"] = state ? state.playerFontFamily : undefined;
            resourceInputs["playerLanguage"] = state ? state.playerLanguage : undefined;
            resourceInputs["playerPrimaryColor"] = state ? state.playerPrimaryColor : undefined;
            resourceInputs["playerWatchtimeHeatmapEnabled"] = state ? state.playerWatchtimeHeatmapEnabled : undefined;
            resourceInputs["pullzone"] = state ? state.pullzone : undefined;
            resourceInputs["referersAlloweds"] = state ? state.referersAlloweds : undefined;
            resourceInputs["referersBlockeds"] = state ? state.referersBlockeds : undefined;
            resourceInputs["resolutions"] = state ? state.resolutions : undefined;
            resourceInputs["storageZone"] = state ? state.storageZone : undefined;
            resourceInputs["streamLibraryId"] = state ? state.streamLibraryId : undefined;
            resourceInputs["transcribingEnabled"] = state ? state.transcribingEnabled : undefined;
            resourceInputs["transcribingLanguages"] = state ? state.transcribingLanguages : undefined;
            resourceInputs["transcribingSmartDescriptionEnabled"] = state ? state.transcribingSmartDescriptionEnabled : undefined;
            resourceInputs["transcribingSmartTitleEnabled"] = state ? state.transcribingSmartTitleEnabled : undefined;
            resourceInputs["vastTagUrl"] = state ? state.vastTagUrl : undefined;
            resourceInputs["viewTokenAuthenticationRequired"] = state ? state.viewTokenAuthenticationRequired : undefined;
            resourceInputs["watermarkHeight"] = state ? state.watermarkHeight : undefined;
            resourceInputs["watermarkPositionLeft"] = state ? state.watermarkPositionLeft : undefined;
            resourceInputs["watermarkPositionTop"] = state ? state.watermarkPositionTop : undefined;
            resourceInputs["watermarkWidth"] = state ? state.watermarkWidth : undefined;
            resourceInputs["webhookUrl"] = state ? state.webhookUrl : undefined;
        } else {
            const args = argsOrState as StreamLibraryArgs | undefined;
            resourceInputs["bitrate1080p"] = args ? args.bitrate1080p : undefined;
            resourceInputs["bitrate1440p"] = args ? args.bitrate1440p : undefined;
            resourceInputs["bitrate2160p"] = args ? args.bitrate2160p : undefined;
            resourceInputs["bitrate240p"] = args ? args.bitrate240p : undefined;
            resourceInputs["bitrate360p"] = args ? args.bitrate360p : undefined;
            resourceInputs["bitrate480p"] = args ? args.bitrate480p : undefined;
            resourceInputs["bitrate720p"] = args ? args.bitrate720p : undefined;
            resourceInputs["cdnTokenAuthenticationRequired"] = args ? args.cdnTokenAuthenticationRequired : undefined;
            resourceInputs["contentTaggingEnabled"] = args ? args.contentTaggingEnabled : undefined;
            resourceInputs["directPlayEnabled"] = args ? args.directPlayEnabled : undefined;
            resourceInputs["directUrlFileAccessBlocked"] = args ? args.directUrlFileAccessBlocked : undefined;
            resourceInputs["drmMediacageBasicEnabled"] = args ? args.drmMediacageBasicEnabled : undefined;
            resourceInputs["earlyPlayEnabled"] = args ? args.earlyPlayEnabled : undefined;
            resourceInputs["encodingTier"] = args ? args.encodingTier : undefined;
            resourceInputs["jitEncoding"] = args ? args.jitEncoding : undefined;
            resourceInputs["mp4FallbackEnabled"] = args ? args.mp4FallbackEnabled : undefined;
            resourceInputs["multiAudioTrackSupportEnabled"] = args ? args.multiAudioTrackSupportEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["originalFilesKeep"] = args ? args.originalFilesKeep : undefined;
            resourceInputs["outputCodecs"] = args ? args.outputCodecs : undefined;
            resourceInputs["playerCaptionsBackgroundColor"] = args ? args.playerCaptionsBackgroundColor : undefined;
            resourceInputs["playerCaptionsFontColor"] = args ? args.playerCaptionsFontColor : undefined;
            resourceInputs["playerCaptionsFontSize"] = args ? args.playerCaptionsFontSize : undefined;
            resourceInputs["playerControls"] = args ? args.playerControls : undefined;
            resourceInputs["playerCustomHead"] = args ? args.playerCustomHead : undefined;
            resourceInputs["playerFontFamily"] = args ? args.playerFontFamily : undefined;
            resourceInputs["playerLanguage"] = args ? args.playerLanguage : undefined;
            resourceInputs["playerPrimaryColor"] = args ? args.playerPrimaryColor : undefined;
            resourceInputs["playerWatchtimeHeatmapEnabled"] = args ? args.playerWatchtimeHeatmapEnabled : undefined;
            resourceInputs["referersAlloweds"] = args ? args.referersAlloweds : undefined;
            resourceInputs["referersBlockeds"] = args ? args.referersBlockeds : undefined;
            resourceInputs["resolutions"] = args ? args.resolutions : undefined;
            resourceInputs["transcribingEnabled"] = args ? args.transcribingEnabled : undefined;
            resourceInputs["transcribingLanguages"] = args ? args.transcribingLanguages : undefined;
            resourceInputs["transcribingSmartDescriptionEnabled"] = args ? args.transcribingSmartDescriptionEnabled : undefined;
            resourceInputs["transcribingSmartTitleEnabled"] = args ? args.transcribingSmartTitleEnabled : undefined;
            resourceInputs["vastTagUrl"] = args ? args.vastTagUrl : undefined;
            resourceInputs["viewTokenAuthenticationRequired"] = args ? args.viewTokenAuthenticationRequired : undefined;
            resourceInputs["watermarkHeight"] = args ? args.watermarkHeight : undefined;
            resourceInputs["watermarkPositionLeft"] = args ? args.watermarkPositionLeft : undefined;
            resourceInputs["watermarkPositionTop"] = args ? args.watermarkPositionTop : undefined;
            resourceInputs["watermarkWidth"] = args ? args.watermarkWidth : undefined;
            resourceInputs["webhookUrl"] = args ? args.webhookUrl : undefined;
            resourceInputs["apiKey"] = undefined /*out*/;
            resourceInputs["pullzone"] = undefined /*out*/;
            resourceInputs["storageZone"] = undefined /*out*/;
            resourceInputs["streamLibraryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamLibrary.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StreamLibrary resources.
 */
export interface StreamLibraryState {
    /**
     * The API key for accessing the stream library.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The bitrate used for encoding 1080p videos, in kilobits per second.
     */
    bitrate1080p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 1440p videos, in kilobits per second.
     */
    bitrate1440p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 2160p videos, in kilobits per second.
     */
    bitrate2160p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 240p videos, in kilobits per second.
     */
    bitrate240p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 360p videos, in kilobits per second.
     */
    bitrate360p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 480p videos, in kilobits per second.
     */
    bitrate480p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 720p videos, in kilobits per second.
     */
    bitrate720p?: pulumi.Input<number>;
    /**
     * Indicates whether CDN token authentication is required.
     */
    cdnTokenAuthenticationRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether content tagging is enabled.
     */
    contentTaggingEnabled?: pulumi.Input<boolean>;
    /**
     * Determines direct play URLs are enabled.
     */
    directPlayEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the requests without a referrer are blocked.
     */
    directUrlFileAccessBlocked?: pulumi.Input<boolean>;
    /**
     * Indicates whether the MediaCage basic DRM is enabled
     */
    drmMediacageBasicEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the Early-Play feature is enabled.
     */
    earlyPlayEnabled?: pulumi.Input<boolean>;
    /**
     * Options: `Free`, `Premium`
     */
    encodingTier?: pulumi.Input<string>;
    /**
     * Indicates whether Just-In-Time Encoding is enabled
     */
    jitEncoding?: pulumi.Input<boolean>;
    /**
     * Indicates whether the MP4 fallback feature is enabled.
     */
    mp4FallbackEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether multiple output audio track support is enabled.
     */
    multiAudioTrackSupportEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the stream library.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether to keep original files after encoding.
     */
    originalFilesKeep?: pulumi.Input<boolean>;
    /**
     * Options: `av1`, `hevc`, `vp9`, `x264`
     */
    outputCodecs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The background color of the captions in the video player.
     */
    playerCaptionsBackgroundColor?: pulumi.Input<string>;
    /**
     * The font color of the captions in the video player.
     */
    playerCaptionsFontColor?: pulumi.Input<string>;
    /**
     * The font size of the captions in the video player.
     */
    playerCaptionsFontSize?: pulumi.Input<number>;
    /**
     * Options: `airplay`, `captions`, `chromecast`, `current-time`, `duration`, `fast-forward`, `fullscreen`, `mute`, `pip`,
     * `play`, `play-large`, `progress`, `rewind`, `settings`, `volume`
     */
    playerControls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Custom HTML to be included in the head of the video player.
     */
    playerCustomHead?: pulumi.Input<string>;
    /**
     * Options: `arial`, `inter`, `lato`, `oswald`, `raleway`, `roboto`, `rubik`, `ubuntu`
     */
    playerFontFamily?: pulumi.Input<string>;
    /**
     * Specifies the language for the video player interface.
     */
    playerLanguage?: pulumi.Input<string>;
    /**
     * Customizes the appearance of the video player.
     */
    playerPrimaryColor?: pulumi.Input<string>;
    /**
     * Indicates whether the video watch heatmap should be displayed in the player.
     */
    playerWatchtimeHeatmapEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the linked pullzone.
     */
    pullzone?: pulumi.Input<number>;
    /**
     * The list of allowed referrer domains allowed to access videos in this library.
     */
    referersAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of blocked referrer domains blocked from accessing videos in this library.
     */
    referersBlockeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of resolutions available for the videos.
     */
    resolutions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the linked storage zone.
     */
    storageZone?: pulumi.Input<number>;
    streamLibraryId?: pulumi.Input<number>;
    /**
     * Indicates whether the automatic audio transcribing is currently enabled for this zone.
     */
    transcribingEnabled?: pulumi.Input<boolean>;
    /**
     * The list of languages that the captions will be automatically transcribed to.
     */
    transcribingLanguages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether automatic transcribing description generation is currently enabled.
     */
    transcribingSmartDescriptionEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether automatic transcribing title generation is currently enabled.
     */
    transcribingSmartTitleEnabled?: pulumi.Input<boolean>;
    /**
     * The URL of the VAST tag for ad integration.
     */
    vastTagUrl?: pulumi.Input<string>;
    /**
     * Indicates whether the player token authentication is enabled
     */
    viewTokenAuthenticationRequired?: pulumi.Input<boolean>;
    /**
     * The height of the watermark (in %).
     */
    watermarkHeight?: pulumi.Input<number>;
    /**
     * The left offset of the watermark position (in %).
     */
    watermarkPositionLeft?: pulumi.Input<number>;
    /**
     * The top offset of the watermark position (in %).
     */
    watermarkPositionTop?: pulumi.Input<number>;
    /**
     * The width of the watermark (in %).
     */
    watermarkWidth?: pulumi.Input<number>;
    /**
     * The URL for webhook notifications.
     */
    webhookUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StreamLibrary resource.
 */
export interface StreamLibraryArgs {
    /**
     * The bitrate used for encoding 1080p videos, in kilobits per second.
     */
    bitrate1080p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 1440p videos, in kilobits per second.
     */
    bitrate1440p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 2160p videos, in kilobits per second.
     */
    bitrate2160p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 240p videos, in kilobits per second.
     */
    bitrate240p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 360p videos, in kilobits per second.
     */
    bitrate360p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 480p videos, in kilobits per second.
     */
    bitrate480p?: pulumi.Input<number>;
    /**
     * The bitrate used for encoding 720p videos, in kilobits per second.
     */
    bitrate720p?: pulumi.Input<number>;
    /**
     * Indicates whether CDN token authentication is required.
     */
    cdnTokenAuthenticationRequired?: pulumi.Input<boolean>;
    /**
     * Indicates whether content tagging is enabled.
     */
    contentTaggingEnabled?: pulumi.Input<boolean>;
    /**
     * Determines direct play URLs are enabled.
     */
    directPlayEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the requests without a referrer are blocked.
     */
    directUrlFileAccessBlocked?: pulumi.Input<boolean>;
    /**
     * Indicates whether the MediaCage basic DRM is enabled
     */
    drmMediacageBasicEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the Early-Play feature is enabled.
     */
    earlyPlayEnabled?: pulumi.Input<boolean>;
    /**
     * Options: `Free`, `Premium`
     */
    encodingTier?: pulumi.Input<string>;
    /**
     * Indicates whether Just-In-Time Encoding is enabled
     */
    jitEncoding?: pulumi.Input<boolean>;
    /**
     * Indicates whether the MP4 fallback feature is enabled.
     */
    mp4FallbackEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether multiple output audio track support is enabled.
     */
    multiAudioTrackSupportEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the stream library.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether to keep original files after encoding.
     */
    originalFilesKeep?: pulumi.Input<boolean>;
    /**
     * Options: `av1`, `hevc`, `vp9`, `x264`
     */
    outputCodecs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The background color of the captions in the video player.
     */
    playerCaptionsBackgroundColor?: pulumi.Input<string>;
    /**
     * The font color of the captions in the video player.
     */
    playerCaptionsFontColor?: pulumi.Input<string>;
    /**
     * The font size of the captions in the video player.
     */
    playerCaptionsFontSize?: pulumi.Input<number>;
    /**
     * Options: `airplay`, `captions`, `chromecast`, `current-time`, `duration`, `fast-forward`, `fullscreen`, `mute`, `pip`,
     * `play`, `play-large`, `progress`, `rewind`, `settings`, `volume`
     */
    playerControls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Custom HTML to be included in the head of the video player.
     */
    playerCustomHead?: pulumi.Input<string>;
    /**
     * Options: `arial`, `inter`, `lato`, `oswald`, `raleway`, `roboto`, `rubik`, `ubuntu`
     */
    playerFontFamily?: pulumi.Input<string>;
    /**
     * Specifies the language for the video player interface.
     */
    playerLanguage?: pulumi.Input<string>;
    /**
     * Customizes the appearance of the video player.
     */
    playerPrimaryColor?: pulumi.Input<string>;
    /**
     * Indicates whether the video watch heatmap should be displayed in the player.
     */
    playerWatchtimeHeatmapEnabled?: pulumi.Input<boolean>;
    /**
     * The list of allowed referrer domains allowed to access videos in this library.
     */
    referersAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of blocked referrer domains blocked from accessing videos in this library.
     */
    referersBlockeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of resolutions available for the videos.
     */
    resolutions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether the automatic audio transcribing is currently enabled for this zone.
     */
    transcribingEnabled?: pulumi.Input<boolean>;
    /**
     * The list of languages that the captions will be automatically transcribed to.
     */
    transcribingLanguages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether automatic transcribing description generation is currently enabled.
     */
    transcribingSmartDescriptionEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether automatic transcribing title generation is currently enabled.
     */
    transcribingSmartTitleEnabled?: pulumi.Input<boolean>;
    /**
     * The URL of the VAST tag for ad integration.
     */
    vastTagUrl?: pulumi.Input<string>;
    /**
     * Indicates whether the player token authentication is enabled
     */
    viewTokenAuthenticationRequired?: pulumi.Input<boolean>;
    /**
     * The height of the watermark (in %).
     */
    watermarkHeight?: pulumi.Input<number>;
    /**
     * The left offset of the watermark position (in %).
     */
    watermarkPositionLeft?: pulumi.Input<number>;
    /**
     * The top offset of the watermark position (in %).
     */
    watermarkPositionTop?: pulumi.Input<number>;
    /**
     * The width of the watermark (in %).
     */
    watermarkWidth?: pulumi.Input<number>;
    /**
     * The URL for webhook notifications.
     */
    webhookUrl?: pulumi.Input<string>;
}

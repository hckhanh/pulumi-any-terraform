// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DnsZone extends pulumi.CustomResource {
    /**
     * Get an existing DnsZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsZoneState, opts?: pulumi.CustomResourceOptions): DnsZone {
        return new DnsZone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/dnsZone:DnsZone';

    /**
     * Returns true if the given object is an instance of DnsZone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsZone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsZone.__pulumiType;
    }

    /**
     * The unique identifier for the DNS zone.
     */
    public /*out*/ readonly dnsZoneId!: pulumi.Output<number>;
    /**
     * The domain name for the DNS zone.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Indicates whether DNS logs are anonymized.
     */
    public readonly logAnonymized!: pulumi.Output<boolean>;
    /**
     * Options: `Drop`, `OneDigit`
     */
    public readonly logAnonymizedStyle!: pulumi.Output<string>;
    /**
     * Indicates whether permanent logging for DNS queries is enabled.
     */
    public readonly logEnabled!: pulumi.Output<boolean>;
    /**
     * The primary nameserver for the DNS zone.
     */
    public readonly nameserver1!: pulumi.Output<string>;
    /**
     * The secondary nameserver for the DNS zone.
     */
    public readonly nameserver2!: pulumi.Output<string>;
    /**
     * Indicates whether custom nameservers are used.
     */
    public readonly nameserverCustom!: pulumi.Output<boolean>;
    /**
     * The email address used in the Start of Authority (SOA) record for the DNS zone.
     */
    public readonly soaEmail!: pulumi.Output<string>;

    /**
     * Create a DnsZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsZoneArgs | DnsZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsZoneState | undefined;
            resourceInputs["dnsZoneId"] = state ? state.dnsZoneId : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["logAnonymized"] = state ? state.logAnonymized : undefined;
            resourceInputs["logAnonymizedStyle"] = state ? state.logAnonymizedStyle : undefined;
            resourceInputs["logEnabled"] = state ? state.logEnabled : undefined;
            resourceInputs["nameserver1"] = state ? state.nameserver1 : undefined;
            resourceInputs["nameserver2"] = state ? state.nameserver2 : undefined;
            resourceInputs["nameserverCustom"] = state ? state.nameserverCustom : undefined;
            resourceInputs["soaEmail"] = state ? state.soaEmail : undefined;
        } else {
            const args = argsOrState as DnsZoneArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["logAnonymized"] = args ? args.logAnonymized : undefined;
            resourceInputs["logAnonymizedStyle"] = args ? args.logAnonymizedStyle : undefined;
            resourceInputs["logEnabled"] = args ? args.logEnabled : undefined;
            resourceInputs["nameserver1"] = args ? args.nameserver1 : undefined;
            resourceInputs["nameserver2"] = args ? args.nameserver2 : undefined;
            resourceInputs["nameserverCustom"] = args ? args.nameserverCustom : undefined;
            resourceInputs["soaEmail"] = args ? args.soaEmail : undefined;
            resourceInputs["dnsZoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsZone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsZone resources.
 */
export interface DnsZoneState {
    /**
     * The unique identifier for the DNS zone.
     */
    dnsZoneId?: pulumi.Input<number>;
    /**
     * The domain name for the DNS zone.
     */
    domain?: pulumi.Input<string>;
    /**
     * Indicates whether DNS logs are anonymized.
     */
    logAnonymized?: pulumi.Input<boolean>;
    /**
     * Options: `Drop`, `OneDigit`
     */
    logAnonymizedStyle?: pulumi.Input<string>;
    /**
     * Indicates whether permanent logging for DNS queries is enabled.
     */
    logEnabled?: pulumi.Input<boolean>;
    /**
     * The primary nameserver for the DNS zone.
     */
    nameserver1?: pulumi.Input<string>;
    /**
     * The secondary nameserver for the DNS zone.
     */
    nameserver2?: pulumi.Input<string>;
    /**
     * Indicates whether custom nameservers are used.
     */
    nameserverCustom?: pulumi.Input<boolean>;
    /**
     * The email address used in the Start of Authority (SOA) record for the DNS zone.
     */
    soaEmail?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsZone resource.
 */
export interface DnsZoneArgs {
    /**
     * The domain name for the DNS zone.
     */
    domain: pulumi.Input<string>;
    /**
     * Indicates whether DNS logs are anonymized.
     */
    logAnonymized?: pulumi.Input<boolean>;
    /**
     * Options: `Drop`, `OneDigit`
     */
    logAnonymizedStyle?: pulumi.Input<string>;
    /**
     * Indicates whether permanent logging for DNS queries is enabled.
     */
    logEnabled?: pulumi.Input<boolean>;
    /**
     * The primary nameserver for the DNS zone.
     */
    nameserver1?: pulumi.Input<string>;
    /**
     * The secondary nameserver for the DNS zone.
     */
    nameserver2?: pulumi.Input<string>;
    /**
     * Indicates whether custom nameservers are used.
     */
    nameserverCustom?: pulumi.Input<boolean>;
    /**
     * The email address used in the Start of Authority (SOA) record for the DNS zone.
     */
    soaEmail?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeContainerApp extends pulumi.CustomResource {
    /**
     * Get an existing ComputeContainerApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeContainerAppState, opts?: pulumi.CustomResourceOptions): ComputeContainerApp {
        return new ComputeContainerApp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/computeContainerApp:ComputeContainerApp';

    /**
     * Returns true if the given object is an instance of ComputeContainerApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeContainerApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeContainerApp.__pulumiType;
    }

    /**
     * The maximum number of instances that will be provisioned per active region.
     */
    public readonly autoscalingMax!: pulumi.Output<number>;
    /**
     * The minimum number of instances that will be provisioned per active region.
     */
    public readonly autoscalingMin!: pulumi.Output<number>;
    /**
     * Defines a container for the application.
     */
    public readonly containers!: pulumi.Output<outputs.ComputeContainerAppContainer[] | undefined>;
    /**
     * The name of the application.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The regions that will be dynamically provisionable based on the user latency.
     */
    public readonly regionsAlloweds!: pulumi.Output<string[]>;
    /**
     * The maximum amount of regions to be deployed at any given time.
     */
    public readonly regionsMaxAllowed!: pulumi.Output<number | undefined>;
    /**
     * The regions that will be statically provisioned and will always be running and available to users.
     */
    public readonly regionsRequireds!: pulumi.Output<string[]>;

    /**
     * Create a ComputeContainerApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeContainerAppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeContainerAppArgs | ComputeContainerAppState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeContainerAppState | undefined;
            resourceInputs["autoscalingMax"] = state ? state.autoscalingMax : undefined;
            resourceInputs["autoscalingMin"] = state ? state.autoscalingMin : undefined;
            resourceInputs["containers"] = state ? state.containers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["regionsAlloweds"] = state ? state.regionsAlloweds : undefined;
            resourceInputs["regionsMaxAllowed"] = state ? state.regionsMaxAllowed : undefined;
            resourceInputs["regionsRequireds"] = state ? state.regionsRequireds : undefined;
        } else {
            const args = argsOrState as ComputeContainerAppArgs | undefined;
            if ((!args || args.regionsAlloweds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionsAlloweds'");
            }
            if ((!args || args.regionsRequireds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionsRequireds'");
            }
            resourceInputs["autoscalingMax"] = args ? args.autoscalingMax : undefined;
            resourceInputs["autoscalingMin"] = args ? args.autoscalingMin : undefined;
            resourceInputs["containers"] = args ? args.containers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regionsAlloweds"] = args ? args.regionsAlloweds : undefined;
            resourceInputs["regionsMaxAllowed"] = args ? args.regionsMaxAllowed : undefined;
            resourceInputs["regionsRequireds"] = args ? args.regionsRequireds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeContainerApp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeContainerApp resources.
 */
export interface ComputeContainerAppState {
    /**
     * The maximum number of instances that will be provisioned per active region.
     */
    autoscalingMax?: pulumi.Input<number>;
    /**
     * The minimum number of instances that will be provisioned per active region.
     */
    autoscalingMin?: pulumi.Input<number>;
    /**
     * Defines a container for the application.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.ComputeContainerAppContainer>[]>;
    /**
     * The name of the application.
     */
    name?: pulumi.Input<string>;
    /**
     * The regions that will be dynamically provisionable based on the user latency.
     */
    regionsAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum amount of regions to be deployed at any given time.
     */
    regionsMaxAllowed?: pulumi.Input<number>;
    /**
     * The regions that will be statically provisioned and will always be running and available to users.
     */
    regionsRequireds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ComputeContainerApp resource.
 */
export interface ComputeContainerAppArgs {
    /**
     * The maximum number of instances that will be provisioned per active region.
     */
    autoscalingMax?: pulumi.Input<number>;
    /**
     * The minimum number of instances that will be provisioned per active region.
     */
    autoscalingMin?: pulumi.Input<number>;
    /**
     * Defines a container for the application.
     */
    containers?: pulumi.Input<pulumi.Input<inputs.ComputeContainerAppContainer>[]>;
    /**
     * The name of the application.
     */
    name?: pulumi.Input<string>;
    /**
     * The regions that will be dynamically provisionable based on the user latency.
     */
    regionsAlloweds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The maximum amount of regions to be deployed at any given time.
     */
    regionsMaxAllowed?: pulumi.Input<number>;
    /**
     * The regions that will be statically provisioned and will always be running and available to users.
     */
    regionsRequireds: pulumi.Input<pulumi.Input<string>[]>;
}

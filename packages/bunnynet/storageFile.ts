// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StorageFile extends pulumi.CustomResource {
    /**
     * Get an existing StorageFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageFileState, opts?: pulumi.CustomResourceOptions): StorageFile {
        return new StorageFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/storageFile:StorageFile';

    /**
     * Returns true if the given object is an instance of StorageFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageFile.__pulumiType;
    }

    /**
     * The SHA-256 hash of the stored file.
     */
    public /*out*/ readonly checksum!: pulumi.Output<string>;
    /**
     * The to be stored in the file. Use <code>source</code> to upload files from the local disk.
     */
    public readonly content!: pulumi.Output<string | undefined>;
    /**
     * Specifies the content type of the file.
     */
    public readonly contentType!: pulumi.Output<string>;
    /**
     * The date and time when the file was created.
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    /**
     * The date and time when the file was last modified.
     */
    public /*out*/ readonly dateModified!: pulumi.Output<string>;
    /**
     * The path of the file within the storage zone.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * The size of the file in bytes.
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * The path in the local disk for the file to be uploaded to the storage zone. Use <code>content</code> to define the
     * content directly.
     */
    public readonly source!: pulumi.Output<string | undefined>;
    /**
     * The ID of the storage zone where the file is stored.
     */
    public readonly zone!: pulumi.Output<number>;

    /**
     * Create a StorageFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageFileArgs | StorageFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageFileState | undefined;
            resourceInputs["checksum"] = state ? state.checksum : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["dateModified"] = state ? state.dateModified : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as StorageFileArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["checksum"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageFile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageFile resources.
 */
export interface StorageFileState {
    /**
     * The SHA-256 hash of the stored file.
     */
    checksum?: pulumi.Input<string>;
    /**
     * The to be stored in the file. Use <code>source</code> to upload files from the local disk.
     */
    content?: pulumi.Input<string>;
    /**
     * Specifies the content type of the file.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The date and time when the file was created.
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * The date and time when the file was last modified.
     */
    dateModified?: pulumi.Input<string>;
    /**
     * The path of the file within the storage zone.
     */
    path?: pulumi.Input<string>;
    /**
     * The size of the file in bytes.
     */
    size?: pulumi.Input<number>;
    /**
     * The path in the local disk for the file to be uploaded to the storage zone. Use <code>content</code> to define the
     * content directly.
     */
    source?: pulumi.Input<string>;
    /**
     * The ID of the storage zone where the file is stored.
     */
    zone?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a StorageFile resource.
 */
export interface StorageFileArgs {
    /**
     * The to be stored in the file. Use <code>source</code> to upload files from the local disk.
     */
    content?: pulumi.Input<string>;
    /**
     * Specifies the content type of the file.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The path of the file within the storage zone.
     */
    path: pulumi.Input<string>;
    /**
     * The path in the local disk for the file to be uploaded to the storage zone. Use <code>content</code> to define the
     * content directly.
     */
    source?: pulumi.Input<string>;
    /**
     * The ID of the storage zone where the file is stored.
     */
    zone: pulumi.Input<number>;
}

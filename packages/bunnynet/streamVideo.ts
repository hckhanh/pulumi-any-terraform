// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StreamVideo extends pulumi.CustomResource {
    /**
     * Get an existing StreamVideo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamVideoState, opts?: pulumi.CustomResourceOptions): StreamVideo {
        return new StreamVideo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/streamVideo:StreamVideo';

    /**
     * Returns true if the given object is an instance of StreamVideo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamVideo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamVideo.__pulumiType;
    }

    /**
     * The list of chapters available in the video.
     */
    declare public readonly chapters: pulumi.Output<outputs.StreamVideoChapter[] | undefined>;
    /**
     * The ID of the collection to which the video belongs.
     */
    declare public readonly collection: pulumi.Output<string>;
    /**
     * The description of the video.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The ID of the stream library to which the video belongs.
     */
    declare public readonly library: pulumi.Output<number>;
    /**
     * The list of moments available in the video.
     */
    declare public readonly moments: pulumi.Output<outputs.StreamVideoMoment[] | undefined>;
    /**
     * The title of the video.
     */
    declare public readonly title: pulumi.Output<string>;

    /**
     * Create a StreamVideo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamVideoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamVideoArgs | StreamVideoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamVideoState | undefined;
            resourceInputs["chapters"] = state?.chapters;
            resourceInputs["collection"] = state?.collection;
            resourceInputs["description"] = state?.description;
            resourceInputs["library"] = state?.library;
            resourceInputs["moments"] = state?.moments;
            resourceInputs["title"] = state?.title;
        } else {
            const args = argsOrState as StreamVideoArgs | undefined;
            if (args?.library === undefined && !opts.urn) {
                throw new Error("Missing required property 'library'");
            }
            if (args?.title === undefined && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["chapters"] = args?.chapters;
            resourceInputs["collection"] = args?.collection;
            resourceInputs["description"] = args?.description;
            resourceInputs["library"] = args?.library;
            resourceInputs["moments"] = args?.moments;
            resourceInputs["title"] = args?.title;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamVideo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StreamVideo resources.
 */
export interface StreamVideoState {
    /**
     * The list of chapters available in the video.
     */
    chapters?: pulumi.Input<pulumi.Input<inputs.StreamVideoChapter>[]>;
    /**
     * The ID of the collection to which the video belongs.
     */
    collection?: pulumi.Input<string>;
    /**
     * The description of the video.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the stream library to which the video belongs.
     */
    library?: pulumi.Input<number>;
    /**
     * The list of moments available in the video.
     */
    moments?: pulumi.Input<pulumi.Input<inputs.StreamVideoMoment>[]>;
    /**
     * The title of the video.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StreamVideo resource.
 */
export interface StreamVideoArgs {
    /**
     * The list of chapters available in the video.
     */
    chapters?: pulumi.Input<pulumi.Input<inputs.StreamVideoChapter>[]>;
    /**
     * The ID of the collection to which the video belongs.
     */
    collection?: pulumi.Input<string>;
    /**
     * The description of the video.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the stream library to which the video belongs.
     */
    library: pulumi.Input<number>;
    /**
     * The list of moments available in the video.
     */
    moments?: pulumi.Input<pulumi.Input<inputs.StreamVideoMoment>[]>;
    /**
     * The title of the video.
     */
    title: pulumi.Input<string>;
}

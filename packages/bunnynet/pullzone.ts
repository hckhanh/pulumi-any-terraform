// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Pullzone extends pulumi.CustomResource {
    /**
     * Get an existing Pullzone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PullzoneState, opts?: pulumi.CustomResourceOptions): Pullzone {
        return new Pullzone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/pullzone:Pullzone';

    /**
     * Returns true if the given object is an instance of Pullzone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pullzone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pullzone.__pulumiType;
    }

    /**
     * Indicates whether the Canonical header is added to the responses.
     */
    declare public readonly addCanonicalHeader: pulumi.Output<boolean>;
    /**
     * The list of referrer hostnames that are allowed to access the pull zone. Requests containing the header "Referer: hostname" that is not on the list will be rejected. If empty, all the referrers are allowed.
     */
    declare public readonly allowReferers: pulumi.Output<string[]>;
    /**
     * The list of IPs that are blocked from accessing the pull zone. Requests coming from the following IPs will be rejected. If empty, all the IPs will be allowed
     */
    declare public readonly blockIps: pulumi.Output<string[]>;
    /**
     * Indicates whether requests without a referer should be blocked.
     */
    declare public readonly blockNoReferer: pulumi.Output<boolean>;
    /**
     * Indicates whether to block POST requests.
     */
    declare public readonly blockPostRequests: pulumi.Output<boolean>;
    /**
     * The list of referrer hostnames that are blocked to access the pull zone. Requests containing the header "Referer: hostname" that is not on the list will be rejected. If empty, all the referrers are allowed.
     */
    declare public readonly blockReferers: pulumi.Output<string[]>;
    /**
     * This property indicates whether to block the root path.
     */
    declare public readonly blockRootPath: pulumi.Output<boolean>;
    /**
     * Indicates whether the cache slice (Optimize for video) feature is enabled for the Pull Zone
     */
    declare public readonly cacheChunked: pulumi.Output<boolean>;
    /**
     * Indicates whether smart caching is enabled.
     */
    declare public readonly cacheEnabled: pulumi.Output<boolean>;
    /**
     * Indicates whether bunny.net should be caching error responses.
     */
    declare public readonly cacheErrors: pulumi.Output<boolean>;
    /**
     * The override cache time, in seconds.
     */
    declare public readonly cacheExpirationTime: pulumi.Output<number>;
    /**
     * The override cache time for the end client, in seconds.
     */
    declare public readonly cacheExpirationTimeBrowser: pulumi.Output<number>;
    /**
     * Options: `offline`, `updating`
     */
    declare public readonly cacheStales: pulumi.Output<string[]>;
    /**
     * Options: `avif`, `cookie`, `country`, `hostname`, `mobile`, `querystring`, `state`, `webp`
     */
    declare public readonly cacheVaries: pulumi.Output<string[]>;
    /**
     * Contains the list of vary parameters that will be used for vary cache by cookie string. If empty, cookie vary will not be used.
     */
    declare public readonly cacheVaryCookies: pulumi.Output<string[]>;
    /**
     * Contains the list of vary parameters that will be used for vary cache by query string. If empty, all parameters will be used to construct the key
     */
    declare public readonly cacheVaryQuerystrings: pulumi.Output<string[]>;
    /**
     * The CNAME domain of the pull zone for setting up custom hostnames
     */
    declare public /*out*/ readonly cdnDomain: pulumi.Output<string>;
    /**
     * Indicates whether CORS (Cross-Origin Resource Sharing) is enabled.
     */
    declare public readonly corsEnabled: pulumi.Output<boolean>;
    /**
     * A list of file extensions for which CORS is enabled.
     */
    declare public readonly corsExtensions: pulumi.Output<string[]>;
    /**
     * If true, the built-in let's encrypt is disabled and requests are passed to the origin.
     */
    declare public readonly disableLetsencrypt: pulumi.Output<boolean>;
    /**
     * Contains the custom error page code that will be returned.
     */
    declare public readonly errorpageCustomContent: pulumi.Output<string>;
    /**
     * Indicates whether custom error page code should be enabled.
     */
    declare public readonly errorpageCustomEnabled: pulumi.Output<boolean>;
    /**
     * The statuspage code that will be used to build the status widget.
     */
    declare public readonly errorpageStatuspageCode: pulumi.Output<string>;
    /**
     * Indicates whether the statuspage widget should be displayed on the error pages.
     */
    declare public readonly errorpageStatuspageEnabled: pulumi.Output<boolean>;
    /**
     * Indicates whether the error pages should be white-labelled or not
     */
    declare public readonly errorpageWhitelabel: pulumi.Output<boolean>;
    /**
     * The amount of data after the rate limit will be activated.
     */
    declare public readonly limitAfter: pulumi.Output<number>;
    /**
     * The maximum bandwidth limit in bytes.
     */
    declare public readonly limitBandwidth: pulumi.Output<number>;
    /**
     * Excessive requests are delayed until their number exceeds the maximum burst size.
     */
    declare public readonly limitBurst: pulumi.Output<number>;
    /**
     * The number of connections limited per IP.
     */
    declare public readonly limitConnections: pulumi.Output<number>;
    /**
     * The maximum download speed, in kb/s. Use 0 for unlimited.
     */
    declare public readonly limitDownloadSpeed: pulumi.Output<number>;
    /**
     * The maximum amount of requests per IP per second.
     */
    declare public readonly limitRequests: pulumi.Output<number>;
    /**
     * Indicates whether logs are anonymized.
     */
    declare public readonly logAnonymized: pulumi.Output<boolean>;
    /**
     * Options: `Drop`, `OneDigit`
     */
    declare public readonly logAnonymizedStyle: pulumi.Output<string>;
    /**
     * Indicates whether logging is enabled.
     */
    declare public readonly logEnabled: pulumi.Output<boolean>;
    /**
     * Indicates whether log forwarding is enabled.
     */
    declare public readonly logForwardEnabled: pulumi.Output<boolean>;
    /**
     * Options: `JSON`, `Plain`
     */
    declare public readonly logForwardFormat: pulumi.Output<string>;
    /**
     * The port number for log forwarding.
     */
    declare public readonly logForwardPort: pulumi.Output<number>;
    /**
     * Options: `DataDog`, `TCP`, `TCPEncrypted`, `UDP`
     */
    declare public readonly logForwardProtocol: pulumi.Output<string>;
    /**
     * The server address for log forwarding.
     */
    declare public readonly logForwardServer: pulumi.Output<string>;
    /**
     * The token used for log forwarding authentication.
     */
    declare public readonly logForwardToken: pulumi.Output<string>;
    /**
     * Indicates whether log storage is enabled.
     */
    declare public readonly logStorageEnabled: pulumi.Output<boolean>;
    /**
     * The storage zone ID for log storage.
     */
    declare public readonly logStorageZone: pulumi.Output<number>;
    /**
     * The name of the pull zone.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Indicates whether the optimizer class list should be enforced.
     */
    declare public readonly optimizerClassesForce: pulumi.Output<boolean>;
    /**
     * Indicates whether the image manipulation should be enabled.
     */
    declare public readonly optimizerDynamicImageApi: pulumi.Output<boolean>;
    /**
     * Indicates whether Bunny Optimizer should be enabled.
     */
    declare public readonly optimizerEnabled: pulumi.Output<boolean>;
    /**
     * Indicates whether the CSS minifcation should be enabled.
     */
    declare public readonly optimizerMinifyCss: pulumi.Output<boolean>;
    /**
     * Indicates whether the JavaScript minifcation should be enabled.
     */
    declare public readonly optimizerMinifyJs: pulumi.Output<boolean>;
    /**
     * Indicates whether the automatic image optimization should be enabled.
     */
    declare public readonly optimizerSmartimage: pulumi.Output<boolean>;
    /**
     * The maximum automatic image size for desktop clients.
     */
    declare public readonly optimizerSmartimageDesktopMaxwidth: pulumi.Output<number>;
    /**
     * The image quality for desktop clients.
     */
    declare public readonly optimizerSmartimageDesktopQuality: pulumi.Output<number>;
    /**
     * The maximum automatic image size for mobile clients.
     */
    declare public readonly optimizerSmartimageMobileMaxwidth: pulumi.Output<number>;
    /**
     * Determines the image quality for mobile clients
     */
    declare public readonly optimizerSmartimageMobileQuality: pulumi.Output<number>;
    /**
     * Indicates whether image watermarking should be enabled.
     */
    declare public readonly optimizerWatermark: pulumi.Output<boolean>;
    /**
     * The offset of the watermark image.
     */
    declare public readonly optimizerWatermarkBorderoffset: pulumi.Output<number>;
    /**
     * The minimum image size to which the watermark will be added.
     */
    declare public readonly optimizerWatermarkMinsize: pulumi.Output<number>;
    /**
     * Options: `BottomLeft`, `BottomRight`, `Center`, `CenterStretch`, `TopLeft`, `TopRight`
     */
    declare public readonly optimizerWatermarkPosition: pulumi.Output<string>;
    /**
     * The URL of the watermark image.
     */
    declare public readonly optimizerWatermarkUrl: pulumi.Output<string>;
    /**
     * Indicates whether the WebP optimization should be enabled.
     */
    declare public readonly optimizerWebp: pulumi.Output<boolean>;
    declare public readonly origin: pulumi.Output<outputs.PullzoneOrigin | undefined>;
    /**
     * Indicates whether there is a concurrency limit for Origin Shield.
     */
    declare public readonly originshieldConcurrencyLimit: pulumi.Output<boolean>;
    /**
     * The number of concurrent requests for Origin Shield.
     */
    declare public readonly originshieldConcurrencyRequests: pulumi.Output<number>;
    /**
     * Indicates whether Origin Shield is enabled.
     */
    declare public readonly originshieldEnabled: pulumi.Output<boolean>;
    /**
     * The number of queued requests for Origin Shield.
     */
    declare public readonly originshieldQueueRequests: pulumi.Output<number>;
    /**
     * The maximum wait time for queued requests in Origin Shield, in seconds.
     */
    declare public readonly originshieldQueueWait: pulumi.Output<number>;
    /**
     * Options: `FR`, `IL`
     */
    declare public readonly originshieldZone: pulumi.Output<string>;
    /**
     * The storage zone ID for Perma-Cache.
     */
    declare public readonly permacacheStoragezone: pulumi.Output<number>;
    /**
     * The unique ID of the pull zone.
     */
    declare public /*out*/ readonly pullzoneId: pulumi.Output<number>;
    /**
     * Indicates whether request coalescing is enabled.
     */
    declare public readonly requestCoalescingEnabled: pulumi.Output<boolean>;
    /**
     * Specifies the timeout period, in seconds, for request coalescing, determining how long to wait before sending combined requests to the origin.
     */
    declare public readonly requestCoalescingTimeout: pulumi.Output<number>;
    declare public readonly routing: pulumi.Output<outputs.PullzoneRouting | undefined>;
    /**
     * Indicates whether requests to origin will be signed with AWS Signature Version 4.
     */
    declare public readonly s3AuthEnabled: pulumi.Output<boolean>;
    /**
     * The access key used to authenticate the requests.
     */
    declare public readonly s3AuthKey: pulumi.Output<string>;
    /**
     * The region name of the bucket used to authenticate the requests.
     */
    declare public readonly s3AuthRegion: pulumi.Output<string>;
    /**
     * The secret key used to authenticate the requests.
     */
    declare public readonly s3AuthSecret: pulumi.Output<string>;
    /**
     * The amount of seconds to wait when connecting to the origin. Otherwise the request will fail or retry.
     */
    declare public readonly safehopConnectionTimeout: pulumi.Output<number>;
    declare public readonly safehopEnabled: pulumi.Output<boolean>;
    /**
     * The amount of seconds to wait when waiting for the origin reply. Otherwise the request will fail or retry.
     */
    declare public readonly safehopResponseTimeout: pulumi.Output<number>;
    /**
     * The number of retries to the origin server.
     */
    declare public readonly safehopRetryCount: pulumi.Output<number>;
    /**
     * The amount of time that the CDN should wait before retrying an origin request.
     */
    declare public readonly safehopRetryDelay: pulumi.Output<number>;
    /**
     * Options: `5xxResponse`, `connectionTimeout`, `responseTimeout`
     */
    declare public readonly safehopRetryReasons: pulumi.Output<string[]>;
    /**
     * If enabled, the query parameters will be automatically sorted into a consistent order before checking the cache.
     */
    declare public readonly sortQuerystring: pulumi.Output<boolean>;
    /**
     * If enabled, bunny.net will strip all the Set-Cookie headers from the HTTP responses.
     */
    declare public readonly stripCookies: pulumi.Output<boolean>;
    /**
     * Options: `TLSv1.0`, `TLSv1.1`
     */
    declare public readonly tlsSupports: pulumi.Output<string[]>;
    /**
     * Indicates whether requests without a valid token and expiry timestamp will be rejected.
     */
    declare public readonly tokenAuthEnabled: pulumi.Output<boolean>;
    /**
     * Indicates whether the secure hash generated by the server will also include an IP address.
     */
    declare public readonly tokenAuthIpValidation: pulumi.Output<boolean>;
    /**
     * The auth key used for secure URL token authentication.
     */
    declare public /*out*/ readonly tokenAuthKey: pulumi.Output<string>;
    /**
     * Indicates whether cache update is performed in the background.
     */
    declare public readonly useBackgroundUpdate: pulumi.Output<boolean>;

    /**
     * Create a Pullzone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PullzoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PullzoneArgs | PullzoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PullzoneState | undefined;
            resourceInputs["addCanonicalHeader"] = state?.addCanonicalHeader;
            resourceInputs["allowReferers"] = state?.allowReferers;
            resourceInputs["blockIps"] = state?.blockIps;
            resourceInputs["blockNoReferer"] = state?.blockNoReferer;
            resourceInputs["blockPostRequests"] = state?.blockPostRequests;
            resourceInputs["blockReferers"] = state?.blockReferers;
            resourceInputs["blockRootPath"] = state?.blockRootPath;
            resourceInputs["cacheChunked"] = state?.cacheChunked;
            resourceInputs["cacheEnabled"] = state?.cacheEnabled;
            resourceInputs["cacheErrors"] = state?.cacheErrors;
            resourceInputs["cacheExpirationTime"] = state?.cacheExpirationTime;
            resourceInputs["cacheExpirationTimeBrowser"] = state?.cacheExpirationTimeBrowser;
            resourceInputs["cacheStales"] = state?.cacheStales;
            resourceInputs["cacheVaries"] = state?.cacheVaries;
            resourceInputs["cacheVaryCookies"] = state?.cacheVaryCookies;
            resourceInputs["cacheVaryQuerystrings"] = state?.cacheVaryQuerystrings;
            resourceInputs["cdnDomain"] = state?.cdnDomain;
            resourceInputs["corsEnabled"] = state?.corsEnabled;
            resourceInputs["corsExtensions"] = state?.corsExtensions;
            resourceInputs["disableLetsencrypt"] = state?.disableLetsencrypt;
            resourceInputs["errorpageCustomContent"] = state?.errorpageCustomContent;
            resourceInputs["errorpageCustomEnabled"] = state?.errorpageCustomEnabled;
            resourceInputs["errorpageStatuspageCode"] = state?.errorpageStatuspageCode;
            resourceInputs["errorpageStatuspageEnabled"] = state?.errorpageStatuspageEnabled;
            resourceInputs["errorpageWhitelabel"] = state?.errorpageWhitelabel;
            resourceInputs["limitAfter"] = state?.limitAfter;
            resourceInputs["limitBandwidth"] = state?.limitBandwidth;
            resourceInputs["limitBurst"] = state?.limitBurst;
            resourceInputs["limitConnections"] = state?.limitConnections;
            resourceInputs["limitDownloadSpeed"] = state?.limitDownloadSpeed;
            resourceInputs["limitRequests"] = state?.limitRequests;
            resourceInputs["logAnonymized"] = state?.logAnonymized;
            resourceInputs["logAnonymizedStyle"] = state?.logAnonymizedStyle;
            resourceInputs["logEnabled"] = state?.logEnabled;
            resourceInputs["logForwardEnabled"] = state?.logForwardEnabled;
            resourceInputs["logForwardFormat"] = state?.logForwardFormat;
            resourceInputs["logForwardPort"] = state?.logForwardPort;
            resourceInputs["logForwardProtocol"] = state?.logForwardProtocol;
            resourceInputs["logForwardServer"] = state?.logForwardServer;
            resourceInputs["logForwardToken"] = state?.logForwardToken;
            resourceInputs["logStorageEnabled"] = state?.logStorageEnabled;
            resourceInputs["logStorageZone"] = state?.logStorageZone;
            resourceInputs["name"] = state?.name;
            resourceInputs["optimizerClassesForce"] = state?.optimizerClassesForce;
            resourceInputs["optimizerDynamicImageApi"] = state?.optimizerDynamicImageApi;
            resourceInputs["optimizerEnabled"] = state?.optimizerEnabled;
            resourceInputs["optimizerMinifyCss"] = state?.optimizerMinifyCss;
            resourceInputs["optimizerMinifyJs"] = state?.optimizerMinifyJs;
            resourceInputs["optimizerSmartimage"] = state?.optimizerSmartimage;
            resourceInputs["optimizerSmartimageDesktopMaxwidth"] = state?.optimizerSmartimageDesktopMaxwidth;
            resourceInputs["optimizerSmartimageDesktopQuality"] = state?.optimizerSmartimageDesktopQuality;
            resourceInputs["optimizerSmartimageMobileMaxwidth"] = state?.optimizerSmartimageMobileMaxwidth;
            resourceInputs["optimizerSmartimageMobileQuality"] = state?.optimizerSmartimageMobileQuality;
            resourceInputs["optimizerWatermark"] = state?.optimizerWatermark;
            resourceInputs["optimizerWatermarkBorderoffset"] = state?.optimizerWatermarkBorderoffset;
            resourceInputs["optimizerWatermarkMinsize"] = state?.optimizerWatermarkMinsize;
            resourceInputs["optimizerWatermarkPosition"] = state?.optimizerWatermarkPosition;
            resourceInputs["optimizerWatermarkUrl"] = state?.optimizerWatermarkUrl;
            resourceInputs["optimizerWebp"] = state?.optimizerWebp;
            resourceInputs["origin"] = state?.origin;
            resourceInputs["originshieldConcurrencyLimit"] = state?.originshieldConcurrencyLimit;
            resourceInputs["originshieldConcurrencyRequests"] = state?.originshieldConcurrencyRequests;
            resourceInputs["originshieldEnabled"] = state?.originshieldEnabled;
            resourceInputs["originshieldQueueRequests"] = state?.originshieldQueueRequests;
            resourceInputs["originshieldQueueWait"] = state?.originshieldQueueWait;
            resourceInputs["originshieldZone"] = state?.originshieldZone;
            resourceInputs["permacacheStoragezone"] = state?.permacacheStoragezone;
            resourceInputs["pullzoneId"] = state?.pullzoneId;
            resourceInputs["requestCoalescingEnabled"] = state?.requestCoalescingEnabled;
            resourceInputs["requestCoalescingTimeout"] = state?.requestCoalescingTimeout;
            resourceInputs["routing"] = state?.routing;
            resourceInputs["s3AuthEnabled"] = state?.s3AuthEnabled;
            resourceInputs["s3AuthKey"] = state?.s3AuthKey;
            resourceInputs["s3AuthRegion"] = state?.s3AuthRegion;
            resourceInputs["s3AuthSecret"] = state?.s3AuthSecret;
            resourceInputs["safehopConnectionTimeout"] = state?.safehopConnectionTimeout;
            resourceInputs["safehopEnabled"] = state?.safehopEnabled;
            resourceInputs["safehopResponseTimeout"] = state?.safehopResponseTimeout;
            resourceInputs["safehopRetryCount"] = state?.safehopRetryCount;
            resourceInputs["safehopRetryDelay"] = state?.safehopRetryDelay;
            resourceInputs["safehopRetryReasons"] = state?.safehopRetryReasons;
            resourceInputs["sortQuerystring"] = state?.sortQuerystring;
            resourceInputs["stripCookies"] = state?.stripCookies;
            resourceInputs["tlsSupports"] = state?.tlsSupports;
            resourceInputs["tokenAuthEnabled"] = state?.tokenAuthEnabled;
            resourceInputs["tokenAuthIpValidation"] = state?.tokenAuthIpValidation;
            resourceInputs["tokenAuthKey"] = state?.tokenAuthKey;
            resourceInputs["useBackgroundUpdate"] = state?.useBackgroundUpdate;
        } else {
            const args = argsOrState as PullzoneArgs | undefined;
            resourceInputs["addCanonicalHeader"] = args?.addCanonicalHeader;
            resourceInputs["allowReferers"] = args?.allowReferers;
            resourceInputs["blockIps"] = args?.blockIps;
            resourceInputs["blockNoReferer"] = args?.blockNoReferer;
            resourceInputs["blockPostRequests"] = args?.blockPostRequests;
            resourceInputs["blockReferers"] = args?.blockReferers;
            resourceInputs["blockRootPath"] = args?.blockRootPath;
            resourceInputs["cacheChunked"] = args?.cacheChunked;
            resourceInputs["cacheEnabled"] = args?.cacheEnabled;
            resourceInputs["cacheErrors"] = args?.cacheErrors;
            resourceInputs["cacheExpirationTime"] = args?.cacheExpirationTime;
            resourceInputs["cacheExpirationTimeBrowser"] = args?.cacheExpirationTimeBrowser;
            resourceInputs["cacheStales"] = args?.cacheStales;
            resourceInputs["cacheVaries"] = args?.cacheVaries;
            resourceInputs["cacheVaryCookies"] = args?.cacheVaryCookies;
            resourceInputs["cacheVaryQuerystrings"] = args?.cacheVaryQuerystrings;
            resourceInputs["corsEnabled"] = args?.corsEnabled;
            resourceInputs["corsExtensions"] = args?.corsExtensions;
            resourceInputs["disableLetsencrypt"] = args?.disableLetsencrypt;
            resourceInputs["errorpageCustomContent"] = args?.errorpageCustomContent;
            resourceInputs["errorpageCustomEnabled"] = args?.errorpageCustomEnabled;
            resourceInputs["errorpageStatuspageCode"] = args?.errorpageStatuspageCode;
            resourceInputs["errorpageStatuspageEnabled"] = args?.errorpageStatuspageEnabled;
            resourceInputs["errorpageWhitelabel"] = args?.errorpageWhitelabel;
            resourceInputs["limitAfter"] = args?.limitAfter;
            resourceInputs["limitBandwidth"] = args?.limitBandwidth;
            resourceInputs["limitBurst"] = args?.limitBurst;
            resourceInputs["limitConnections"] = args?.limitConnections;
            resourceInputs["limitDownloadSpeed"] = args?.limitDownloadSpeed;
            resourceInputs["limitRequests"] = args?.limitRequests;
            resourceInputs["logAnonymized"] = args?.logAnonymized;
            resourceInputs["logAnonymizedStyle"] = args?.logAnonymizedStyle;
            resourceInputs["logEnabled"] = args?.logEnabled;
            resourceInputs["logForwardEnabled"] = args?.logForwardEnabled;
            resourceInputs["logForwardFormat"] = args?.logForwardFormat;
            resourceInputs["logForwardPort"] = args?.logForwardPort;
            resourceInputs["logForwardProtocol"] = args?.logForwardProtocol;
            resourceInputs["logForwardServer"] = args?.logForwardServer;
            resourceInputs["logForwardToken"] = args?.logForwardToken;
            resourceInputs["logStorageEnabled"] = args?.logStorageEnabled;
            resourceInputs["logStorageZone"] = args?.logStorageZone;
            resourceInputs["name"] = args?.name;
            resourceInputs["optimizerClassesForce"] = args?.optimizerClassesForce;
            resourceInputs["optimizerDynamicImageApi"] = args?.optimizerDynamicImageApi;
            resourceInputs["optimizerEnabled"] = args?.optimizerEnabled;
            resourceInputs["optimizerMinifyCss"] = args?.optimizerMinifyCss;
            resourceInputs["optimizerMinifyJs"] = args?.optimizerMinifyJs;
            resourceInputs["optimizerSmartimage"] = args?.optimizerSmartimage;
            resourceInputs["optimizerSmartimageDesktopMaxwidth"] = args?.optimizerSmartimageDesktopMaxwidth;
            resourceInputs["optimizerSmartimageDesktopQuality"] = args?.optimizerSmartimageDesktopQuality;
            resourceInputs["optimizerSmartimageMobileMaxwidth"] = args?.optimizerSmartimageMobileMaxwidth;
            resourceInputs["optimizerSmartimageMobileQuality"] = args?.optimizerSmartimageMobileQuality;
            resourceInputs["optimizerWatermark"] = args?.optimizerWatermark;
            resourceInputs["optimizerWatermarkBorderoffset"] = args?.optimizerWatermarkBorderoffset;
            resourceInputs["optimizerWatermarkMinsize"] = args?.optimizerWatermarkMinsize;
            resourceInputs["optimizerWatermarkPosition"] = args?.optimizerWatermarkPosition;
            resourceInputs["optimizerWatermarkUrl"] = args?.optimizerWatermarkUrl;
            resourceInputs["optimizerWebp"] = args?.optimizerWebp;
            resourceInputs["origin"] = args?.origin;
            resourceInputs["originshieldConcurrencyLimit"] = args?.originshieldConcurrencyLimit;
            resourceInputs["originshieldConcurrencyRequests"] = args?.originshieldConcurrencyRequests;
            resourceInputs["originshieldEnabled"] = args?.originshieldEnabled;
            resourceInputs["originshieldQueueRequests"] = args?.originshieldQueueRequests;
            resourceInputs["originshieldQueueWait"] = args?.originshieldQueueWait;
            resourceInputs["originshieldZone"] = args?.originshieldZone;
            resourceInputs["permacacheStoragezone"] = args?.permacacheStoragezone;
            resourceInputs["requestCoalescingEnabled"] = args?.requestCoalescingEnabled;
            resourceInputs["requestCoalescingTimeout"] = args?.requestCoalescingTimeout;
            resourceInputs["routing"] = args?.routing;
            resourceInputs["s3AuthEnabled"] = args?.s3AuthEnabled;
            resourceInputs["s3AuthKey"] = args?.s3AuthKey;
            resourceInputs["s3AuthRegion"] = args?.s3AuthRegion;
            resourceInputs["s3AuthSecret"] = args?.s3AuthSecret;
            resourceInputs["safehopConnectionTimeout"] = args?.safehopConnectionTimeout;
            resourceInputs["safehopEnabled"] = args?.safehopEnabled;
            resourceInputs["safehopResponseTimeout"] = args?.safehopResponseTimeout;
            resourceInputs["safehopRetryCount"] = args?.safehopRetryCount;
            resourceInputs["safehopRetryDelay"] = args?.safehopRetryDelay;
            resourceInputs["safehopRetryReasons"] = args?.safehopRetryReasons;
            resourceInputs["sortQuerystring"] = args?.sortQuerystring;
            resourceInputs["stripCookies"] = args?.stripCookies;
            resourceInputs["tlsSupports"] = args?.tlsSupports;
            resourceInputs["tokenAuthEnabled"] = args?.tokenAuthEnabled;
            resourceInputs["tokenAuthIpValidation"] = args?.tokenAuthIpValidation;
            resourceInputs["useBackgroundUpdate"] = args?.useBackgroundUpdate;
            resourceInputs["cdnDomain"] = undefined /*out*/;
            resourceInputs["pullzoneId"] = undefined /*out*/;
            resourceInputs["tokenAuthKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tokenAuthKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Pullzone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Pullzone resources.
 */
export interface PullzoneState {
    /**
     * Indicates whether the Canonical header is added to the responses.
     */
    addCanonicalHeader?: pulumi.Input<boolean>;
    /**
     * The list of referrer hostnames that are allowed to access the pull zone. Requests containing the header "Referer: hostname" that is not on the list will be rejected. If empty, all the referrers are allowed.
     */
    allowReferers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of IPs that are blocked from accessing the pull zone. Requests coming from the following IPs will be rejected. If empty, all the IPs will be allowed
     */
    blockIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether requests without a referer should be blocked.
     */
    blockNoReferer?: pulumi.Input<boolean>;
    /**
     * Indicates whether to block POST requests.
     */
    blockPostRequests?: pulumi.Input<boolean>;
    /**
     * The list of referrer hostnames that are blocked to access the pull zone. Requests containing the header "Referer: hostname" that is not on the list will be rejected. If empty, all the referrers are allowed.
     */
    blockReferers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This property indicates whether to block the root path.
     */
    blockRootPath?: pulumi.Input<boolean>;
    /**
     * Indicates whether the cache slice (Optimize for video) feature is enabled for the Pull Zone
     */
    cacheChunked?: pulumi.Input<boolean>;
    /**
     * Indicates whether smart caching is enabled.
     */
    cacheEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether bunny.net should be caching error responses.
     */
    cacheErrors?: pulumi.Input<boolean>;
    /**
     * The override cache time, in seconds.
     */
    cacheExpirationTime?: pulumi.Input<number>;
    /**
     * The override cache time for the end client, in seconds.
     */
    cacheExpirationTimeBrowser?: pulumi.Input<number>;
    /**
     * Options: `offline`, `updating`
     */
    cacheStales?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Options: `avif`, `cookie`, `country`, `hostname`, `mobile`, `querystring`, `state`, `webp`
     */
    cacheVaries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contains the list of vary parameters that will be used for vary cache by cookie string. If empty, cookie vary will not be used.
     */
    cacheVaryCookies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contains the list of vary parameters that will be used for vary cache by query string. If empty, all parameters will be used to construct the key
     */
    cacheVaryQuerystrings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The CNAME domain of the pull zone for setting up custom hostnames
     */
    cdnDomain?: pulumi.Input<string>;
    /**
     * Indicates whether CORS (Cross-Origin Resource Sharing) is enabled.
     */
    corsEnabled?: pulumi.Input<boolean>;
    /**
     * A list of file extensions for which CORS is enabled.
     */
    corsExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the built-in let's encrypt is disabled and requests are passed to the origin.
     */
    disableLetsencrypt?: pulumi.Input<boolean>;
    /**
     * Contains the custom error page code that will be returned.
     */
    errorpageCustomContent?: pulumi.Input<string>;
    /**
     * Indicates whether custom error page code should be enabled.
     */
    errorpageCustomEnabled?: pulumi.Input<boolean>;
    /**
     * The statuspage code that will be used to build the status widget.
     */
    errorpageStatuspageCode?: pulumi.Input<string>;
    /**
     * Indicates whether the statuspage widget should be displayed on the error pages.
     */
    errorpageStatuspageEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the error pages should be white-labelled or not
     */
    errorpageWhitelabel?: pulumi.Input<boolean>;
    /**
     * The amount of data after the rate limit will be activated.
     */
    limitAfter?: pulumi.Input<number>;
    /**
     * The maximum bandwidth limit in bytes.
     */
    limitBandwidth?: pulumi.Input<number>;
    /**
     * Excessive requests are delayed until their number exceeds the maximum burst size.
     */
    limitBurst?: pulumi.Input<number>;
    /**
     * The number of connections limited per IP.
     */
    limitConnections?: pulumi.Input<number>;
    /**
     * The maximum download speed, in kb/s. Use 0 for unlimited.
     */
    limitDownloadSpeed?: pulumi.Input<number>;
    /**
     * The maximum amount of requests per IP per second.
     */
    limitRequests?: pulumi.Input<number>;
    /**
     * Indicates whether logs are anonymized.
     */
    logAnonymized?: pulumi.Input<boolean>;
    /**
     * Options: `Drop`, `OneDigit`
     */
    logAnonymizedStyle?: pulumi.Input<string>;
    /**
     * Indicates whether logging is enabled.
     */
    logEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether log forwarding is enabled.
     */
    logForwardEnabled?: pulumi.Input<boolean>;
    /**
     * Options: `JSON`, `Plain`
     */
    logForwardFormat?: pulumi.Input<string>;
    /**
     * The port number for log forwarding.
     */
    logForwardPort?: pulumi.Input<number>;
    /**
     * Options: `DataDog`, `TCP`, `TCPEncrypted`, `UDP`
     */
    logForwardProtocol?: pulumi.Input<string>;
    /**
     * The server address for log forwarding.
     */
    logForwardServer?: pulumi.Input<string>;
    /**
     * The token used for log forwarding authentication.
     */
    logForwardToken?: pulumi.Input<string>;
    /**
     * Indicates whether log storage is enabled.
     */
    logStorageEnabled?: pulumi.Input<boolean>;
    /**
     * The storage zone ID for log storage.
     */
    logStorageZone?: pulumi.Input<number>;
    /**
     * The name of the pull zone.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether the optimizer class list should be enforced.
     */
    optimizerClassesForce?: pulumi.Input<boolean>;
    /**
     * Indicates whether the image manipulation should be enabled.
     */
    optimizerDynamicImageApi?: pulumi.Input<boolean>;
    /**
     * Indicates whether Bunny Optimizer should be enabled.
     */
    optimizerEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the CSS minifcation should be enabled.
     */
    optimizerMinifyCss?: pulumi.Input<boolean>;
    /**
     * Indicates whether the JavaScript minifcation should be enabled.
     */
    optimizerMinifyJs?: pulumi.Input<boolean>;
    /**
     * Indicates whether the automatic image optimization should be enabled.
     */
    optimizerSmartimage?: pulumi.Input<boolean>;
    /**
     * The maximum automatic image size for desktop clients.
     */
    optimizerSmartimageDesktopMaxwidth?: pulumi.Input<number>;
    /**
     * The image quality for desktop clients.
     */
    optimizerSmartimageDesktopQuality?: pulumi.Input<number>;
    /**
     * The maximum automatic image size for mobile clients.
     */
    optimizerSmartimageMobileMaxwidth?: pulumi.Input<number>;
    /**
     * Determines the image quality for mobile clients
     */
    optimizerSmartimageMobileQuality?: pulumi.Input<number>;
    /**
     * Indicates whether image watermarking should be enabled.
     */
    optimizerWatermark?: pulumi.Input<boolean>;
    /**
     * The offset of the watermark image.
     */
    optimizerWatermarkBorderoffset?: pulumi.Input<number>;
    /**
     * The minimum image size to which the watermark will be added.
     */
    optimizerWatermarkMinsize?: pulumi.Input<number>;
    /**
     * Options: `BottomLeft`, `BottomRight`, `Center`, `CenterStretch`, `TopLeft`, `TopRight`
     */
    optimizerWatermarkPosition?: pulumi.Input<string>;
    /**
     * The URL of the watermark image.
     */
    optimizerWatermarkUrl?: pulumi.Input<string>;
    /**
     * Indicates whether the WebP optimization should be enabled.
     */
    optimizerWebp?: pulumi.Input<boolean>;
    origin?: pulumi.Input<inputs.PullzoneOrigin>;
    /**
     * Indicates whether there is a concurrency limit for Origin Shield.
     */
    originshieldConcurrencyLimit?: pulumi.Input<boolean>;
    /**
     * The number of concurrent requests for Origin Shield.
     */
    originshieldConcurrencyRequests?: pulumi.Input<number>;
    /**
     * Indicates whether Origin Shield is enabled.
     */
    originshieldEnabled?: pulumi.Input<boolean>;
    /**
     * The number of queued requests for Origin Shield.
     */
    originshieldQueueRequests?: pulumi.Input<number>;
    /**
     * The maximum wait time for queued requests in Origin Shield, in seconds.
     */
    originshieldQueueWait?: pulumi.Input<number>;
    /**
     * Options: `FR`, `IL`
     */
    originshieldZone?: pulumi.Input<string>;
    /**
     * The storage zone ID for Perma-Cache.
     */
    permacacheStoragezone?: pulumi.Input<number>;
    /**
     * The unique ID of the pull zone.
     */
    pullzoneId?: pulumi.Input<number>;
    /**
     * Indicates whether request coalescing is enabled.
     */
    requestCoalescingEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the timeout period, in seconds, for request coalescing, determining how long to wait before sending combined requests to the origin.
     */
    requestCoalescingTimeout?: pulumi.Input<number>;
    routing?: pulumi.Input<inputs.PullzoneRouting>;
    /**
     * Indicates whether requests to origin will be signed with AWS Signature Version 4.
     */
    s3AuthEnabled?: pulumi.Input<boolean>;
    /**
     * The access key used to authenticate the requests.
     */
    s3AuthKey?: pulumi.Input<string>;
    /**
     * The region name of the bucket used to authenticate the requests.
     */
    s3AuthRegion?: pulumi.Input<string>;
    /**
     * The secret key used to authenticate the requests.
     */
    s3AuthSecret?: pulumi.Input<string>;
    /**
     * The amount of seconds to wait when connecting to the origin. Otherwise the request will fail or retry.
     */
    safehopConnectionTimeout?: pulumi.Input<number>;
    safehopEnabled?: pulumi.Input<boolean>;
    /**
     * The amount of seconds to wait when waiting for the origin reply. Otherwise the request will fail or retry.
     */
    safehopResponseTimeout?: pulumi.Input<number>;
    /**
     * The number of retries to the origin server.
     */
    safehopRetryCount?: pulumi.Input<number>;
    /**
     * The amount of time that the CDN should wait before retrying an origin request.
     */
    safehopRetryDelay?: pulumi.Input<number>;
    /**
     * Options: `5xxResponse`, `connectionTimeout`, `responseTimeout`
     */
    safehopRetryReasons?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If enabled, the query parameters will be automatically sorted into a consistent order before checking the cache.
     */
    sortQuerystring?: pulumi.Input<boolean>;
    /**
     * If enabled, bunny.net will strip all the Set-Cookie headers from the HTTP responses.
     */
    stripCookies?: pulumi.Input<boolean>;
    /**
     * Options: `TLSv1.0`, `TLSv1.1`
     */
    tlsSupports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether requests without a valid token and expiry timestamp will be rejected.
     */
    tokenAuthEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the secure hash generated by the server will also include an IP address.
     */
    tokenAuthIpValidation?: pulumi.Input<boolean>;
    /**
     * The auth key used for secure URL token authentication.
     */
    tokenAuthKey?: pulumi.Input<string>;
    /**
     * Indicates whether cache update is performed in the background.
     */
    useBackgroundUpdate?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Pullzone resource.
 */
export interface PullzoneArgs {
    /**
     * Indicates whether the Canonical header is added to the responses.
     */
    addCanonicalHeader?: pulumi.Input<boolean>;
    /**
     * The list of referrer hostnames that are allowed to access the pull zone. Requests containing the header "Referer: hostname" that is not on the list will be rejected. If empty, all the referrers are allowed.
     */
    allowReferers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of IPs that are blocked from accessing the pull zone. Requests coming from the following IPs will be rejected. If empty, all the IPs will be allowed
     */
    blockIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether requests without a referer should be blocked.
     */
    blockNoReferer?: pulumi.Input<boolean>;
    /**
     * Indicates whether to block POST requests.
     */
    blockPostRequests?: pulumi.Input<boolean>;
    /**
     * The list of referrer hostnames that are blocked to access the pull zone. Requests containing the header "Referer: hostname" that is not on the list will be rejected. If empty, all the referrers are allowed.
     */
    blockReferers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This property indicates whether to block the root path.
     */
    blockRootPath?: pulumi.Input<boolean>;
    /**
     * Indicates whether the cache slice (Optimize for video) feature is enabled for the Pull Zone
     */
    cacheChunked?: pulumi.Input<boolean>;
    /**
     * Indicates whether smart caching is enabled.
     */
    cacheEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether bunny.net should be caching error responses.
     */
    cacheErrors?: pulumi.Input<boolean>;
    /**
     * The override cache time, in seconds.
     */
    cacheExpirationTime?: pulumi.Input<number>;
    /**
     * The override cache time for the end client, in seconds.
     */
    cacheExpirationTimeBrowser?: pulumi.Input<number>;
    /**
     * Options: `offline`, `updating`
     */
    cacheStales?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Options: `avif`, `cookie`, `country`, `hostname`, `mobile`, `querystring`, `state`, `webp`
     */
    cacheVaries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contains the list of vary parameters that will be used for vary cache by cookie string. If empty, cookie vary will not be used.
     */
    cacheVaryCookies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contains the list of vary parameters that will be used for vary cache by query string. If empty, all parameters will be used to construct the key
     */
    cacheVaryQuerystrings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether CORS (Cross-Origin Resource Sharing) is enabled.
     */
    corsEnabled?: pulumi.Input<boolean>;
    /**
     * A list of file extensions for which CORS is enabled.
     */
    corsExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, the built-in let's encrypt is disabled and requests are passed to the origin.
     */
    disableLetsencrypt?: pulumi.Input<boolean>;
    /**
     * Contains the custom error page code that will be returned.
     */
    errorpageCustomContent?: pulumi.Input<string>;
    /**
     * Indicates whether custom error page code should be enabled.
     */
    errorpageCustomEnabled?: pulumi.Input<boolean>;
    /**
     * The statuspage code that will be used to build the status widget.
     */
    errorpageStatuspageCode?: pulumi.Input<string>;
    /**
     * Indicates whether the statuspage widget should be displayed on the error pages.
     */
    errorpageStatuspageEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the error pages should be white-labelled or not
     */
    errorpageWhitelabel?: pulumi.Input<boolean>;
    /**
     * The amount of data after the rate limit will be activated.
     */
    limitAfter?: pulumi.Input<number>;
    /**
     * The maximum bandwidth limit in bytes.
     */
    limitBandwidth?: pulumi.Input<number>;
    /**
     * Excessive requests are delayed until their number exceeds the maximum burst size.
     */
    limitBurst?: pulumi.Input<number>;
    /**
     * The number of connections limited per IP.
     */
    limitConnections?: pulumi.Input<number>;
    /**
     * The maximum download speed, in kb/s. Use 0 for unlimited.
     */
    limitDownloadSpeed?: pulumi.Input<number>;
    /**
     * The maximum amount of requests per IP per second.
     */
    limitRequests?: pulumi.Input<number>;
    /**
     * Indicates whether logs are anonymized.
     */
    logAnonymized?: pulumi.Input<boolean>;
    /**
     * Options: `Drop`, `OneDigit`
     */
    logAnonymizedStyle?: pulumi.Input<string>;
    /**
     * Indicates whether logging is enabled.
     */
    logEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether log forwarding is enabled.
     */
    logForwardEnabled?: pulumi.Input<boolean>;
    /**
     * Options: `JSON`, `Plain`
     */
    logForwardFormat?: pulumi.Input<string>;
    /**
     * The port number for log forwarding.
     */
    logForwardPort?: pulumi.Input<number>;
    /**
     * Options: `DataDog`, `TCP`, `TCPEncrypted`, `UDP`
     */
    logForwardProtocol?: pulumi.Input<string>;
    /**
     * The server address for log forwarding.
     */
    logForwardServer?: pulumi.Input<string>;
    /**
     * The token used for log forwarding authentication.
     */
    logForwardToken?: pulumi.Input<string>;
    /**
     * Indicates whether log storage is enabled.
     */
    logStorageEnabled?: pulumi.Input<boolean>;
    /**
     * The storage zone ID for log storage.
     */
    logStorageZone?: pulumi.Input<number>;
    /**
     * The name of the pull zone.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether the optimizer class list should be enforced.
     */
    optimizerClassesForce?: pulumi.Input<boolean>;
    /**
     * Indicates whether the image manipulation should be enabled.
     */
    optimizerDynamicImageApi?: pulumi.Input<boolean>;
    /**
     * Indicates whether Bunny Optimizer should be enabled.
     */
    optimizerEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the CSS minifcation should be enabled.
     */
    optimizerMinifyCss?: pulumi.Input<boolean>;
    /**
     * Indicates whether the JavaScript minifcation should be enabled.
     */
    optimizerMinifyJs?: pulumi.Input<boolean>;
    /**
     * Indicates whether the automatic image optimization should be enabled.
     */
    optimizerSmartimage?: pulumi.Input<boolean>;
    /**
     * The maximum automatic image size for desktop clients.
     */
    optimizerSmartimageDesktopMaxwidth?: pulumi.Input<number>;
    /**
     * The image quality for desktop clients.
     */
    optimizerSmartimageDesktopQuality?: pulumi.Input<number>;
    /**
     * The maximum automatic image size for mobile clients.
     */
    optimizerSmartimageMobileMaxwidth?: pulumi.Input<number>;
    /**
     * Determines the image quality for mobile clients
     */
    optimizerSmartimageMobileQuality?: pulumi.Input<number>;
    /**
     * Indicates whether image watermarking should be enabled.
     */
    optimizerWatermark?: pulumi.Input<boolean>;
    /**
     * The offset of the watermark image.
     */
    optimizerWatermarkBorderoffset?: pulumi.Input<number>;
    /**
     * The minimum image size to which the watermark will be added.
     */
    optimizerWatermarkMinsize?: pulumi.Input<number>;
    /**
     * Options: `BottomLeft`, `BottomRight`, `Center`, `CenterStretch`, `TopLeft`, `TopRight`
     */
    optimizerWatermarkPosition?: pulumi.Input<string>;
    /**
     * The URL of the watermark image.
     */
    optimizerWatermarkUrl?: pulumi.Input<string>;
    /**
     * Indicates whether the WebP optimization should be enabled.
     */
    optimizerWebp?: pulumi.Input<boolean>;
    origin?: pulumi.Input<inputs.PullzoneOrigin>;
    /**
     * Indicates whether there is a concurrency limit for Origin Shield.
     */
    originshieldConcurrencyLimit?: pulumi.Input<boolean>;
    /**
     * The number of concurrent requests for Origin Shield.
     */
    originshieldConcurrencyRequests?: pulumi.Input<number>;
    /**
     * Indicates whether Origin Shield is enabled.
     */
    originshieldEnabled?: pulumi.Input<boolean>;
    /**
     * The number of queued requests for Origin Shield.
     */
    originshieldQueueRequests?: pulumi.Input<number>;
    /**
     * The maximum wait time for queued requests in Origin Shield, in seconds.
     */
    originshieldQueueWait?: pulumi.Input<number>;
    /**
     * Options: `FR`, `IL`
     */
    originshieldZone?: pulumi.Input<string>;
    /**
     * The storage zone ID for Perma-Cache.
     */
    permacacheStoragezone?: pulumi.Input<number>;
    /**
     * Indicates whether request coalescing is enabled.
     */
    requestCoalescingEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the timeout period, in seconds, for request coalescing, determining how long to wait before sending combined requests to the origin.
     */
    requestCoalescingTimeout?: pulumi.Input<number>;
    routing?: pulumi.Input<inputs.PullzoneRouting>;
    /**
     * Indicates whether requests to origin will be signed with AWS Signature Version 4.
     */
    s3AuthEnabled?: pulumi.Input<boolean>;
    /**
     * The access key used to authenticate the requests.
     */
    s3AuthKey?: pulumi.Input<string>;
    /**
     * The region name of the bucket used to authenticate the requests.
     */
    s3AuthRegion?: pulumi.Input<string>;
    /**
     * The secret key used to authenticate the requests.
     */
    s3AuthSecret?: pulumi.Input<string>;
    /**
     * The amount of seconds to wait when connecting to the origin. Otherwise the request will fail or retry.
     */
    safehopConnectionTimeout?: pulumi.Input<number>;
    safehopEnabled?: pulumi.Input<boolean>;
    /**
     * The amount of seconds to wait when waiting for the origin reply. Otherwise the request will fail or retry.
     */
    safehopResponseTimeout?: pulumi.Input<number>;
    /**
     * The number of retries to the origin server.
     */
    safehopRetryCount?: pulumi.Input<number>;
    /**
     * The amount of time that the CDN should wait before retrying an origin request.
     */
    safehopRetryDelay?: pulumi.Input<number>;
    /**
     * Options: `5xxResponse`, `connectionTimeout`, `responseTimeout`
     */
    safehopRetryReasons?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If enabled, the query parameters will be automatically sorted into a consistent order before checking the cache.
     */
    sortQuerystring?: pulumi.Input<boolean>;
    /**
     * If enabled, bunny.net will strip all the Set-Cookie headers from the HTTP responses.
     */
    stripCookies?: pulumi.Input<boolean>;
    /**
     * Options: `TLSv1.0`, `TLSv1.1`
     */
    tlsSupports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates whether requests without a valid token and expiry timestamp will be rejected.
     */
    tokenAuthEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether the secure hash generated by the server will also include an IP address.
     */
    tokenAuthIpValidation?: pulumi.Input<boolean>;
    /**
     * Indicates whether cache update is performed in the background.
     */
    useBackgroundUpdate?: pulumi.Input<boolean>;
}

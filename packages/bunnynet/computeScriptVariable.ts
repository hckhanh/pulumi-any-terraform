// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ComputeScriptVariable extends pulumi.CustomResource {
    /**
     * Get an existing ComputeScriptVariable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeScriptVariableState, opts?: pulumi.CustomResourceOptions): ComputeScriptVariable {
        return new ComputeScriptVariable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/computeScriptVariable:ComputeScriptVariable';

    /**
     * Returns true if the given object is an instance of ComputeScriptVariable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeScriptVariable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeScriptVariable.__pulumiType;
    }

    /**
     * The ID of the environment variable.
     */
    declare public /*out*/ readonly computeScriptVariableId: pulumi.Output<number>;
    /**
     * The default value of the environment variable.
     */
    declare public readonly defaultValue: pulumi.Output<string>;
    /**
     * The name of the environment variable.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Indicates whether the environment variable is required.
     */
    declare public readonly required: pulumi.Output<boolean>;
    /**
     * The ID of the associated compute script.
     */
    declare public readonly script: pulumi.Output<number>;

    /**
     * Create a ComputeScriptVariable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeScriptVariableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeScriptVariableArgs | ComputeScriptVariableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeScriptVariableState | undefined;
            resourceInputs["computeScriptVariableId"] = state?.computeScriptVariableId;
            resourceInputs["defaultValue"] = state?.defaultValue;
            resourceInputs["name"] = state?.name;
            resourceInputs["required"] = state?.required;
            resourceInputs["script"] = state?.script;
        } else {
            const args = argsOrState as ComputeScriptVariableArgs | undefined;
            if (args?.defaultValue === undefined && !opts.urn) {
                throw new Error("Missing required property 'defaultValue'");
            }
            if (args?.required === undefined && !opts.urn) {
                throw new Error("Missing required property 'required'");
            }
            if (args?.script === undefined && !opts.urn) {
                throw new Error("Missing required property 'script'");
            }
            resourceInputs["defaultValue"] = args?.defaultValue;
            resourceInputs["name"] = args?.name;
            resourceInputs["required"] = args?.required;
            resourceInputs["script"] = args?.script;
            resourceInputs["computeScriptVariableId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeScriptVariable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeScriptVariable resources.
 */
export interface ComputeScriptVariableState {
    /**
     * The ID of the environment variable.
     */
    computeScriptVariableId?: pulumi.Input<number>;
    /**
     * The default value of the environment variable.
     */
    defaultValue?: pulumi.Input<string>;
    /**
     * The name of the environment variable.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether the environment variable is required.
     */
    required?: pulumi.Input<boolean>;
    /**
     * The ID of the associated compute script.
     */
    script?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ComputeScriptVariable resource.
 */
export interface ComputeScriptVariableArgs {
    /**
     * The default value of the environment variable.
     */
    defaultValue: pulumi.Input<string>;
    /**
     * The name of the environment variable.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether the environment variable is required.
     */
    required: pulumi.Input<boolean>;
    /**
     * The ID of the associated compute script.
     */
    script: pulumi.Input<number>;
}

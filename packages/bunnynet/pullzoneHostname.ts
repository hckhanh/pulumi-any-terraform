// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PullzoneHostname extends pulumi.CustomResource {
    /**
     * Get an existing PullzoneHostname resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PullzoneHostnameState, opts?: pulumi.CustomResourceOptions): PullzoneHostname {
        return new PullzoneHostname(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/pullzoneHostname:PullzoneHostname';

    /**
     * Returns true if the given object is an instance of PullzoneHostname.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PullzoneHostname {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PullzoneHostname.__pulumiType;
    }

    /**
     * The certificate for the hostname, in PEM format. ***Important***: the Bunny API will not return the certificate data, so you'll have to make sure you're importing the correct certificate.
     */
    declare public readonly certificate: pulumi.Output<string>;
    /**
     * The certificate private key for the hostname, in PEM format. ***Important***: the Bunny API will not return the certificate key, so you'll have to make sure you're importing the correct certificate key.
     */
    declare public readonly certificateKey: pulumi.Output<string>;
    /**
     * Indicates whether SSL should be enforced for the hostname.
     */
    declare public readonly forceSsl: pulumi.Output<boolean>;
    /**
     * Indicates whether the hostname is internal (in the CDN domain) or provided by the user.
     */
    declare public /*out*/ readonly isInternal: pulumi.Output<boolean>;
    /**
     * The hostname value for the domain name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the linked pull zone.
     */
    declare public readonly pullzone: pulumi.Output<number>;
    /**
     * The unique ID of the hostname.
     */
    declare public /*out*/ readonly pullzoneHostnameId: pulumi.Output<number>;
    /**
     * Indicates whether the hostname should support HTTPS. If a custom certificate is not provided via the <code>certificate</code> attribute, a Domain-validated TLS certificate will be automatically obtained and managed by Bunny. ***Important***: it is not possible to tell managed and custom certificates apart for imported resources.
     */
    declare public readonly tlsEnabled: pulumi.Output<boolean>;

    /**
     * Create a PullzoneHostname resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PullzoneHostnameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PullzoneHostnameArgs | PullzoneHostnameState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PullzoneHostnameState | undefined;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["certificateKey"] = state?.certificateKey;
            resourceInputs["forceSsl"] = state?.forceSsl;
            resourceInputs["isInternal"] = state?.isInternal;
            resourceInputs["name"] = state?.name;
            resourceInputs["pullzone"] = state?.pullzone;
            resourceInputs["pullzoneHostnameId"] = state?.pullzoneHostnameId;
            resourceInputs["tlsEnabled"] = state?.tlsEnabled;
        } else {
            const args = argsOrState as PullzoneHostnameArgs | undefined;
            if (args?.pullzone === undefined && !opts.urn) {
                throw new Error("Missing required property 'pullzone'");
            }
            resourceInputs["certificate"] = args?.certificate;
            resourceInputs["certificateKey"] = args?.certificateKey;
            resourceInputs["forceSsl"] = args?.forceSsl;
            resourceInputs["name"] = args?.name;
            resourceInputs["pullzone"] = args?.pullzone;
            resourceInputs["tlsEnabled"] = args?.tlsEnabled;
            resourceInputs["isInternal"] = undefined /*out*/;
            resourceInputs["pullzoneHostnameId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PullzoneHostname.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PullzoneHostname resources.
 */
export interface PullzoneHostnameState {
    /**
     * The certificate for the hostname, in PEM format. ***Important***: the Bunny API will not return the certificate data, so you'll have to make sure you're importing the correct certificate.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The certificate private key for the hostname, in PEM format. ***Important***: the Bunny API will not return the certificate key, so you'll have to make sure you're importing the correct certificate key.
     */
    certificateKey?: pulumi.Input<string>;
    /**
     * Indicates whether SSL should be enforced for the hostname.
     */
    forceSsl?: pulumi.Input<boolean>;
    /**
     * Indicates whether the hostname is internal (in the CDN domain) or provided by the user.
     */
    isInternal?: pulumi.Input<boolean>;
    /**
     * The hostname value for the domain name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the linked pull zone.
     */
    pullzone?: pulumi.Input<number>;
    /**
     * The unique ID of the hostname.
     */
    pullzoneHostnameId?: pulumi.Input<number>;
    /**
     * Indicates whether the hostname should support HTTPS. If a custom certificate is not provided via the <code>certificate</code> attribute, a Domain-validated TLS certificate will be automatically obtained and managed by Bunny. ***Important***: it is not possible to tell managed and custom certificates apart for imported resources.
     */
    tlsEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PullzoneHostname resource.
 */
export interface PullzoneHostnameArgs {
    /**
     * The certificate for the hostname, in PEM format. ***Important***: the Bunny API will not return the certificate data, so you'll have to make sure you're importing the correct certificate.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The certificate private key for the hostname, in PEM format. ***Important***: the Bunny API will not return the certificate key, so you'll have to make sure you're importing the correct certificate key.
     */
    certificateKey?: pulumi.Input<string>;
    /**
     * Indicates whether SSL should be enforced for the hostname.
     */
    forceSsl?: pulumi.Input<boolean>;
    /**
     * The hostname value for the domain name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the linked pull zone.
     */
    pullzone: pulumi.Input<number>;
    /**
     * Indicates whether the hostname should support HTTPS. If a custom certificate is not provided via the <code>certificate</code> attribute, a Domain-validated TLS certificate will be automatically obtained and managed by Bunny. ***Important***: it is not possible to tell managed and custom certificates apart for imported resources.
     */
    tlsEnabled?: pulumi.Input<boolean>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DnsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordState, opts?: pulumi.CustomResourceOptions): DnsRecord {
        return new DnsRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/dnsRecord:DnsRecord';

    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }

    /**
     * Indicates whether the DNS record should utilize bunny.net’s acceleration services.
     */
    declare public readonly accelerated: pulumi.Output<boolean>;
    /**
     * The ID of the accelerated pull zone.
     */
    declare public /*out*/ readonly acceleratedPullzone: pulumi.Output<number>;
    /**
     * This property allows users to add descriptive notes for documentation and management purposes.
     */
    declare public readonly comment: pulumi.Output<string>;
    /**
     * The unique identifier for the DNS record.
     */
    declare public /*out*/ readonly dnsRecordId: pulumi.Output<number>;
    /**
     * Indicates whether the DNS record is enabled.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Flags for advanced DNS settings.
     */
    declare public readonly flags: pulumi.Output<number>;
    /**
     * The latitude for geolocation-based routing.
     */
    declare public readonly geolocationLat: pulumi.Output<number>;
    /**
     * The longitude for geolocation-based routing.
     */
    declare public readonly geolocationLong: pulumi.Output<number>;
    /**
     * The latency zone for latency-based routing.
     */
    declare public readonly latencyZone: pulumi.Output<string>;
    /**
     * The name of the linked resource.
     */
    declare public readonly linkName: pulumi.Output<string>;
    /**
     * Options: `Http`, `Monitor`, `None`, `Ping`
     */
    declare public readonly monitorType: pulumi.Output<string>;
    /**
     * The name of the DNS record. Use <code>name = ""</code> for apex domain records.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The port number for services that require a specific port.
     */
    declare public readonly port: pulumi.Output<number>;
    /**
     * The priority of the DNS record.
     */
    declare public readonly priority: pulumi.Output<number>;
    /**
     * Options: `Geolocation`, `Latency`, `None`
     */
    declare public readonly smartRoutingType: pulumi.Output<string>;
    /**
     * A tag for the DNS record.
     */
    declare public readonly tag: pulumi.Output<string>;
    /**
     * The time-to-live value for the DNS record.
     */
    declare public readonly ttl: pulumi.Output<number>;
    /**
     * Options: `A`, `AAAA`, `CAA`, `CNAME`, `Flatten`, `MX`, `NS`, `PTR`, `PullZone`, `Redirect`, `SRV`, `Script`, `TXT`
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * The value of the DNS record.
     */
    declare public readonly value: pulumi.Output<string>;
    /**
     * The weight of the DNS record. It is used in load balancing scenarios to distribute traffic based on the specified
     * weight.
     */
    declare public readonly weight: pulumi.Output<number>;
    /**
     * ID of the related DNS zone.
     */
    declare public readonly zone: pulumi.Output<number>;

    /**
     * Create a DnsRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordArgs | DnsRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRecordState | undefined;
            resourceInputs["accelerated"] = state?.accelerated;
            resourceInputs["acceleratedPullzone"] = state?.acceleratedPullzone;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["dnsRecordId"] = state?.dnsRecordId;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["flags"] = state?.flags;
            resourceInputs["geolocationLat"] = state?.geolocationLat;
            resourceInputs["geolocationLong"] = state?.geolocationLong;
            resourceInputs["latencyZone"] = state?.latencyZone;
            resourceInputs["linkName"] = state?.linkName;
            resourceInputs["monitorType"] = state?.monitorType;
            resourceInputs["name"] = state?.name;
            resourceInputs["port"] = state?.port;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["smartRoutingType"] = state?.smartRoutingType;
            resourceInputs["tag"] = state?.tag;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["type"] = state?.type;
            resourceInputs["value"] = state?.value;
            resourceInputs["weight"] = state?.weight;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as DnsRecordArgs | undefined;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.value === undefined && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["accelerated"] = args?.accelerated;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["flags"] = args?.flags;
            resourceInputs["geolocationLat"] = args?.geolocationLat;
            resourceInputs["geolocationLong"] = args?.geolocationLong;
            resourceInputs["latencyZone"] = args?.latencyZone;
            resourceInputs["linkName"] = args?.linkName;
            resourceInputs["monitorType"] = args?.monitorType;
            resourceInputs["name"] = args?.name;
            resourceInputs["port"] = args?.port;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["smartRoutingType"] = args?.smartRoutingType;
            resourceInputs["tag"] = args?.tag;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["type"] = args?.type;
            resourceInputs["value"] = args?.value;
            resourceInputs["weight"] = args?.weight;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["acceleratedPullzone"] = undefined /*out*/;
            resourceInputs["dnsRecordId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsRecord resources.
 */
export interface DnsRecordState {
    /**
     * Indicates whether the DNS record should utilize bunny.net’s acceleration services.
     */
    accelerated?: pulumi.Input<boolean>;
    /**
     * The ID of the accelerated pull zone.
     */
    acceleratedPullzone?: pulumi.Input<number>;
    /**
     * This property allows users to add descriptive notes for documentation and management purposes.
     */
    comment?: pulumi.Input<string>;
    /**
     * The unique identifier for the DNS record.
     */
    dnsRecordId?: pulumi.Input<number>;
    /**
     * Indicates whether the DNS record is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Flags for advanced DNS settings.
     */
    flags?: pulumi.Input<number>;
    /**
     * The latitude for geolocation-based routing.
     */
    geolocationLat?: pulumi.Input<number>;
    /**
     * The longitude for geolocation-based routing.
     */
    geolocationLong?: pulumi.Input<number>;
    /**
     * The latency zone for latency-based routing.
     */
    latencyZone?: pulumi.Input<string>;
    /**
     * The name of the linked resource.
     */
    linkName?: pulumi.Input<string>;
    /**
     * Options: `Http`, `Monitor`, `None`, `Ping`
     */
    monitorType?: pulumi.Input<string>;
    /**
     * The name of the DNS record. Use <code>name = ""</code> for apex domain records.
     */
    name?: pulumi.Input<string>;
    /**
     * The port number for services that require a specific port.
     */
    port?: pulumi.Input<number>;
    /**
     * The priority of the DNS record.
     */
    priority?: pulumi.Input<number>;
    /**
     * Options: `Geolocation`, `Latency`, `None`
     */
    smartRoutingType?: pulumi.Input<string>;
    /**
     * A tag for the DNS record.
     */
    tag?: pulumi.Input<string>;
    /**
     * The time-to-live value for the DNS record.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Options: `A`, `AAAA`, `CAA`, `CNAME`, `Flatten`, `MX`, `NS`, `PTR`, `PullZone`, `Redirect`, `SRV`, `Script`, `TXT`
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the DNS record.
     */
    value?: pulumi.Input<string>;
    /**
     * The weight of the DNS record. It is used in load balancing scenarios to distribute traffic based on the specified
     * weight.
     */
    weight?: pulumi.Input<number>;
    /**
     * ID of the related DNS zone.
     */
    zone?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DnsRecord resource.
 */
export interface DnsRecordArgs {
    /**
     * Indicates whether the DNS record should utilize bunny.net’s acceleration services.
     */
    accelerated?: pulumi.Input<boolean>;
    /**
     * This property allows users to add descriptive notes for documentation and management purposes.
     */
    comment?: pulumi.Input<string>;
    /**
     * Indicates whether the DNS record is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Flags for advanced DNS settings.
     */
    flags?: pulumi.Input<number>;
    /**
     * The latitude for geolocation-based routing.
     */
    geolocationLat?: pulumi.Input<number>;
    /**
     * The longitude for geolocation-based routing.
     */
    geolocationLong?: pulumi.Input<number>;
    /**
     * The latency zone for latency-based routing.
     */
    latencyZone?: pulumi.Input<string>;
    /**
     * The name of the linked resource.
     */
    linkName?: pulumi.Input<string>;
    /**
     * Options: `Http`, `Monitor`, `None`, `Ping`
     */
    monitorType?: pulumi.Input<string>;
    /**
     * The name of the DNS record. Use <code>name = ""</code> for apex domain records.
     */
    name?: pulumi.Input<string>;
    /**
     * The port number for services that require a specific port.
     */
    port?: pulumi.Input<number>;
    /**
     * The priority of the DNS record.
     */
    priority?: pulumi.Input<number>;
    /**
     * Options: `Geolocation`, `Latency`, `None`
     */
    smartRoutingType?: pulumi.Input<string>;
    /**
     * A tag for the DNS record.
     */
    tag?: pulumi.Input<string>;
    /**
     * The time-to-live value for the DNS record.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Options: `A`, `AAAA`, `CAA`, `CNAME`, `Flatten`, `MX`, `NS`, `PTR`, `PullZone`, `Redirect`, `SRV`, `Script`, `TXT`
     */
    type: pulumi.Input<string>;
    /**
     * The value of the DNS record.
     */
    value: pulumi.Input<string>;
    /**
     * The weight of the DNS record. It is used in load balancing scenarios to distribute traffic based on the specified
     * weight.
     */
    weight?: pulumi.Input<number>;
    /**
     * ID of the related DNS zone.
     */
    zone: pulumi.Input<number>;
}

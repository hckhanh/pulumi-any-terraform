// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ComputeContainerImageregistry extends pulumi.CustomResource {
    /**
     * Get an existing ComputeContainerImageregistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeContainerImageregistryState, opts?: pulumi.CustomResourceOptions): ComputeContainerImageregistry {
        return new ComputeContainerImageregistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bunnynet:index/computeContainerImageregistry:ComputeContainerImageregistry';

    /**
     * Returns true if the given object is an instance of ComputeContainerImageregistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeContainerImageregistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeContainerImageregistry.__pulumiType;
    }

    /**
     * The unique identifier for the image registry.
     */
    declare public /*out*/ readonly computeContainerImageregistryId: pulumi.Output<number>;
    /**
     * Options: `DockerHub`, `GitHub`
     */
    declare public readonly registry: pulumi.Output<string>;
    /**
     * The token used to authenticate to the registry. If you are importing a resource, declare the token as an empty string.
     */
    declare public readonly token: pulumi.Output<string>;
    /**
     * The username used to authenticate to the registry.
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a ComputeContainerImageregistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeContainerImageregistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeContainerImageregistryArgs | ComputeContainerImageregistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeContainerImageregistryState | undefined;
            resourceInputs["computeContainerImageregistryId"] = state?.computeContainerImageregistryId;
            resourceInputs["registry"] = state?.registry;
            resourceInputs["token"] = state?.token;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as ComputeContainerImageregistryArgs | undefined;
            if (args?.registry === undefined && !opts.urn) {
                throw new Error("Missing required property 'registry'");
            }
            if (args?.token === undefined && !opts.urn) {
                throw new Error("Missing required property 'token'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["registry"] = args?.registry;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["username"] = args?.username;
            resourceInputs["computeContainerImageregistryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ComputeContainerImageregistry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeContainerImageregistry resources.
 */
export interface ComputeContainerImageregistryState {
    /**
     * The unique identifier for the image registry.
     */
    computeContainerImageregistryId?: pulumi.Input<number>;
    /**
     * Options: `DockerHub`, `GitHub`
     */
    registry?: pulumi.Input<string>;
    /**
     * The token used to authenticate to the registry. If you are importing a resource, declare the token as an empty string.
     */
    token?: pulumi.Input<string>;
    /**
     * The username used to authenticate to the registry.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeContainerImageregistry resource.
 */
export interface ComputeContainerImageregistryArgs {
    /**
     * Options: `DockerHub`, `GitHub`
     */
    registry: pulumi.Input<string>;
    /**
     * The token used to authenticate to the registry. If you are importing a resource, declare the token as an empty string.
     */
    token: pulumi.Input<string>;
    /**
     * The username used to authenticate to the registry.
     */
    username: pulumi.Input<string>;
}

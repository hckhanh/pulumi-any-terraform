// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetMetricArgs, GetMetricResult, GetMetricOutputArgs } from "./getMetric";
export const getMetric: typeof import("./getMetric").getMetric = null as any;
export const getMetricOutput: typeof import("./getMetric").getMetricOutput = null as any;
utilities.lazyLoad(exports, ["getMetric","getMetricOutput"], () => require("./getMetric"));

export { GetSourceArgs, GetSourceResult, GetSourceOutputArgs } from "./getSource";
export const getSource: typeof import("./getSource").getSource = null as any;
export const getSourceOutput: typeof import("./getSource").getSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSource","getSourceOutput"], () => require("./getSource"));

export { GetSourceGroupArgs, GetSourceGroupResult, GetSourceGroupOutputArgs } from "./getSourceGroup";
export const getSourceGroup: typeof import("./getSourceGroup").getSourceGroup = null as any;
export const getSourceGroupOutput: typeof import("./getSourceGroup").getSourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSourceGroup","getSourceGroupOutput"], () => require("./getSourceGroup"));

export { MetricArgs, MetricState } from "./metric";
export type Metric = import("./metric").Metric;
export const Metric: typeof import("./metric").Metric = null as any;
utilities.lazyLoad(exports, ["Metric"], () => require("./metric"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SourceArgs, SourceState } from "./source";
export type Source = import("./source").Source;
export const Source: typeof import("./source").Source = null as any;
utilities.lazyLoad(exports, ["Source"], () => require("./source"));

export { SourceGroupArgs, SourceGroupState } from "./sourceGroup";
export type SourceGroup = import("./sourceGroup").SourceGroup;
export const SourceGroup: typeof import("./sourceGroup").SourceGroup = null as any;
utilities.lazyLoad(exports, ["SourceGroup"], () => require("./sourceGroup"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "logtail:index/metric:Metric":
                return new Metric(name, <any>undefined, { urn })
            case "logtail:index/source:Source":
                return new Source(name, <any>undefined, { urn })
            case "logtail:index/sourceGroup:SourceGroup":
                return new SourceGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("logtail", "index/metric", _module)
pulumi.runtime.registerResourceModule("logtail", "index/source", _module)
pulumi.runtime.registerResourceModule("logtail", "index/sourceGroup", _module)
pulumi.runtime.registerResourcePackage("logtail", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:logtail") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

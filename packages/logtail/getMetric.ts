// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMetric(args: GetMetricArgs, opts?: pulumi.InvokeOptions): Promise<GetMetricResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("logtail:index/getMetric:getMetric", {
        "name": args.name,
        "sourceId": args.sourceId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMetric.
 */
export interface GetMetricArgs {
    name: string;
    sourceId: string;
}

/**
 * A collection of values returned by getMetric.
 */
export interface GetMetricResult {
    readonly aggregations: string[];
    readonly id: string;
    readonly name: string;
    readonly sourceId: string;
    readonly sqlExpression: string;
    readonly teamName: string;
    readonly type: string;
}
export function getMetricOutput(args: GetMetricOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMetricResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("logtail:index/getMetric:getMetric", {
        "name": args.name,
        "sourceId": args.sourceId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMetric.
 */
export interface GetMetricOutputArgs {
    name: pulumi.Input<string>;
    sourceId: pulumi.Input<string>;
}

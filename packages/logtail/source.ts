// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Source extends pulumi.CustomResource {
    /**
     * Get an existing Source resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceState, opts?: pulumi.CustomResourceOptions): Source {
        return new Source(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logtail:index/source:Source';

    /**
     * Returns true if the given object is an instance of Source.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Source {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Source.__pulumiType;
    }

    /**
     * The time when this monitor group was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Optional custom bucket configuration for the source. When provided, all fields (name, endpoint, access_key_id,
     * secret_access_key) are required.
     */
    declare public readonly customBucket: pulumi.Output<outputs.SourceCustomBucket | undefined>;
    /**
     * Data region or private cluster name to create the source in. Permitted values for most plans are: `us_east`, `us_west`,
     * `germany`, `singapore`.
     */
    declare public readonly dataRegion: pulumi.Output<string>;
    /**
     * The host where the logs or metrics should be sent. See [documentation](https://betterstack.com/docs/logs/start/) for
     * your specific source platform for details.
     */
    declare public /*out*/ readonly ingestingHost: pulumi.Output<string>;
    /**
     * This property allows you to temporarily pause data ingesting for this source (e.g., when you are reaching your plan's
     * usage quota and you want to prioritize some sources over others).
     */
    declare public readonly ingestingPaused: pulumi.Output<boolean>;
    /**
     * Freeform text template for formatting Live tail output with columns wrapped in {column} brackets. Example: "PID:
     * {message_json.pid} {level} {message}"
     */
    declare public readonly liveTailPattern: pulumi.Output<string>;
    /**
     * Data retention for logs in days. There might be additional charges for longer retention.
     */
    declare public readonly logsRetention: pulumi.Output<number>;
    /**
     * Data retention for metrics in days. There might be additional charges for longer retention.
     */
    declare public readonly metricsRetention: pulumi.Output<number>;
    /**
     * The name of this source.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The platform of this source. This value can be set only when you're creating a new source. You can't update this value
     * later. Valid values are: - `apache2` - `aws_cloudwatch` - `aws_ecs` - `aws_elb` - `aws_fargate` - `azure_logs` -
     * `cloudflare_logpush` - `cloudflare_worker` - `datadog_agent` - `digitalocean` - `docker` - `dokku` - `dotnet` -
     * `elasticsearch` - `erlang` - `filebeat` - `flights` - `fluentbit` - `fluentd` - `fly_io` - `go` - `google_cloud_pubsub`
     * - `haproxy` - `heroku` - `http` - `java` - `javascript` - `kubernetes` - `logstash` - `minio` - `mongodb` - `mysql` -
     * `nginx` - `open_telemetry` - `php` - `postgresql` - `prometheus` - `prometheus_scrape` - `python` - `rabbitmq` - `redis`
     * - `render` - `rsyslog` - `ruby` - `syslog-ng` - `traefik` - `ubuntu` - `vector` - `vercel_integration`
     */
    declare public readonly platform: pulumi.Output<string>;
    /**
     * For scrape platform types, how often to scrape the URLs.
     */
    declare public readonly scrapeFrequencySecs: pulumi.Output<number | undefined>;
    /**
     * Basic auth password for scraping.
     */
    declare public readonly scrapeRequestBasicAuthPassword: pulumi.Output<string | undefined>;
    /**
     * Basic auth username for scraping.
     */
    declare public readonly scrapeRequestBasicAuthUser: pulumi.Output<string | undefined>;
    /**
     * An array of request headers, each containing `name` and `value` fields.
     */
    declare public readonly scrapeRequestHeaders: pulumi.Output<{[key: string]: string}[] | undefined>;
    /**
     * For scrape platform types, the set of urls to scrape.
     */
    declare public readonly scrapeUrls: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the source group this source belongs to.
     */
    declare public readonly sourceGroupId: pulumi.Output<number | undefined>;
    /**
     * The table name generated for this source.
     */
    declare public /*out*/ readonly tableName: pulumi.Output<string>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    declare public readonly teamName: pulumi.Output<string | undefined>;
    /**
     * The token of this source. This token is used to identify and route the data you will send to Better Stack.
     */
    declare public /*out*/ readonly token: pulumi.Output<string>;
    /**
     * The time when this monitor group was updated.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The VRL code that's used to transform events. Read more about [VRL
     * transformations](https://betterstack.com/docs/logs/using-logtail/transforming-ingested-data/logs-vrl/).
     */
    declare public readonly vrlTransformation: pulumi.Output<string | undefined>;

    /**
     * Create a Source resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceArgs | SourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["customBucket"] = state?.customBucket;
            resourceInputs["dataRegion"] = state?.dataRegion;
            resourceInputs["ingestingHost"] = state?.ingestingHost;
            resourceInputs["ingestingPaused"] = state?.ingestingPaused;
            resourceInputs["liveTailPattern"] = state?.liveTailPattern;
            resourceInputs["logsRetention"] = state?.logsRetention;
            resourceInputs["metricsRetention"] = state?.metricsRetention;
            resourceInputs["name"] = state?.name;
            resourceInputs["platform"] = state?.platform;
            resourceInputs["scrapeFrequencySecs"] = state?.scrapeFrequencySecs;
            resourceInputs["scrapeRequestBasicAuthPassword"] = state?.scrapeRequestBasicAuthPassword;
            resourceInputs["scrapeRequestBasicAuthUser"] = state?.scrapeRequestBasicAuthUser;
            resourceInputs["scrapeRequestHeaders"] = state?.scrapeRequestHeaders;
            resourceInputs["scrapeUrls"] = state?.scrapeUrls;
            resourceInputs["sourceGroupId"] = state?.sourceGroupId;
            resourceInputs["tableName"] = state?.tableName;
            resourceInputs["teamName"] = state?.teamName;
            resourceInputs["token"] = state?.token;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["vrlTransformation"] = state?.vrlTransformation;
        } else {
            const args = argsOrState as SourceArgs | undefined;
            if (args?.platform === undefined && !opts.urn) {
                throw new Error("Missing required property 'platform'");
            }
            resourceInputs["customBucket"] = args?.customBucket;
            resourceInputs["dataRegion"] = args?.dataRegion;
            resourceInputs["ingestingPaused"] = args?.ingestingPaused;
            resourceInputs["liveTailPattern"] = args?.liveTailPattern;
            resourceInputs["logsRetention"] = args?.logsRetention;
            resourceInputs["metricsRetention"] = args?.metricsRetention;
            resourceInputs["name"] = args?.name;
            resourceInputs["platform"] = args?.platform;
            resourceInputs["scrapeFrequencySecs"] = args?.scrapeFrequencySecs;
            resourceInputs["scrapeRequestBasicAuthPassword"] = args?.scrapeRequestBasicAuthPassword ? pulumi.secret(args.scrapeRequestBasicAuthPassword) : undefined;
            resourceInputs["scrapeRequestBasicAuthUser"] = args?.scrapeRequestBasicAuthUser;
            resourceInputs["scrapeRequestHeaders"] = args?.scrapeRequestHeaders;
            resourceInputs["scrapeUrls"] = args?.scrapeUrls;
            resourceInputs["sourceGroupId"] = args?.sourceGroupId;
            resourceInputs["teamName"] = args?.teamName;
            resourceInputs["vrlTransformation"] = args?.vrlTransformation;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["ingestingHost"] = undefined /*out*/;
            resourceInputs["tableName"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["scrapeRequestBasicAuthPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Source.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Source resources.
 */
export interface SourceState {
    /**
     * The time when this monitor group was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Optional custom bucket configuration for the source. When provided, all fields (name, endpoint, access_key_id,
     * secret_access_key) are required.
     */
    customBucket?: pulumi.Input<inputs.SourceCustomBucket>;
    /**
     * Data region or private cluster name to create the source in. Permitted values for most plans are: `us_east`, `us_west`,
     * `germany`, `singapore`.
     */
    dataRegion?: pulumi.Input<string>;
    /**
     * The host where the logs or metrics should be sent. See [documentation](https://betterstack.com/docs/logs/start/) for
     * your specific source platform for details.
     */
    ingestingHost?: pulumi.Input<string>;
    /**
     * This property allows you to temporarily pause data ingesting for this source (e.g., when you are reaching your plan's
     * usage quota and you want to prioritize some sources over others).
     */
    ingestingPaused?: pulumi.Input<boolean>;
    /**
     * Freeform text template for formatting Live tail output with columns wrapped in {column} brackets. Example: "PID:
     * {message_json.pid} {level} {message}"
     */
    liveTailPattern?: pulumi.Input<string>;
    /**
     * Data retention for logs in days. There might be additional charges for longer retention.
     */
    logsRetention?: pulumi.Input<number>;
    /**
     * Data retention for metrics in days. There might be additional charges for longer retention.
     */
    metricsRetention?: pulumi.Input<number>;
    /**
     * The name of this source.
     */
    name?: pulumi.Input<string>;
    /**
     * The platform of this source. This value can be set only when you're creating a new source. You can't update this value
     * later. Valid values are: - `apache2` - `aws_cloudwatch` - `aws_ecs` - `aws_elb` - `aws_fargate` - `azure_logs` -
     * `cloudflare_logpush` - `cloudflare_worker` - `datadog_agent` - `digitalocean` - `docker` - `dokku` - `dotnet` -
     * `elasticsearch` - `erlang` - `filebeat` - `flights` - `fluentbit` - `fluentd` - `fly_io` - `go` - `google_cloud_pubsub`
     * - `haproxy` - `heroku` - `http` - `java` - `javascript` - `kubernetes` - `logstash` - `minio` - `mongodb` - `mysql` -
     * `nginx` - `open_telemetry` - `php` - `postgresql` - `prometheus` - `prometheus_scrape` - `python` - `rabbitmq` - `redis`
     * - `render` - `rsyslog` - `ruby` - `syslog-ng` - `traefik` - `ubuntu` - `vector` - `vercel_integration`
     */
    platform?: pulumi.Input<string>;
    /**
     * For scrape platform types, how often to scrape the URLs.
     */
    scrapeFrequencySecs?: pulumi.Input<number>;
    /**
     * Basic auth password for scraping.
     */
    scrapeRequestBasicAuthPassword?: pulumi.Input<string>;
    /**
     * Basic auth username for scraping.
     */
    scrapeRequestBasicAuthUser?: pulumi.Input<string>;
    /**
     * An array of request headers, each containing `name` and `value` fields.
     */
    scrapeRequestHeaders?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * For scrape platform types, the set of urls to scrape.
     */
    scrapeUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the source group this source belongs to.
     */
    sourceGroupId?: pulumi.Input<number>;
    /**
     * The table name generated for this source.
     */
    tableName?: pulumi.Input<string>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    teamName?: pulumi.Input<string>;
    /**
     * The token of this source. This token is used to identify and route the data you will send to Better Stack.
     */
    token?: pulumi.Input<string>;
    /**
     * The time when this monitor group was updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The VRL code that's used to transform events. Read more about [VRL
     * transformations](https://betterstack.com/docs/logs/using-logtail/transforming-ingested-data/logs-vrl/).
     */
    vrlTransformation?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Source resource.
 */
export interface SourceArgs {
    /**
     * Optional custom bucket configuration for the source. When provided, all fields (name, endpoint, access_key_id,
     * secret_access_key) are required.
     */
    customBucket?: pulumi.Input<inputs.SourceCustomBucket>;
    /**
     * Data region or private cluster name to create the source in. Permitted values for most plans are: `us_east`, `us_west`,
     * `germany`, `singapore`.
     */
    dataRegion?: pulumi.Input<string>;
    /**
     * This property allows you to temporarily pause data ingesting for this source (e.g., when you are reaching your plan's
     * usage quota and you want to prioritize some sources over others).
     */
    ingestingPaused?: pulumi.Input<boolean>;
    /**
     * Freeform text template for formatting Live tail output with columns wrapped in {column} brackets. Example: "PID:
     * {message_json.pid} {level} {message}"
     */
    liveTailPattern?: pulumi.Input<string>;
    /**
     * Data retention for logs in days. There might be additional charges for longer retention.
     */
    logsRetention?: pulumi.Input<number>;
    /**
     * Data retention for metrics in days. There might be additional charges for longer retention.
     */
    metricsRetention?: pulumi.Input<number>;
    /**
     * The name of this source.
     */
    name?: pulumi.Input<string>;
    /**
     * The platform of this source. This value can be set only when you're creating a new source. You can't update this value
     * later. Valid values are: - `apache2` - `aws_cloudwatch` - `aws_ecs` - `aws_elb` - `aws_fargate` - `azure_logs` -
     * `cloudflare_logpush` - `cloudflare_worker` - `datadog_agent` - `digitalocean` - `docker` - `dokku` - `dotnet` -
     * `elasticsearch` - `erlang` - `filebeat` - `flights` - `fluentbit` - `fluentd` - `fly_io` - `go` - `google_cloud_pubsub`
     * - `haproxy` - `heroku` - `http` - `java` - `javascript` - `kubernetes` - `logstash` - `minio` - `mongodb` - `mysql` -
     * `nginx` - `open_telemetry` - `php` - `postgresql` - `prometheus` - `prometheus_scrape` - `python` - `rabbitmq` - `redis`
     * - `render` - `rsyslog` - `ruby` - `syslog-ng` - `traefik` - `ubuntu` - `vector` - `vercel_integration`
     */
    platform: pulumi.Input<string>;
    /**
     * For scrape platform types, how often to scrape the URLs.
     */
    scrapeFrequencySecs?: pulumi.Input<number>;
    /**
     * Basic auth password for scraping.
     */
    scrapeRequestBasicAuthPassword?: pulumi.Input<string>;
    /**
     * Basic auth username for scraping.
     */
    scrapeRequestBasicAuthUser?: pulumi.Input<string>;
    /**
     * An array of request headers, each containing `name` and `value` fields.
     */
    scrapeRequestHeaders?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * For scrape platform types, the set of urls to scrape.
     */
    scrapeUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the source group this source belongs to.
     */
    sourceGroupId?: pulumi.Input<number>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    teamName?: pulumi.Input<string>;
    /**
     * The VRL code that's used to transform events. Read more about [VRL
     * transformations](https://betterstack.com/docs/logs/using-logtail/transforming-ingested-data/logs-vrl/).
     */
    vrlTransformation?: pulumi.Input<string>;
}

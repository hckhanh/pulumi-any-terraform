// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Metric extends pulumi.CustomResource {
    /**
     * Get an existing Metric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricState, opts?: pulumi.CustomResourceOptions): Metric {
        return new Metric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'logtail:index/metric:Metric';

    /**
     * Returns true if the given object is an instance of Metric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Metric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Metric.__pulumiType;
    }

    /**
     * The list of aggregations to perform on the metric.
     */
    declare public readonly aggregations: pulumi.Output<string[]>;
    /**
     * The name of this metric.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of the source this metric belongs to.
     */
    declare public readonly sourceId: pulumi.Output<string>;
    /**
     * The SQL expression used to extract the metric value.
     */
    declare public readonly sqlExpression: pulumi.Output<string>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    declare public readonly teamName: pulumi.Output<string | undefined>;
    /**
     * The type of the metric.
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a Metric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricArgs | MetricState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricState | undefined;
            resourceInputs["aggregations"] = state?.aggregations;
            resourceInputs["name"] = state?.name;
            resourceInputs["sourceId"] = state?.sourceId;
            resourceInputs["sqlExpression"] = state?.sqlExpression;
            resourceInputs["teamName"] = state?.teamName;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as MetricArgs | undefined;
            if (args?.aggregations === undefined && !opts.urn) {
                throw new Error("Missing required property 'aggregations'");
            }
            if (args?.sourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceId'");
            }
            if (args?.sqlExpression === undefined && !opts.urn) {
                throw new Error("Missing required property 'sqlExpression'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["aggregations"] = args?.aggregations;
            resourceInputs["name"] = args?.name;
            resourceInputs["sourceId"] = args?.sourceId;
            resourceInputs["sqlExpression"] = args?.sqlExpression;
            resourceInputs["teamName"] = args?.teamName;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Metric.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Metric resources.
 */
export interface MetricState {
    /**
     * The list of aggregations to perform on the metric.
     */
    aggregations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of this metric.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the source this metric belongs to.
     */
    sourceId?: pulumi.Input<string>;
    /**
     * The SQL expression used to extract the metric value.
     */
    sqlExpression?: pulumi.Input<string>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    teamName?: pulumi.Input<string>;
    /**
     * The type of the metric.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Metric resource.
 */
export interface MetricArgs {
    /**
     * The list of aggregations to perform on the metric.
     */
    aggregations: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of this metric.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the source this metric belongs to.
     */
    sourceId: pulumi.Input<string>;
    /**
     * The SQL expression used to extract the metric value.
     */
    sqlExpression: pulumi.Input<string>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    teamName?: pulumi.Input<string>;
    /**
     * The type of the metric.
     */
    type: pulumi.Input<string>;
}

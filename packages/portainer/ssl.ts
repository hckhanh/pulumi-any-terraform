// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ssl extends pulumi.CustomResource {
    /**
     * Get an existing Ssl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslState, opts?: pulumi.CustomResourceOptions): Ssl {
        return new Ssl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/ssl:Ssl';

    /**
     * Returns true if the given object is an instance of Ssl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ssl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ssl.__pulumiType;
    }

    /**
     * SSL certificate content
     */
    declare public readonly cert: pulumi.Output<string>;
    /**
     * SSL client certificate content
     */
    declare public readonly clientCert: pulumi.Output<string | undefined>;
    /**
     * Whether HTTP should be enabled (true) or disabled (false)
     */
    declare public readonly httpEnabled: pulumi.Output<boolean>;
    /**
     * SSL private key content
     */
    declare public readonly key: pulumi.Output<string>;
    declare public readonly sslId: pulumi.Output<string>;

    /**
     * Create a Ssl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslArgs | SslState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslState | undefined;
            resourceInputs["cert"] = state?.cert;
            resourceInputs["clientCert"] = state?.clientCert;
            resourceInputs["httpEnabled"] = state?.httpEnabled;
            resourceInputs["key"] = state?.key;
            resourceInputs["sslId"] = state?.sslId;
        } else {
            const args = argsOrState as SslArgs | undefined;
            if (args?.cert === undefined && !opts.urn) {
                throw new Error("Missing required property 'cert'");
            }
            if (args?.httpEnabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'httpEnabled'");
            }
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["cert"] = args?.cert ? pulumi.secret(args.cert) : undefined;
            resourceInputs["clientCert"] = args?.clientCert ? pulumi.secret(args.clientCert) : undefined;
            resourceInputs["httpEnabled"] = args?.httpEnabled;
            resourceInputs["key"] = args?.key ? pulumi.secret(args.key) : undefined;
            resourceInputs["sslId"] = args?.sslId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["cert", "clientCert", "key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Ssl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ssl resources.
 */
export interface SslState {
    /**
     * SSL certificate content
     */
    cert?: pulumi.Input<string>;
    /**
     * SSL client certificate content
     */
    clientCert?: pulumi.Input<string>;
    /**
     * Whether HTTP should be enabled (true) or disabled (false)
     */
    httpEnabled?: pulumi.Input<boolean>;
    /**
     * SSL private key content
     */
    key?: pulumi.Input<string>;
    sslId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ssl resource.
 */
export interface SslArgs {
    /**
     * SSL certificate content
     */
    cert: pulumi.Input<string>;
    /**
     * SSL client certificate content
     */
    clientCert?: pulumi.Input<string>;
    /**
     * Whether HTTP should be enabled (true) or disabled (false)
     */
    httpEnabled: pulumi.Input<boolean>;
    /**
     * SSL private key content
     */
    key: pulumi.Input<string>;
    sslId?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ComposeConvert extends pulumi.CustomResource {
    /**
     * Get an existing ComposeConvert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComposeConvertState, opts?: pulumi.CustomResourceOptions): ComposeConvert {
        return new ComposeConvert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/composeConvert:ComposeConvert';

    /**
     * Returns true if the given object is an instance of ComposeConvert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComposeConvert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComposeConvert.__pulumiType;
    }

    /**
     * The content of the docker-compose.yml file.
     */
    declare public readonly composeContent: pulumi.Output<string>;
    declare public readonly composeConvertId: pulumi.Output<string>;
    /**
     * Map of generated Kubernetes YAML manifests.
     */
    declare public /*out*/ readonly manifests: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a ComposeConvert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComposeConvertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComposeConvertArgs | ComposeConvertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComposeConvertState | undefined;
            resourceInputs["composeContent"] = state?.composeContent;
            resourceInputs["composeConvertId"] = state?.composeConvertId;
            resourceInputs["manifests"] = state?.manifests;
        } else {
            const args = argsOrState as ComposeConvertArgs | undefined;
            if (args?.composeContent === undefined && !opts.urn) {
                throw new Error("Missing required property 'composeContent'");
            }
            resourceInputs["composeContent"] = args?.composeContent;
            resourceInputs["composeConvertId"] = args?.composeConvertId;
            resourceInputs["manifests"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComposeConvert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComposeConvert resources.
 */
export interface ComposeConvertState {
    /**
     * The content of the docker-compose.yml file.
     */
    composeContent?: pulumi.Input<string>;
    composeConvertId?: pulumi.Input<string>;
    /**
     * Map of generated Kubernetes YAML manifests.
     */
    manifests?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ComposeConvert resource.
 */
export interface ComposeConvertArgs {
    /**
     * The content of the docker-compose.yml file.
     */
    composeContent: pulumi.Input<string>;
    composeConvertId?: pulumi.Input<string>;
}

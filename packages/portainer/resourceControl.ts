// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ResourceControl extends pulumi.CustomResource {
    /**
     * Get an existing ResourceControl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceControlState, opts?: pulumi.CustomResourceOptions): ResourceControl {
        return new ResourceControl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/resourceControl:ResourceControl';

    /**
     * Returns true if the given object is an instance of ResourceControl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceControl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceControl.__pulumiType;
    }

    declare public readonly administratorsOnly: pulumi.Output<boolean | undefined>;
    declare public readonly public: pulumi.Output<boolean | undefined>;
    declare public readonly resourceControlId: pulumi.Output<string>;
    declare public readonly resourceId: pulumi.Output<string>;
    declare public readonly teams: pulumi.Output<number[] | undefined>;
    declare public readonly type: pulumi.Output<number | undefined>;
    declare public readonly users: pulumi.Output<number[] | undefined>;

    /**
     * Create a ResourceControl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceControlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceControlArgs | ResourceControlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceControlState | undefined;
            resourceInputs["administratorsOnly"] = state?.administratorsOnly;
            resourceInputs["public"] = state?.public;
            resourceInputs["resourceControlId"] = state?.resourceControlId;
            resourceInputs["resourceId"] = state?.resourceId;
            resourceInputs["teams"] = state?.teams;
            resourceInputs["type"] = state?.type;
            resourceInputs["users"] = state?.users;
        } else {
            const args = argsOrState as ResourceControlArgs | undefined;
            if (args?.resourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["administratorsOnly"] = args?.administratorsOnly;
            resourceInputs["public"] = args?.public;
            resourceInputs["resourceControlId"] = args?.resourceControlId;
            resourceInputs["resourceId"] = args?.resourceId;
            resourceInputs["teams"] = args?.teams;
            resourceInputs["type"] = args?.type;
            resourceInputs["users"] = args?.users;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceControl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResourceControl resources.
 */
export interface ResourceControlState {
    administratorsOnly?: pulumi.Input<boolean>;
    public?: pulumi.Input<boolean>;
    resourceControlId?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    teams?: pulumi.Input<pulumi.Input<number>[]>;
    type?: pulumi.Input<number>;
    users?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a ResourceControl resource.
 */
export interface ResourceControlArgs {
    administratorsOnly?: pulumi.Input<boolean>;
    public?: pulumi.Input<boolean>;
    resourceControlId?: pulumi.Input<string>;
    resourceId: pulumi.Input<string>;
    teams?: pulumi.Input<pulumi.Input<number>[]>;
    type?: pulumi.Input<number>;
    users?: pulumi.Input<pulumi.Input<number>[]>;
}

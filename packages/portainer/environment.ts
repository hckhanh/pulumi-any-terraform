// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentState, opts?: pulumi.CustomResourceOptions): Environment {
        return new Environment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/environment:Environment';

    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Environment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }

    declare public /*out*/ readonly edgeId: pulumi.Output<string>;
    declare public /*out*/ readonly edgeKey: pulumi.Output<string>;
    declare public readonly environmentAddress: pulumi.Output<string>;
    declare public readonly environmentId: pulumi.Output<string>;
    /**
     * ID of the Portainer endpoint group. Default is 1 (Unassigned).
     */
    declare public readonly groupId: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * List of tag IDs to assign to the environment.
     */
    declare public readonly tagIds: pulumi.Output<number[] | undefined>;
    /**
     * Map of team IDs to role IDs (e.g. teamID > roleID)
     */
    declare public readonly teamAccessPolicies: pulumi.Output<{[key: string]: number} | undefined>;
    declare public readonly tlsEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly tlsSkipClientVerify: pulumi.Output<boolean | undefined>;
    declare public readonly tlsSkipVerify: pulumi.Output<boolean | undefined>;
    /**
     * Environment type: 1 = Docker, 2 = Agent, 3 = Azure, 4 = Edge Agent, 5 = Kubernetes
     */
    declare public readonly type: pulumi.Output<number>;
    /**
     * Map of user IDs to role IDs (e.g. userID > roleID)
     */
    declare public readonly userAccessPolicies: pulumi.Output<{[key: string]: number} | undefined>;

    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentArgs | EnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentState | undefined;
            resourceInputs["edgeId"] = state?.edgeId;
            resourceInputs["edgeKey"] = state?.edgeKey;
            resourceInputs["environmentAddress"] = state?.environmentAddress;
            resourceInputs["environmentId"] = state?.environmentId;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["name"] = state?.name;
            resourceInputs["tagIds"] = state?.tagIds;
            resourceInputs["teamAccessPolicies"] = state?.teamAccessPolicies;
            resourceInputs["tlsEnabled"] = state?.tlsEnabled;
            resourceInputs["tlsSkipClientVerify"] = state?.tlsSkipClientVerify;
            resourceInputs["tlsSkipVerify"] = state?.tlsSkipVerify;
            resourceInputs["type"] = state?.type;
            resourceInputs["userAccessPolicies"] = state?.userAccessPolicies;
        } else {
            const args = argsOrState as EnvironmentArgs | undefined;
            if (args?.environmentAddress === undefined && !opts.urn) {
                throw new Error("Missing required property 'environmentAddress'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["environmentAddress"] = args?.environmentAddress;
            resourceInputs["environmentId"] = args?.environmentId;
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["name"] = args?.name;
            resourceInputs["tagIds"] = args?.tagIds;
            resourceInputs["teamAccessPolicies"] = args?.teamAccessPolicies;
            resourceInputs["tlsEnabled"] = args?.tlsEnabled;
            resourceInputs["tlsSkipClientVerify"] = args?.tlsSkipClientVerify;
            resourceInputs["tlsSkipVerify"] = args?.tlsSkipVerify;
            resourceInputs["type"] = args?.type;
            resourceInputs["userAccessPolicies"] = args?.userAccessPolicies;
            resourceInputs["edgeId"] = undefined /*out*/;
            resourceInputs["edgeKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Environment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Environment resources.
 */
export interface EnvironmentState {
    edgeId?: pulumi.Input<string>;
    edgeKey?: pulumi.Input<string>;
    environmentAddress?: pulumi.Input<string>;
    environmentId?: pulumi.Input<string>;
    /**
     * ID of the Portainer endpoint group. Default is 1 (Unassigned).
     */
    groupId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * List of tag IDs to assign to the environment.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Map of team IDs to role IDs (e.g. teamID > roleID)
     */
    teamAccessPolicies?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    tlsEnabled?: pulumi.Input<boolean>;
    tlsSkipClientVerify?: pulumi.Input<boolean>;
    tlsSkipVerify?: pulumi.Input<boolean>;
    /**
     * Environment type: 1 = Docker, 2 = Agent, 3 = Azure, 4 = Edge Agent, 5 = Kubernetes
     */
    type?: pulumi.Input<number>;
    /**
     * Map of user IDs to role IDs (e.g. userID > roleID)
     */
    userAccessPolicies?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
}

/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    environmentAddress: pulumi.Input<string>;
    environmentId?: pulumi.Input<string>;
    /**
     * ID of the Portainer endpoint group. Default is 1 (Unassigned).
     */
    groupId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * List of tag IDs to assign to the environment.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Map of team IDs to role IDs (e.g. teamID > roleID)
     */
    teamAccessPolicies?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    tlsEnabled?: pulumi.Input<boolean>;
    tlsSkipClientVerify?: pulumi.Input<boolean>;
    tlsSkipVerify?: pulumi.Input<boolean>;
    /**
     * Environment type: 1 = Docker, 2 = Agent, 3 = Azure, 4 = Edge Agent, 5 = Kubernetes
     */
    type: pulumi.Input<number>;
    /**
     * Map of user IDs to role IDs (e.g. userID > roleID)
     */
    userAccessPolicies?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Registry extends pulumi.CustomResource {
    /**
     * Get an existing Registry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryState, opts?: pulumi.CustomResourceOptions): Registry {
        return new Registry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/registry:Registry';

    /**
     * Returns true if the given object is an instance of Registry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Registry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Registry.__pulumiType;
    }

    declare public readonly authentication: pulumi.Output<boolean | undefined>;
    declare public readonly awsRegion: pulumi.Output<string | undefined>;
    declare public readonly baseUrl: pulumi.Output<string | undefined>;
    declare public readonly instanceUrl: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly password: pulumi.Output<string | undefined>;
    declare public readonly registryId: pulumi.Output<string>;
    declare public readonly type: pulumi.Output<number>;
    declare public readonly url: pulumi.Output<string>;
    declare public readonly username: pulumi.Output<string | undefined>;

    /**
     * Create a Registry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryArgs | RegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryState | undefined;
            resourceInputs["authentication"] = state?.authentication;
            resourceInputs["awsRegion"] = state?.awsRegion;
            resourceInputs["baseUrl"] = state?.baseUrl;
            resourceInputs["instanceUrl"] = state?.instanceUrl;
            resourceInputs["name"] = state?.name;
            resourceInputs["password"] = state?.password;
            resourceInputs["registryId"] = state?.registryId;
            resourceInputs["type"] = state?.type;
            resourceInputs["url"] = state?.url;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as RegistryArgs | undefined;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["authentication"] = args?.authentication;
            resourceInputs["awsRegion"] = args?.awsRegion;
            resourceInputs["baseUrl"] = args?.baseUrl;
            resourceInputs["instanceUrl"] = args?.instanceUrl;
            resourceInputs["name"] = args?.name;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["registryId"] = args?.registryId;
            resourceInputs["type"] = args?.type;
            resourceInputs["url"] = args?.url;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Registry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Registry resources.
 */
export interface RegistryState {
    authentication?: pulumi.Input<boolean>;
    awsRegion?: pulumi.Input<string>;
    baseUrl?: pulumi.Input<string>;
    instanceUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    registryId?: pulumi.Input<string>;
    type?: pulumi.Input<number>;
    url?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Registry resource.
 */
export interface RegistryArgs {
    authentication?: pulumi.Input<boolean>;
    awsRegion?: pulumi.Input<string>;
    baseUrl?: pulumi.Input<string>;
    instanceUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    registryId?: pulumi.Input<string>;
    type: pulumi.Input<number>;
    url: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

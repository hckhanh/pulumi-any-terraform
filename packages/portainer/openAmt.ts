// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OpenAmt extends pulumi.CustomResource {
    /**
     * Get an existing OpenAmt resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpenAmtState, opts?: pulumi.CustomResourceOptions): OpenAmt {
        return new OpenAmt(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/openAmt:OpenAmt';

    /**
     * Returns true if the given object is an instance of OpenAmt.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpenAmt {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenAmt.__pulumiType;
    }

    declare public readonly certFileContent: pulumi.Output<string>;
    declare public readonly certFileName: pulumi.Output<string>;
    declare public readonly certFilePassword: pulumi.Output<string>;
    declare public readonly domainName: pulumi.Output<string>;
    declare public readonly enabled: pulumi.Output<boolean>;
    declare public readonly mpspassword: pulumi.Output<string>;
    declare public readonly mpsserver: pulumi.Output<string>;
    declare public readonly mpsuser: pulumi.Output<string>;
    declare public readonly openAmtId: pulumi.Output<string>;

    /**
     * Create a OpenAmt resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OpenAmtArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpenAmtArgs | OpenAmtState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpenAmtState | undefined;
            resourceInputs["certFileContent"] = state?.certFileContent;
            resourceInputs["certFileName"] = state?.certFileName;
            resourceInputs["certFilePassword"] = state?.certFilePassword;
            resourceInputs["domainName"] = state?.domainName;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["mpspassword"] = state?.mpspassword;
            resourceInputs["mpsserver"] = state?.mpsserver;
            resourceInputs["mpsuser"] = state?.mpsuser;
            resourceInputs["openAmtId"] = state?.openAmtId;
        } else {
            const args = argsOrState as OpenAmtArgs | undefined;
            if (args?.certFileContent === undefined && !opts.urn) {
                throw new Error("Missing required property 'certFileContent'");
            }
            if (args?.certFileName === undefined && !opts.urn) {
                throw new Error("Missing required property 'certFileName'");
            }
            if (args?.certFilePassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'certFilePassword'");
            }
            if (args?.domainName === undefined && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.mpspassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'mpspassword'");
            }
            if (args?.mpsserver === undefined && !opts.urn) {
                throw new Error("Missing required property 'mpsserver'");
            }
            if (args?.mpsuser === undefined && !opts.urn) {
                throw new Error("Missing required property 'mpsuser'");
            }
            resourceInputs["certFileContent"] = args?.certFileContent ? pulumi.secret(args.certFileContent) : undefined;
            resourceInputs["certFileName"] = args?.certFileName;
            resourceInputs["certFilePassword"] = args?.certFilePassword ? pulumi.secret(args.certFilePassword) : undefined;
            resourceInputs["domainName"] = args?.domainName;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["mpspassword"] = args?.mpspassword ? pulumi.secret(args.mpspassword) : undefined;
            resourceInputs["mpsserver"] = args?.mpsserver;
            resourceInputs["mpsuser"] = args?.mpsuser;
            resourceInputs["openAmtId"] = args?.openAmtId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["certFileContent", "certFilePassword", "mpspassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OpenAmt.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OpenAmt resources.
 */
export interface OpenAmtState {
    certFileContent?: pulumi.Input<string>;
    certFileName?: pulumi.Input<string>;
    certFilePassword?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    mpspassword?: pulumi.Input<string>;
    mpsserver?: pulumi.Input<string>;
    mpsuser?: pulumi.Input<string>;
    openAmtId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OpenAmt resource.
 */
export interface OpenAmtArgs {
    certFileContent: pulumi.Input<string>;
    certFileName: pulumi.Input<string>;
    certFilePassword: pulumi.Input<string>;
    domainName: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
    mpspassword: pulumi.Input<string>;
    mpsserver: pulumi.Input<string>;
    mpsuser: pulumi.Input<string>;
    openAmtId?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EdgeUpdateSchedules extends pulumi.CustomResource {
    /**
     * Get an existing EdgeUpdateSchedules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgeUpdateSchedulesState, opts?: pulumi.CustomResourceOptions): EdgeUpdateSchedules {
        return new EdgeUpdateSchedules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/edgeUpdateSchedules:EdgeUpdateSchedules';

    /**
     * Returns true if the given object is an instance of EdgeUpdateSchedules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgeUpdateSchedules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgeUpdateSchedules.__pulumiType;
    }

    declare public readonly agentImage: pulumi.Output<string>;
    declare public readonly edgeUpdateSchedulesId: pulumi.Output<string>;
    declare public readonly groupIds: pulumi.Output<number[]>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly registryId: pulumi.Output<number>;
    /**
     * Time in RFC3339 format
     */
    declare public readonly scheduledTime: pulumi.Output<string>;
    /**
     * 0 = update, 1 = rollback
     */
    declare public readonly type: pulumi.Output<number>;
    declare public readonly updaterImage: pulumi.Output<string>;

    /**
     * Create a EdgeUpdateSchedules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgeUpdateSchedulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgeUpdateSchedulesArgs | EdgeUpdateSchedulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgeUpdateSchedulesState | undefined;
            resourceInputs["agentImage"] = state?.agentImage;
            resourceInputs["edgeUpdateSchedulesId"] = state?.edgeUpdateSchedulesId;
            resourceInputs["groupIds"] = state?.groupIds;
            resourceInputs["name"] = state?.name;
            resourceInputs["registryId"] = state?.registryId;
            resourceInputs["scheduledTime"] = state?.scheduledTime;
            resourceInputs["type"] = state?.type;
            resourceInputs["updaterImage"] = state?.updaterImage;
        } else {
            const args = argsOrState as EdgeUpdateSchedulesArgs | undefined;
            if (args?.agentImage === undefined && !opts.urn) {
                throw new Error("Missing required property 'agentImage'");
            }
            if (args?.groupIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupIds'");
            }
            if (args?.registryId === undefined && !opts.urn) {
                throw new Error("Missing required property 'registryId'");
            }
            if (args?.scheduledTime === undefined && !opts.urn) {
                throw new Error("Missing required property 'scheduledTime'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.updaterImage === undefined && !opts.urn) {
                throw new Error("Missing required property 'updaterImage'");
            }
            resourceInputs["agentImage"] = args?.agentImage;
            resourceInputs["edgeUpdateSchedulesId"] = args?.edgeUpdateSchedulesId;
            resourceInputs["groupIds"] = args?.groupIds;
            resourceInputs["name"] = args?.name;
            resourceInputs["registryId"] = args?.registryId;
            resourceInputs["scheduledTime"] = args?.scheduledTime;
            resourceInputs["type"] = args?.type;
            resourceInputs["updaterImage"] = args?.updaterImage;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EdgeUpdateSchedules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EdgeUpdateSchedules resources.
 */
export interface EdgeUpdateSchedulesState {
    agentImage?: pulumi.Input<string>;
    edgeUpdateSchedulesId?: pulumi.Input<string>;
    groupIds?: pulumi.Input<pulumi.Input<number>[]>;
    name?: pulumi.Input<string>;
    registryId?: pulumi.Input<number>;
    /**
     * Time in RFC3339 format
     */
    scheduledTime?: pulumi.Input<string>;
    /**
     * 0 = update, 1 = rollback
     */
    type?: pulumi.Input<number>;
    updaterImage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EdgeUpdateSchedules resource.
 */
export interface EdgeUpdateSchedulesArgs {
    agentImage: pulumi.Input<string>;
    edgeUpdateSchedulesId?: pulumi.Input<string>;
    groupIds: pulumi.Input<pulumi.Input<number>[]>;
    name?: pulumi.Input<string>;
    registryId: pulumi.Input<number>;
    /**
     * Time in RFC3339 format
     */
    scheduledTime: pulumi.Input<string>;
    /**
     * 0 = update, 1 = rollback
     */
    type: pulumi.Input<number>;
    updaterImage: pulumi.Input<string>;
}

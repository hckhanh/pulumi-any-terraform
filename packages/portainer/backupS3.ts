// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BackupS3 extends pulumi.CustomResource {
    /**
     * Get an existing BackupS3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupS3State, opts?: pulumi.CustomResourceOptions): BackupS3 {
        return new BackupS3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/backupS3:BackupS3';

    /**
     * Returns true if the given object is an instance of BackupS3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupS3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupS3.__pulumiType;
    }

    declare public readonly accessKeyId: pulumi.Output<string>;
    declare public readonly backupS3Id: pulumi.Output<string>;
    declare public readonly bucketName: pulumi.Output<string>;
    declare public readonly cronRule: pulumi.Output<string | undefined>;
    declare public readonly password: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly s3CompatibleHost: pulumi.Output<string>;
    declare public readonly secretAccessKey: pulumi.Output<string>;

    /**
     * Create a BackupS3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupS3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupS3Args | BackupS3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupS3State | undefined;
            resourceInputs["accessKeyId"] = state?.accessKeyId;
            resourceInputs["backupS3Id"] = state?.backupS3Id;
            resourceInputs["bucketName"] = state?.bucketName;
            resourceInputs["cronRule"] = state?.cronRule;
            resourceInputs["password"] = state?.password;
            resourceInputs["region"] = state?.region;
            resourceInputs["s3CompatibleHost"] = state?.s3CompatibleHost;
            resourceInputs["secretAccessKey"] = state?.secretAccessKey;
        } else {
            const args = argsOrState as BackupS3Args | undefined;
            if (args?.accessKeyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accessKeyId'");
            }
            if (args?.bucketName === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if (args?.s3CompatibleHost === undefined && !opts.urn) {
                throw new Error("Missing required property 's3CompatibleHost'");
            }
            if (args?.secretAccessKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretAccessKey'");
            }
            resourceInputs["accessKeyId"] = args?.accessKeyId ? pulumi.secret(args.accessKeyId) : undefined;
            resourceInputs["backupS3Id"] = args?.backupS3Id;
            resourceInputs["bucketName"] = args?.bucketName;
            resourceInputs["cronRule"] = args?.cronRule;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["region"] = args?.region;
            resourceInputs["s3CompatibleHost"] = args?.s3CompatibleHost;
            resourceInputs["secretAccessKey"] = args?.secretAccessKey ? pulumi.secret(args.secretAccessKey) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKeyId", "password", "secretAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BackupS3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BackupS3 resources.
 */
export interface BackupS3State {
    accessKeyId?: pulumi.Input<string>;
    backupS3Id?: pulumi.Input<string>;
    bucketName?: pulumi.Input<string>;
    cronRule?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    s3CompatibleHost?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackupS3 resource.
 */
export interface BackupS3Args {
    accessKeyId: pulumi.Input<string>;
    backupS3Id?: pulumi.Input<string>;
    bucketName: pulumi.Input<string>;
    cronRule?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    region: pulumi.Input<string>;
    s3CompatibleHost: pulumi.Input<string>;
    secretAccessKey: pulumi.Input<string>;
}

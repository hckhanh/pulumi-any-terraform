// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AuthArgs, AuthState } from "./auth";
export type Auth = import("./auth").Auth;
export const Auth: typeof import("./auth").Auth = null as any;
utilities.lazyLoad(exports, ["Auth"], () => require("./auth"));

export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { BackupS3Args, BackupS3State } from "./backupS3";
export type BackupS3 = import("./backupS3").BackupS3;
export const BackupS3: typeof import("./backupS3").BackupS3 = null as any;
utilities.lazyLoad(exports, ["BackupS3"], () => require("./backupS3"));

export { ChatArgs, ChatState } from "./chat";
export type Chat = import("./chat").Chat;
export const Chat: typeof import("./chat").Chat = null as any;
utilities.lazyLoad(exports, ["Chat"], () => require("./chat"));

export { CloudCredentialsArgs, CloudCredentialsState } from "./cloudCredentials";
export type CloudCredentials = import("./cloudCredentials").CloudCredentials;
export const CloudCredentials: typeof import("./cloudCredentials").CloudCredentials = null as any;
utilities.lazyLoad(exports, ["CloudCredentials"], () => require("./cloudCredentials"));

export { CloudProviderProvisionArgs, CloudProviderProvisionState } from "./cloudProviderProvision";
export type CloudProviderProvision = import("./cloudProviderProvision").CloudProviderProvision;
export const CloudProviderProvision: typeof import("./cloudProviderProvision").CloudProviderProvision = null as any;
utilities.lazyLoad(exports, ["CloudProviderProvision"], () => require("./cloudProviderProvision"));

export { ComposeConvertArgs, ComposeConvertState } from "./composeConvert";
export type ComposeConvert = import("./composeConvert").ComposeConvert;
export const ComposeConvert: typeof import("./composeConvert").ComposeConvert = null as any;
utilities.lazyLoad(exports, ["ComposeConvert"], () => require("./composeConvert"));

export { ContainerExecArgs, ContainerExecState } from "./containerExec";
export type ContainerExec = import("./containerExec").ContainerExec;
export const ContainerExec: typeof import("./containerExec").ContainerExec = null as any;
utilities.lazyLoad(exports, ["ContainerExec"], () => require("./containerExec"));

export { CustomTemplateArgs, CustomTemplateState } from "./customTemplate";
export type CustomTemplate = import("./customTemplate").CustomTemplate;
export const CustomTemplate: typeof import("./customTemplate").CustomTemplate = null as any;
utilities.lazyLoad(exports, ["CustomTemplate"], () => require("./customTemplate"));

export { DockerConfigArgs, DockerConfigState } from "./dockerConfig";
export type DockerConfig = import("./dockerConfig").DockerConfig;
export const DockerConfig: typeof import("./dockerConfig").DockerConfig = null as any;
utilities.lazyLoad(exports, ["DockerConfig"], () => require("./dockerConfig"));

export { DockerImageArgs, DockerImageState } from "./dockerImage";
export type DockerImage = import("./dockerImage").DockerImage;
export const DockerImage: typeof import("./dockerImage").DockerImage = null as any;
utilities.lazyLoad(exports, ["DockerImage"], () => require("./dockerImage"));

export { DockerNetworkArgs, DockerNetworkState } from "./dockerNetwork";
export type DockerNetwork = import("./dockerNetwork").DockerNetwork;
export const DockerNetwork: typeof import("./dockerNetwork").DockerNetwork = null as any;
utilities.lazyLoad(exports, ["DockerNetwork"], () => require("./dockerNetwork"));

export { DockerNodeArgs, DockerNodeState } from "./dockerNode";
export type DockerNode = import("./dockerNode").DockerNode;
export const DockerNode: typeof import("./dockerNode").DockerNode = null as any;
utilities.lazyLoad(exports, ["DockerNode"], () => require("./dockerNode"));

export { DockerPluginArgs, DockerPluginState } from "./dockerPlugin";
export type DockerPlugin = import("./dockerPlugin").DockerPlugin;
export const DockerPlugin: typeof import("./dockerPlugin").DockerPlugin = null as any;
utilities.lazyLoad(exports, ["DockerPlugin"], () => require("./dockerPlugin"));

export { DockerSecretArgs, DockerSecretState } from "./dockerSecret";
export type DockerSecret = import("./dockerSecret").DockerSecret;
export const DockerSecret: typeof import("./dockerSecret").DockerSecret = null as any;
utilities.lazyLoad(exports, ["DockerSecret"], () => require("./dockerSecret"));

export { DockerVolumeArgs, DockerVolumeState } from "./dockerVolume";
export type DockerVolume = import("./dockerVolume").DockerVolume;
export const DockerVolume: typeof import("./dockerVolume").DockerVolume = null as any;
utilities.lazyLoad(exports, ["DockerVolume"], () => require("./dockerVolume"));

export { EdgeConfigurationsArgs, EdgeConfigurationsState } from "./edgeConfigurations";
export type EdgeConfigurations = import("./edgeConfigurations").EdgeConfigurations;
export const EdgeConfigurations: typeof import("./edgeConfigurations").EdgeConfigurations = null as any;
utilities.lazyLoad(exports, ["EdgeConfigurations"], () => require("./edgeConfigurations"));

export { EdgeGroupArgs, EdgeGroupState } from "./edgeGroup";
export type EdgeGroup = import("./edgeGroup").EdgeGroup;
export const EdgeGroup: typeof import("./edgeGroup").EdgeGroup = null as any;
utilities.lazyLoad(exports, ["EdgeGroup"], () => require("./edgeGroup"));

export { EdgeJobArgs, EdgeJobState } from "./edgeJob";
export type EdgeJob = import("./edgeJob").EdgeJob;
export const EdgeJob: typeof import("./edgeJob").EdgeJob = null as any;
utilities.lazyLoad(exports, ["EdgeJob"], () => require("./edgeJob"));

export { EdgeStackArgs, EdgeStackState } from "./edgeStack";
export type EdgeStack = import("./edgeStack").EdgeStack;
export const EdgeStack: typeof import("./edgeStack").EdgeStack = null as any;
utilities.lazyLoad(exports, ["EdgeStack"], () => require("./edgeStack"));

export { EdgeStackWebhookArgs, EdgeStackWebhookState } from "./edgeStackWebhook";
export type EdgeStackWebhook = import("./edgeStackWebhook").EdgeStackWebhook;
export const EdgeStackWebhook: typeof import("./edgeStackWebhook").EdgeStackWebhook = null as any;
utilities.lazyLoad(exports, ["EdgeStackWebhook"], () => require("./edgeStackWebhook"));

export { EdgeUpdateSchedulesArgs, EdgeUpdateSchedulesState } from "./edgeUpdateSchedules";
export type EdgeUpdateSchedules = import("./edgeUpdateSchedules").EdgeUpdateSchedules;
export const EdgeUpdateSchedules: typeof import("./edgeUpdateSchedules").EdgeUpdateSchedules = null as any;
utilities.lazyLoad(exports, ["EdgeUpdateSchedules"], () => require("./edgeUpdateSchedules"));

export { EndpointAssociationArgs, EndpointAssociationState } from "./endpointAssociation";
export type EndpointAssociation = import("./endpointAssociation").EndpointAssociation;
export const EndpointAssociation: typeof import("./endpointAssociation").EndpointAssociation = null as any;
utilities.lazyLoad(exports, ["EndpointAssociation"], () => require("./endpointAssociation"));

export { EndpointGroupArgs, EndpointGroupState } from "./endpointGroup";
export type EndpointGroup = import("./endpointGroup").EndpointGroup;
export const EndpointGroup: typeof import("./endpointGroup").EndpointGroup = null as any;
utilities.lazyLoad(exports, ["EndpointGroup"], () => require("./endpointGroup"));

export { EndpointServiceUpdateArgs, EndpointServiceUpdateState } from "./endpointServiceUpdate";
export type EndpointServiceUpdate = import("./endpointServiceUpdate").EndpointServiceUpdate;
export const EndpointServiceUpdate: typeof import("./endpointServiceUpdate").EndpointServiceUpdate = null as any;
utilities.lazyLoad(exports, ["EndpointServiceUpdate"], () => require("./endpointServiceUpdate"));

export { EndpointSettingsArgs, EndpointSettingsState } from "./endpointSettings";
export type EndpointSettings = import("./endpointSettings").EndpointSettings;
export const EndpointSettings: typeof import("./endpointSettings").EndpointSettings = null as any;
utilities.lazyLoad(exports, ["EndpointSettings"], () => require("./endpointSettings"));

export { EndpointSnapshotArgs, EndpointSnapshotState } from "./endpointSnapshot";
export type EndpointSnapshot = import("./endpointSnapshot").EndpointSnapshot;
export const EndpointSnapshot: typeof import("./endpointSnapshot").EndpointSnapshot = null as any;
utilities.lazyLoad(exports, ["EndpointSnapshot"], () => require("./endpointSnapshot"));

export { EndpointsEdgeGenerateKeyArgs, EndpointsEdgeGenerateKeyState } from "./endpointsEdgeGenerateKey";
export type EndpointsEdgeGenerateKey = import("./endpointsEdgeGenerateKey").EndpointsEdgeGenerateKey;
export const EndpointsEdgeGenerateKey: typeof import("./endpointsEdgeGenerateKey").EndpointsEdgeGenerateKey = null as any;
utilities.lazyLoad(exports, ["EndpointsEdgeGenerateKey"], () => require("./endpointsEdgeGenerateKey"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { KubernetesApplicationArgs, KubernetesApplicationState } from "./kubernetesApplication";
export type KubernetesApplication = import("./kubernetesApplication").KubernetesApplication;
export const KubernetesApplication: typeof import("./kubernetesApplication").KubernetesApplication = null as any;
utilities.lazyLoad(exports, ["KubernetesApplication"], () => require("./kubernetesApplication"));

export { KubernetesClusterroleArgs, KubernetesClusterroleState } from "./kubernetesClusterrole";
export type KubernetesClusterrole = import("./kubernetesClusterrole").KubernetesClusterrole;
export const KubernetesClusterrole: typeof import("./kubernetesClusterrole").KubernetesClusterrole = null as any;
utilities.lazyLoad(exports, ["KubernetesClusterrole"], () => require("./kubernetesClusterrole"));

export { KubernetesClusterrolebindingArgs, KubernetesClusterrolebindingState } from "./kubernetesClusterrolebinding";
export type KubernetesClusterrolebinding = import("./kubernetesClusterrolebinding").KubernetesClusterrolebinding;
export const KubernetesClusterrolebinding: typeof import("./kubernetesClusterrolebinding").KubernetesClusterrolebinding = null as any;
utilities.lazyLoad(exports, ["KubernetesClusterrolebinding"], () => require("./kubernetesClusterrolebinding"));

export { KubernetesConfigmapsArgs, KubernetesConfigmapsState } from "./kubernetesConfigmaps";
export type KubernetesConfigmaps = import("./kubernetesConfigmaps").KubernetesConfigmaps;
export const KubernetesConfigmaps: typeof import("./kubernetesConfigmaps").KubernetesConfigmaps = null as any;
utilities.lazyLoad(exports, ["KubernetesConfigmaps"], () => require("./kubernetesConfigmaps"));

export { KubernetesCronjobArgs, KubernetesCronjobState } from "./kubernetesCronjob";
export type KubernetesCronjob = import("./kubernetesCronjob").KubernetesCronjob;
export const KubernetesCronjob: typeof import("./kubernetesCronjob").KubernetesCronjob = null as any;
utilities.lazyLoad(exports, ["KubernetesCronjob"], () => require("./kubernetesCronjob"));

export { KubernetesDeleteObjectArgs, KubernetesDeleteObjectState } from "./kubernetesDeleteObject";
export type KubernetesDeleteObject = import("./kubernetesDeleteObject").KubernetesDeleteObject;
export const KubernetesDeleteObject: typeof import("./kubernetesDeleteObject").KubernetesDeleteObject = null as any;
utilities.lazyLoad(exports, ["KubernetesDeleteObject"], () => require("./kubernetesDeleteObject"));

export { KubernetesHelmArgs, KubernetesHelmState } from "./kubernetesHelm";
export type KubernetesHelm = import("./kubernetesHelm").KubernetesHelm;
export const KubernetesHelm: typeof import("./kubernetesHelm").KubernetesHelm = null as any;
utilities.lazyLoad(exports, ["KubernetesHelm"], () => require("./kubernetesHelm"));

export { KubernetesIngresscontrollersArgs, KubernetesIngresscontrollersState } from "./kubernetesIngresscontrollers";
export type KubernetesIngresscontrollers = import("./kubernetesIngresscontrollers").KubernetesIngresscontrollers;
export const KubernetesIngresscontrollers: typeof import("./kubernetesIngresscontrollers").KubernetesIngresscontrollers = null as any;
utilities.lazyLoad(exports, ["KubernetesIngresscontrollers"], () => require("./kubernetesIngresscontrollers"));

export { KubernetesIngressesArgs, KubernetesIngressesState } from "./kubernetesIngresses";
export type KubernetesIngresses = import("./kubernetesIngresses").KubernetesIngresses;
export const KubernetesIngresses: typeof import("./kubernetesIngresses").KubernetesIngresses = null as any;
utilities.lazyLoad(exports, ["KubernetesIngresses"], () => require("./kubernetesIngresses"));

export { KubernetesJobArgs, KubernetesJobState } from "./kubernetesJob";
export type KubernetesJob = import("./kubernetesJob").KubernetesJob;
export const KubernetesJob: typeof import("./kubernetesJob").KubernetesJob = null as any;
utilities.lazyLoad(exports, ["KubernetesJob"], () => require("./kubernetesJob"));

export { KubernetesNamespaceArgs, KubernetesNamespaceState } from "./kubernetesNamespace";
export type KubernetesNamespace = import("./kubernetesNamespace").KubernetesNamespace;
export const KubernetesNamespace: typeof import("./kubernetesNamespace").KubernetesNamespace = null as any;
utilities.lazyLoad(exports, ["KubernetesNamespace"], () => require("./kubernetesNamespace"));

export { KubernetesNamespaceAccessArgs, KubernetesNamespaceAccessState } from "./kubernetesNamespaceAccess";
export type KubernetesNamespaceAccess = import("./kubernetesNamespaceAccess").KubernetesNamespaceAccess;
export const KubernetesNamespaceAccess: typeof import("./kubernetesNamespaceAccess").KubernetesNamespaceAccess = null as any;
utilities.lazyLoad(exports, ["KubernetesNamespaceAccess"], () => require("./kubernetesNamespaceAccess"));

export { KubernetesNamespaceIngresscontrollersArgs, KubernetesNamespaceIngresscontrollersState } from "./kubernetesNamespaceIngresscontrollers";
export type KubernetesNamespaceIngresscontrollers = import("./kubernetesNamespaceIngresscontrollers").KubernetesNamespaceIngresscontrollers;
export const KubernetesNamespaceIngresscontrollers: typeof import("./kubernetesNamespaceIngresscontrollers").KubernetesNamespaceIngresscontrollers = null as any;
utilities.lazyLoad(exports, ["KubernetesNamespaceIngresscontrollers"], () => require("./kubernetesNamespaceIngresscontrollers"));

export { KubernetesNamespaceSystemArgs, KubernetesNamespaceSystemState } from "./kubernetesNamespaceSystem";
export type KubernetesNamespaceSystem = import("./kubernetesNamespaceSystem").KubernetesNamespaceSystem;
export const KubernetesNamespaceSystem: typeof import("./kubernetesNamespaceSystem").KubernetesNamespaceSystem = null as any;
utilities.lazyLoad(exports, ["KubernetesNamespaceSystem"], () => require("./kubernetesNamespaceSystem"));

export { KubernetesRoleArgs, KubernetesRoleState } from "./kubernetesRole";
export type KubernetesRole = import("./kubernetesRole").KubernetesRole;
export const KubernetesRole: typeof import("./kubernetesRole").KubernetesRole = null as any;
utilities.lazyLoad(exports, ["KubernetesRole"], () => require("./kubernetesRole"));

export { KubernetesRolebindingArgs, KubernetesRolebindingState } from "./kubernetesRolebinding";
export type KubernetesRolebinding = import("./kubernetesRolebinding").KubernetesRolebinding;
export const KubernetesRolebinding: typeof import("./kubernetesRolebinding").KubernetesRolebinding = null as any;
utilities.lazyLoad(exports, ["KubernetesRolebinding"], () => require("./kubernetesRolebinding"));

export { KubernetesSecretArgs, KubernetesSecretState } from "./kubernetesSecret";
export type KubernetesSecret = import("./kubernetesSecret").KubernetesSecret;
export const KubernetesSecret: typeof import("./kubernetesSecret").KubernetesSecret = null as any;
utilities.lazyLoad(exports, ["KubernetesSecret"], () => require("./kubernetesSecret"));

export { KubernetesServiceArgs, KubernetesServiceState } from "./kubernetesService";
export type KubernetesService = import("./kubernetesService").KubernetesService;
export const KubernetesService: typeof import("./kubernetesService").KubernetesService = null as any;
utilities.lazyLoad(exports, ["KubernetesService"], () => require("./kubernetesService"));

export { KubernetesServiceaccountsArgs, KubernetesServiceaccountsState } from "./kubernetesServiceaccounts";
export type KubernetesServiceaccounts = import("./kubernetesServiceaccounts").KubernetesServiceaccounts;
export const KubernetesServiceaccounts: typeof import("./kubernetesServiceaccounts").KubernetesServiceaccounts = null as any;
utilities.lazyLoad(exports, ["KubernetesServiceaccounts"], () => require("./kubernetesServiceaccounts"));

export { KubernetesStorageArgs, KubernetesStorageState } from "./kubernetesStorage";
export type KubernetesStorage = import("./kubernetesStorage").KubernetesStorage;
export const KubernetesStorage: typeof import("./kubernetesStorage").KubernetesStorage = null as any;
utilities.lazyLoad(exports, ["KubernetesStorage"], () => require("./kubernetesStorage"));

export { KubernetesVolumeArgs, KubernetesVolumeState } from "./kubernetesVolume";
export type KubernetesVolume = import("./kubernetesVolume").KubernetesVolume;
export const KubernetesVolume: typeof import("./kubernetesVolume").KubernetesVolume = null as any;
utilities.lazyLoad(exports, ["KubernetesVolume"], () => require("./kubernetesVolume"));

export { LicensesArgs, LicensesState } from "./licenses";
export type Licenses = import("./licenses").Licenses;
export const Licenses: typeof import("./licenses").Licenses = null as any;
utilities.lazyLoad(exports, ["Licenses"], () => require("./licenses"));

export { OpenAmtArgs, OpenAmtState } from "./openAmt";
export type OpenAmt = import("./openAmt").OpenAmt;
export const OpenAmt: typeof import("./openAmt").OpenAmt = null as any;
utilities.lazyLoad(exports, ["OpenAmt"], () => require("./openAmt"));

export { OpenAmtActivateArgs, OpenAmtActivateState } from "./openAmtActivate";
export type OpenAmtActivate = import("./openAmtActivate").OpenAmtActivate;
export const OpenAmtActivate: typeof import("./openAmtActivate").OpenAmtActivate = null as any;
utilities.lazyLoad(exports, ["OpenAmtActivate"], () => require("./openAmtActivate"));

export { OpenAmtDevicesActionArgs, OpenAmtDevicesActionState } from "./openAmtDevicesAction";
export type OpenAmtDevicesAction = import("./openAmtDevicesAction").OpenAmtDevicesAction;
export const OpenAmtDevicesAction: typeof import("./openAmtDevicesAction").OpenAmtDevicesAction = null as any;
utilities.lazyLoad(exports, ["OpenAmtDevicesAction"], () => require("./openAmtDevicesAction"));

export { OpenAmtDevicesFeaturesArgs, OpenAmtDevicesFeaturesState } from "./openAmtDevicesFeatures";
export type OpenAmtDevicesFeatures = import("./openAmtDevicesFeatures").OpenAmtDevicesFeatures;
export const OpenAmtDevicesFeatures: typeof import("./openAmtDevicesFeatures").OpenAmtDevicesFeatures = null as any;
utilities.lazyLoad(exports, ["OpenAmtDevicesFeatures"], () => require("./openAmtDevicesFeatures"));

export * from "./provider";
import { Provider } from "./provider";

export { RegistryArgs, RegistryState } from "./registry";
export type Registry = import("./registry").Registry;
export const Registry: typeof import("./registry").Registry = null as any;
utilities.lazyLoad(exports, ["Registry"], () => require("./registry"));

export { ResourceControlArgs, ResourceControlState } from "./resourceControl";
export type ResourceControl = import("./resourceControl").ResourceControl;
export const ResourceControl: typeof import("./resourceControl").ResourceControl = null as any;
utilities.lazyLoad(exports, ["ResourceControl"], () => require("./resourceControl"));

export { SettingsArgs, SettingsState } from "./settings";
export type Settings = import("./settings").Settings;
export const Settings: typeof import("./settings").Settings = null as any;
utilities.lazyLoad(exports, ["Settings"], () => require("./settings"));

export { SettingsExperimentalArgs, SettingsExperimentalState } from "./settingsExperimental";
export type SettingsExperimental = import("./settingsExperimental").SettingsExperimental;
export const SettingsExperimental: typeof import("./settingsExperimental").SettingsExperimental = null as any;
utilities.lazyLoad(exports, ["SettingsExperimental"], () => require("./settingsExperimental"));

export { SshkeygenArgs, SshkeygenState } from "./sshkeygen";
export type Sshkeygen = import("./sshkeygen").Sshkeygen;
export const Sshkeygen: typeof import("./sshkeygen").Sshkeygen = null as any;
utilities.lazyLoad(exports, ["Sshkeygen"], () => require("./sshkeygen"));

export { SslArgs, SslState } from "./ssl";
export type Ssl = import("./ssl").Ssl;
export const Ssl: typeof import("./ssl").Ssl = null as any;
utilities.lazyLoad(exports, ["Ssl"], () => require("./ssl"));

export { StackArgs, StackState } from "./stack";
export type Stack = import("./stack").Stack;
export const Stack: typeof import("./stack").Stack = null as any;
utilities.lazyLoad(exports, ["Stack"], () => require("./stack"));

export { StackAssociateArgs, StackAssociateState } from "./stackAssociate";
export type StackAssociate = import("./stackAssociate").StackAssociate;
export const StackAssociate: typeof import("./stackAssociate").StackAssociate = null as any;
utilities.lazyLoad(exports, ["StackAssociate"], () => require("./stackAssociate"));

export { StackWebhookArgs, StackWebhookState } from "./stackWebhook";
export type StackWebhook = import("./stackWebhook").StackWebhook;
export const StackWebhook: typeof import("./stackWebhook").StackWebhook = null as any;
utilities.lazyLoad(exports, ["StackWebhook"], () => require("./stackWebhook"));

export { SupportDebugLogArgs, SupportDebugLogState } from "./supportDebugLog";
export type SupportDebugLog = import("./supportDebugLog").SupportDebugLog;
export const SupportDebugLog: typeof import("./supportDebugLog").SupportDebugLog = null as any;
utilities.lazyLoad(exports, ["SupportDebugLog"], () => require("./supportDebugLog"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamMembershipArgs, TeamMembershipState } from "./teamMembership";
export type TeamMembership = import("./teamMembership").TeamMembership;
export const TeamMembership: typeof import("./teamMembership").TeamMembership = null as any;
utilities.lazyLoad(exports, ["TeamMembership"], () => require("./teamMembership"));

export { TlsArgs, TlsState } from "./tls";
export type Tls = import("./tls").Tls;
export const Tls: typeof import("./tls").Tls = null as any;
utilities.lazyLoad(exports, ["Tls"], () => require("./tls"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));

export { WebhookExecuteArgs, WebhookExecuteState } from "./webhookExecute";
export type WebhookExecute = import("./webhookExecute").WebhookExecute;
export const WebhookExecute: typeof import("./webhookExecute").WebhookExecute = null as any;
utilities.lazyLoad(exports, ["WebhookExecute"], () => require("./webhookExecute"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "portainer:index/auth:Auth":
                return new Auth(name, <any>undefined, { urn })
            case "portainer:index/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "portainer:index/backupS3:BackupS3":
                return new BackupS3(name, <any>undefined, { urn })
            case "portainer:index/chat:Chat":
                return new Chat(name, <any>undefined, { urn })
            case "portainer:index/cloudCredentials:CloudCredentials":
                return new CloudCredentials(name, <any>undefined, { urn })
            case "portainer:index/cloudProviderProvision:CloudProviderProvision":
                return new CloudProviderProvision(name, <any>undefined, { urn })
            case "portainer:index/composeConvert:ComposeConvert":
                return new ComposeConvert(name, <any>undefined, { urn })
            case "portainer:index/containerExec:ContainerExec":
                return new ContainerExec(name, <any>undefined, { urn })
            case "portainer:index/customTemplate:CustomTemplate":
                return new CustomTemplate(name, <any>undefined, { urn })
            case "portainer:index/dockerConfig:DockerConfig":
                return new DockerConfig(name, <any>undefined, { urn })
            case "portainer:index/dockerImage:DockerImage":
                return new DockerImage(name, <any>undefined, { urn })
            case "portainer:index/dockerNetwork:DockerNetwork":
                return new DockerNetwork(name, <any>undefined, { urn })
            case "portainer:index/dockerNode:DockerNode":
                return new DockerNode(name, <any>undefined, { urn })
            case "portainer:index/dockerPlugin:DockerPlugin":
                return new DockerPlugin(name, <any>undefined, { urn })
            case "portainer:index/dockerSecret:DockerSecret":
                return new DockerSecret(name, <any>undefined, { urn })
            case "portainer:index/dockerVolume:DockerVolume":
                return new DockerVolume(name, <any>undefined, { urn })
            case "portainer:index/edgeConfigurations:EdgeConfigurations":
                return new EdgeConfigurations(name, <any>undefined, { urn })
            case "portainer:index/edgeGroup:EdgeGroup":
                return new EdgeGroup(name, <any>undefined, { urn })
            case "portainer:index/edgeJob:EdgeJob":
                return new EdgeJob(name, <any>undefined, { urn })
            case "portainer:index/edgeStack:EdgeStack":
                return new EdgeStack(name, <any>undefined, { urn })
            case "portainer:index/edgeStackWebhook:EdgeStackWebhook":
                return new EdgeStackWebhook(name, <any>undefined, { urn })
            case "portainer:index/edgeUpdateSchedules:EdgeUpdateSchedules":
                return new EdgeUpdateSchedules(name, <any>undefined, { urn })
            case "portainer:index/endpointAssociation:EndpointAssociation":
                return new EndpointAssociation(name, <any>undefined, { urn })
            case "portainer:index/endpointGroup:EndpointGroup":
                return new EndpointGroup(name, <any>undefined, { urn })
            case "portainer:index/endpointServiceUpdate:EndpointServiceUpdate":
                return new EndpointServiceUpdate(name, <any>undefined, { urn })
            case "portainer:index/endpointSettings:EndpointSettings":
                return new EndpointSettings(name, <any>undefined, { urn })
            case "portainer:index/endpointSnapshot:EndpointSnapshot":
                return new EndpointSnapshot(name, <any>undefined, { urn })
            case "portainer:index/endpointsEdgeGenerateKey:EndpointsEdgeGenerateKey":
                return new EndpointsEdgeGenerateKey(name, <any>undefined, { urn })
            case "portainer:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "portainer:index/kubernetesApplication:KubernetesApplication":
                return new KubernetesApplication(name, <any>undefined, { urn })
            case "portainer:index/kubernetesClusterrole:KubernetesClusterrole":
                return new KubernetesClusterrole(name, <any>undefined, { urn })
            case "portainer:index/kubernetesClusterrolebinding:KubernetesClusterrolebinding":
                return new KubernetesClusterrolebinding(name, <any>undefined, { urn })
            case "portainer:index/kubernetesConfigmaps:KubernetesConfigmaps":
                return new KubernetesConfigmaps(name, <any>undefined, { urn })
            case "portainer:index/kubernetesCronjob:KubernetesCronjob":
                return new KubernetesCronjob(name, <any>undefined, { urn })
            case "portainer:index/kubernetesDeleteObject:KubernetesDeleteObject":
                return new KubernetesDeleteObject(name, <any>undefined, { urn })
            case "portainer:index/kubernetesHelm:KubernetesHelm":
                return new KubernetesHelm(name, <any>undefined, { urn })
            case "portainer:index/kubernetesIngresscontrollers:KubernetesIngresscontrollers":
                return new KubernetesIngresscontrollers(name, <any>undefined, { urn })
            case "portainer:index/kubernetesIngresses:KubernetesIngresses":
                return new KubernetesIngresses(name, <any>undefined, { urn })
            case "portainer:index/kubernetesJob:KubernetesJob":
                return new KubernetesJob(name, <any>undefined, { urn })
            case "portainer:index/kubernetesNamespace:KubernetesNamespace":
                return new KubernetesNamespace(name, <any>undefined, { urn })
            case "portainer:index/kubernetesNamespaceAccess:KubernetesNamespaceAccess":
                return new KubernetesNamespaceAccess(name, <any>undefined, { urn })
            case "portainer:index/kubernetesNamespaceIngresscontrollers:KubernetesNamespaceIngresscontrollers":
                return new KubernetesNamespaceIngresscontrollers(name, <any>undefined, { urn })
            case "portainer:index/kubernetesNamespaceSystem:KubernetesNamespaceSystem":
                return new KubernetesNamespaceSystem(name, <any>undefined, { urn })
            case "portainer:index/kubernetesRole:KubernetesRole":
                return new KubernetesRole(name, <any>undefined, { urn })
            case "portainer:index/kubernetesRolebinding:KubernetesRolebinding":
                return new KubernetesRolebinding(name, <any>undefined, { urn })
            case "portainer:index/kubernetesSecret:KubernetesSecret":
                return new KubernetesSecret(name, <any>undefined, { urn })
            case "portainer:index/kubernetesService:KubernetesService":
                return new KubernetesService(name, <any>undefined, { urn })
            case "portainer:index/kubernetesServiceaccounts:KubernetesServiceaccounts":
                return new KubernetesServiceaccounts(name, <any>undefined, { urn })
            case "portainer:index/kubernetesStorage:KubernetesStorage":
                return new KubernetesStorage(name, <any>undefined, { urn })
            case "portainer:index/kubernetesVolume:KubernetesVolume":
                return new KubernetesVolume(name, <any>undefined, { urn })
            case "portainer:index/licenses:Licenses":
                return new Licenses(name, <any>undefined, { urn })
            case "portainer:index/openAmt:OpenAmt":
                return new OpenAmt(name, <any>undefined, { urn })
            case "portainer:index/openAmtActivate:OpenAmtActivate":
                return new OpenAmtActivate(name, <any>undefined, { urn })
            case "portainer:index/openAmtDevicesAction:OpenAmtDevicesAction":
                return new OpenAmtDevicesAction(name, <any>undefined, { urn })
            case "portainer:index/openAmtDevicesFeatures:OpenAmtDevicesFeatures":
                return new OpenAmtDevicesFeatures(name, <any>undefined, { urn })
            case "portainer:index/registry:Registry":
                return new Registry(name, <any>undefined, { urn })
            case "portainer:index/resourceControl:ResourceControl":
                return new ResourceControl(name, <any>undefined, { urn })
            case "portainer:index/settings:Settings":
                return new Settings(name, <any>undefined, { urn })
            case "portainer:index/settingsExperimental:SettingsExperimental":
                return new SettingsExperimental(name, <any>undefined, { urn })
            case "portainer:index/sshkeygen:Sshkeygen":
                return new Sshkeygen(name, <any>undefined, { urn })
            case "portainer:index/ssl:Ssl":
                return new Ssl(name, <any>undefined, { urn })
            case "portainer:index/stack:Stack":
                return new Stack(name, <any>undefined, { urn })
            case "portainer:index/stackAssociate:StackAssociate":
                return new StackAssociate(name, <any>undefined, { urn })
            case "portainer:index/stackWebhook:StackWebhook":
                return new StackWebhook(name, <any>undefined, { urn })
            case "portainer:index/supportDebugLog:SupportDebugLog":
                return new SupportDebugLog(name, <any>undefined, { urn })
            case "portainer:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "portainer:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "portainer:index/teamMembership:TeamMembership":
                return new TeamMembership(name, <any>undefined, { urn })
            case "portainer:index/tls:Tls":
                return new Tls(name, <any>undefined, { urn })
            case "portainer:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "portainer:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            case "portainer:index/webhookExecute:WebhookExecute":
                return new WebhookExecute(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("portainer", "index/auth", _module)
pulumi.runtime.registerResourceModule("portainer", "index/backup", _module)
pulumi.runtime.registerResourceModule("portainer", "index/backupS3", _module)
pulumi.runtime.registerResourceModule("portainer", "index/chat", _module)
pulumi.runtime.registerResourceModule("portainer", "index/cloudCredentials", _module)
pulumi.runtime.registerResourceModule("portainer", "index/cloudProviderProvision", _module)
pulumi.runtime.registerResourceModule("portainer", "index/composeConvert", _module)
pulumi.runtime.registerResourceModule("portainer", "index/containerExec", _module)
pulumi.runtime.registerResourceModule("portainer", "index/customTemplate", _module)
pulumi.runtime.registerResourceModule("portainer", "index/dockerConfig", _module)
pulumi.runtime.registerResourceModule("portainer", "index/dockerImage", _module)
pulumi.runtime.registerResourceModule("portainer", "index/dockerNetwork", _module)
pulumi.runtime.registerResourceModule("portainer", "index/dockerNode", _module)
pulumi.runtime.registerResourceModule("portainer", "index/dockerPlugin", _module)
pulumi.runtime.registerResourceModule("portainer", "index/dockerSecret", _module)
pulumi.runtime.registerResourceModule("portainer", "index/dockerVolume", _module)
pulumi.runtime.registerResourceModule("portainer", "index/edgeConfigurations", _module)
pulumi.runtime.registerResourceModule("portainer", "index/edgeGroup", _module)
pulumi.runtime.registerResourceModule("portainer", "index/edgeJob", _module)
pulumi.runtime.registerResourceModule("portainer", "index/edgeStack", _module)
pulumi.runtime.registerResourceModule("portainer", "index/edgeStackWebhook", _module)
pulumi.runtime.registerResourceModule("portainer", "index/edgeUpdateSchedules", _module)
pulumi.runtime.registerResourceModule("portainer", "index/endpointAssociation", _module)
pulumi.runtime.registerResourceModule("portainer", "index/endpointGroup", _module)
pulumi.runtime.registerResourceModule("portainer", "index/endpointServiceUpdate", _module)
pulumi.runtime.registerResourceModule("portainer", "index/endpointSettings", _module)
pulumi.runtime.registerResourceModule("portainer", "index/endpointSnapshot", _module)
pulumi.runtime.registerResourceModule("portainer", "index/endpointsEdgeGenerateKey", _module)
pulumi.runtime.registerResourceModule("portainer", "index/environment", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesApplication", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesClusterrole", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesClusterrolebinding", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesConfigmaps", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesCronjob", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesDeleteObject", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesHelm", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesIngresscontrollers", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesIngresses", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesJob", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesNamespace", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesNamespaceAccess", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesNamespaceIngresscontrollers", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesNamespaceSystem", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesRole", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesRolebinding", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesSecret", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesService", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesServiceaccounts", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesStorage", _module)
pulumi.runtime.registerResourceModule("portainer", "index/kubernetesVolume", _module)
pulumi.runtime.registerResourceModule("portainer", "index/licenses", _module)
pulumi.runtime.registerResourceModule("portainer", "index/openAmt", _module)
pulumi.runtime.registerResourceModule("portainer", "index/openAmtActivate", _module)
pulumi.runtime.registerResourceModule("portainer", "index/openAmtDevicesAction", _module)
pulumi.runtime.registerResourceModule("portainer", "index/openAmtDevicesFeatures", _module)
pulumi.runtime.registerResourceModule("portainer", "index/registry", _module)
pulumi.runtime.registerResourceModule("portainer", "index/resourceControl", _module)
pulumi.runtime.registerResourceModule("portainer", "index/settings", _module)
pulumi.runtime.registerResourceModule("portainer", "index/settingsExperimental", _module)
pulumi.runtime.registerResourceModule("portainer", "index/sshkeygen", _module)
pulumi.runtime.registerResourceModule("portainer", "index/ssl", _module)
pulumi.runtime.registerResourceModule("portainer", "index/stack", _module)
pulumi.runtime.registerResourceModule("portainer", "index/stackAssociate", _module)
pulumi.runtime.registerResourceModule("portainer", "index/stackWebhook", _module)
pulumi.runtime.registerResourceModule("portainer", "index/supportDebugLog", _module)
pulumi.runtime.registerResourceModule("portainer", "index/tag", _module)
pulumi.runtime.registerResourceModule("portainer", "index/team", _module)
pulumi.runtime.registerResourceModule("portainer", "index/teamMembership", _module)
pulumi.runtime.registerResourceModule("portainer", "index/tls", _module)
pulumi.runtime.registerResourceModule("portainer", "index/user", _module)
pulumi.runtime.registerResourceModule("portainer", "index/webhook", _module)
pulumi.runtime.registerResourceModule("portainer", "index/webhookExecute", _module)
pulumi.runtime.registerResourcePackage("portainer", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:portainer") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Auth extends pulumi.CustomResource {
    /**
     * Get an existing Auth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthState, opts?: pulumi.CustomResourceOptions): Auth {
        return new Auth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/auth:Auth';

    /**
     * Returns true if the given object is an instance of Auth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Auth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Auth.__pulumiType;
    }

    declare public readonly authId: pulumi.Output<string>;
    declare public /*out*/ readonly jwt: pulumi.Output<string>;
    declare public readonly password: pulumi.Output<string>;
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a Auth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthArgs | AuthState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthState | undefined;
            resourceInputs["authId"] = state?.authId;
            resourceInputs["jwt"] = state?.jwt;
            resourceInputs["password"] = state?.password;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as AuthArgs | undefined;
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["authId"] = args?.authId;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["username"] = args?.username ? pulumi.secret(args.username) : undefined;
            resourceInputs["jwt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["jwt", "password", "username"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Auth.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Auth resources.
 */
export interface AuthState {
    authId?: pulumi.Input<string>;
    jwt?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Auth resource.
 */
export interface AuthArgs {
    authId?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

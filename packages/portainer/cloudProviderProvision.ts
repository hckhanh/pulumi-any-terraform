// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudProviderProvision extends pulumi.CustomResource {
    /**
     * Get an existing CloudProviderProvision resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudProviderProvisionState, opts?: pulumi.CustomResourceOptions): CloudProviderProvision {
        return new CloudProviderProvision(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/cloudProviderProvision:CloudProviderProvision';

    /**
     * Returns true if the given object is an instance of CloudProviderProvision.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudProviderProvision {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudProviderProvision.__pulumiType;
    }

    /**
     * Cloud provider (civo, digitalocean, linode, amazon, azure, gke)
     */
    declare public readonly cloudProvider: pulumi.Output<string>;
    declare public readonly cloudProviderProvisionId: pulumi.Output<string>;
    /**
     * Raw payload with provisioning parameters.
     */
    declare public readonly payload: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a CloudProviderProvision resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudProviderProvisionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudProviderProvisionArgs | CloudProviderProvisionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudProviderProvisionState | undefined;
            resourceInputs["cloudProvider"] = state?.cloudProvider;
            resourceInputs["cloudProviderProvisionId"] = state?.cloudProviderProvisionId;
            resourceInputs["payload"] = state?.payload;
        } else {
            const args = argsOrState as CloudProviderProvisionArgs | undefined;
            if (args?.cloudProvider === undefined && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if (args?.payload === undefined && !opts.urn) {
                throw new Error("Missing required property 'payload'");
            }
            resourceInputs["cloudProvider"] = args?.cloudProvider;
            resourceInputs["cloudProviderProvisionId"] = args?.cloudProviderProvisionId;
            resourceInputs["payload"] = args?.payload;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudProviderProvision.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudProviderProvision resources.
 */
export interface CloudProviderProvisionState {
    /**
     * Cloud provider (civo, digitalocean, linode, amazon, azure, gke)
     */
    cloudProvider?: pulumi.Input<string>;
    cloudProviderProvisionId?: pulumi.Input<string>;
    /**
     * Raw payload with provisioning parameters.
     */
    payload?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a CloudProviderProvision resource.
 */
export interface CloudProviderProvisionArgs {
    /**
     * Cloud provider (civo, digitalocean, linode, amazon, azure, gke)
     */
    cloudProvider: pulumi.Input<string>;
    cloudProviderProvisionId?: pulumi.Input<string>;
    /**
     * Raw payload with provisioning parameters.
     */
    payload: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

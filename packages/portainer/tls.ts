// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Tls extends pulumi.CustomResource {
    /**
     * Get an existing Tls resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TlsState, opts?: pulumi.CustomResourceOptions): Tls {
        return new Tls(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/tls:Tls';

    /**
     * Returns true if the given object is an instance of Tls.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tls {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tls.__pulumiType;
    }

    /**
     * Type of TLS certificate: one of 'ca', 'cert', 'key'
     */
    declare public readonly certificate: pulumi.Output<string>;
    /**
     * Path to the local TLS file to upload
     */
    declare public readonly filePath: pulumi.Output<string>;
    /**
     * Folder name where the TLS file will be stored
     */
    declare public readonly folder: pulumi.Output<string>;
    declare public readonly tlsId: pulumi.Output<string>;

    /**
     * Create a Tls resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TlsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TlsArgs | TlsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TlsState | undefined;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["filePath"] = state?.filePath;
            resourceInputs["folder"] = state?.folder;
            resourceInputs["tlsId"] = state?.tlsId;
        } else {
            const args = argsOrState as TlsArgs | undefined;
            if (args?.certificate === undefined && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            if (args?.filePath === undefined && !opts.urn) {
                throw new Error("Missing required property 'filePath'");
            }
            if (args?.folder === undefined && !opts.urn) {
                throw new Error("Missing required property 'folder'");
            }
            resourceInputs["certificate"] = args?.certificate;
            resourceInputs["filePath"] = args?.filePath;
            resourceInputs["folder"] = args?.folder;
            resourceInputs["tlsId"] = args?.tlsId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tls.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Tls resources.
 */
export interface TlsState {
    /**
     * Type of TLS certificate: one of 'ca', 'cert', 'key'
     */
    certificate?: pulumi.Input<string>;
    /**
     * Path to the local TLS file to upload
     */
    filePath?: pulumi.Input<string>;
    /**
     * Folder name where the TLS file will be stored
     */
    folder?: pulumi.Input<string>;
    tlsId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Tls resource.
 */
export interface TlsArgs {
    /**
     * Type of TLS certificate: one of 'ca', 'cert', 'key'
     */
    certificate: pulumi.Input<string>;
    /**
     * Path to the local TLS file to upload
     */
    filePath: pulumi.Input<string>;
    /**
     * Folder name where the TLS file will be stored
     */
    folder: pulumi.Input<string>;
    tlsId?: pulumi.Input<string>;
}

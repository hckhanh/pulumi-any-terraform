// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CustomTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CustomTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomTemplateState, opts?: pulumi.CustomResourceOptions): CustomTemplate {
        return new CustomTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/customTemplate:CustomTemplate';

    /**
     * Returns true if the given object is an instance of CustomTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomTemplate.__pulumiType;
    }

    declare public readonly composeFilePath: pulumi.Output<string | undefined>;
    declare public readonly customTemplateId: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string>;
    declare public readonly edgeTemplate: pulumi.Output<boolean | undefined>;
    declare public readonly fileContent: pulumi.Output<string | undefined>;
    declare public readonly filePath: pulumi.Output<string | undefined>;
    declare public readonly isComposeFormat: pulumi.Output<boolean | undefined>;
    declare public readonly logo: pulumi.Output<string | undefined>;
    declare public readonly note: pulumi.Output<string>;
    declare public readonly platform: pulumi.Output<number>;
    /**
     * Enable authentication for the Git repository (default: false).
     */
    declare public readonly repositoryAuthentication: pulumi.Output<boolean | undefined>;
    declare public readonly repositoryPassword: pulumi.Output<string | undefined>;
    declare public readonly repositoryReference: pulumi.Output<string | undefined>;
    declare public readonly repositoryUrl: pulumi.Output<string | undefined>;
    declare public readonly repositoryUsername: pulumi.Output<string | undefined>;
    declare public readonly title: pulumi.Output<string>;
    declare public readonly tlsskipVerify: pulumi.Output<boolean | undefined>;
    declare public readonly type: pulumi.Output<number>;
    declare public readonly variables: pulumi.Output<{[key: string]: string}[] | undefined>;

    /**
     * Create a CustomTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomTemplateArgs | CustomTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomTemplateState | undefined;
            resourceInputs["composeFilePath"] = state?.composeFilePath;
            resourceInputs["customTemplateId"] = state?.customTemplateId;
            resourceInputs["description"] = state?.description;
            resourceInputs["edgeTemplate"] = state?.edgeTemplate;
            resourceInputs["fileContent"] = state?.fileContent;
            resourceInputs["filePath"] = state?.filePath;
            resourceInputs["isComposeFormat"] = state?.isComposeFormat;
            resourceInputs["logo"] = state?.logo;
            resourceInputs["note"] = state?.note;
            resourceInputs["platform"] = state?.platform;
            resourceInputs["repositoryAuthentication"] = state?.repositoryAuthentication;
            resourceInputs["repositoryPassword"] = state?.repositoryPassword;
            resourceInputs["repositoryReference"] = state?.repositoryReference;
            resourceInputs["repositoryUrl"] = state?.repositoryUrl;
            resourceInputs["repositoryUsername"] = state?.repositoryUsername;
            resourceInputs["title"] = state?.title;
            resourceInputs["tlsskipVerify"] = state?.tlsskipVerify;
            resourceInputs["type"] = state?.type;
            resourceInputs["variables"] = state?.variables;
        } else {
            const args = argsOrState as CustomTemplateArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.note === undefined && !opts.urn) {
                throw new Error("Missing required property 'note'");
            }
            if (args?.platform === undefined && !opts.urn) {
                throw new Error("Missing required property 'platform'");
            }
            if (args?.title === undefined && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["composeFilePath"] = args?.composeFilePath;
            resourceInputs["customTemplateId"] = args?.customTemplateId;
            resourceInputs["description"] = args?.description;
            resourceInputs["edgeTemplate"] = args?.edgeTemplate;
            resourceInputs["fileContent"] = args?.fileContent;
            resourceInputs["filePath"] = args?.filePath;
            resourceInputs["isComposeFormat"] = args?.isComposeFormat;
            resourceInputs["logo"] = args?.logo;
            resourceInputs["note"] = args?.note;
            resourceInputs["platform"] = args?.platform;
            resourceInputs["repositoryAuthentication"] = args?.repositoryAuthentication;
            resourceInputs["repositoryPassword"] = args?.repositoryPassword ? pulumi.secret(args.repositoryPassword) : undefined;
            resourceInputs["repositoryReference"] = args?.repositoryReference;
            resourceInputs["repositoryUrl"] = args?.repositoryUrl;
            resourceInputs["repositoryUsername"] = args?.repositoryUsername;
            resourceInputs["title"] = args?.title;
            resourceInputs["tlsskipVerify"] = args?.tlsskipVerify;
            resourceInputs["type"] = args?.type;
            resourceInputs["variables"] = args?.variables;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["repositoryPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CustomTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CustomTemplate resources.
 */
export interface CustomTemplateState {
    composeFilePath?: pulumi.Input<string>;
    customTemplateId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    edgeTemplate?: pulumi.Input<boolean>;
    fileContent?: pulumi.Input<string>;
    filePath?: pulumi.Input<string>;
    isComposeFormat?: pulumi.Input<boolean>;
    logo?: pulumi.Input<string>;
    note?: pulumi.Input<string>;
    platform?: pulumi.Input<number>;
    /**
     * Enable authentication for the Git repository (default: false).
     */
    repositoryAuthentication?: pulumi.Input<boolean>;
    repositoryPassword?: pulumi.Input<string>;
    repositoryReference?: pulumi.Input<string>;
    repositoryUrl?: pulumi.Input<string>;
    repositoryUsername?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    tlsskipVerify?: pulumi.Input<boolean>;
    type?: pulumi.Input<number>;
    variables?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
}

/**
 * The set of arguments for constructing a CustomTemplate resource.
 */
export interface CustomTemplateArgs {
    composeFilePath?: pulumi.Input<string>;
    customTemplateId?: pulumi.Input<string>;
    description: pulumi.Input<string>;
    edgeTemplate?: pulumi.Input<boolean>;
    fileContent?: pulumi.Input<string>;
    filePath?: pulumi.Input<string>;
    isComposeFormat?: pulumi.Input<boolean>;
    logo?: pulumi.Input<string>;
    note: pulumi.Input<string>;
    platform: pulumi.Input<number>;
    /**
     * Enable authentication for the Git repository (default: false).
     */
    repositoryAuthentication?: pulumi.Input<boolean>;
    repositoryPassword?: pulumi.Input<string>;
    repositoryReference?: pulumi.Input<string>;
    repositoryUrl?: pulumi.Input<string>;
    repositoryUsername?: pulumi.Input<string>;
    title: pulumi.Input<string>;
    tlsskipVerify?: pulumi.Input<boolean>;
    type: pulumi.Input<number>;
    variables?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
}

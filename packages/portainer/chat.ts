// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Chat extends pulumi.CustomResource {
    /**
     * Get an existing Chat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ChatState, opts?: pulumi.CustomResourceOptions): Chat {
        return new Chat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/chat:Chat';

    /**
     * Returns true if the given object is an instance of Chat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Chat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Chat.__pulumiType;
    }

    declare public readonly chatId: pulumi.Output<string>;
    declare public readonly context: pulumi.Output<string>;
    declare public readonly environmentId: pulumi.Output<number>;
    declare public readonly message: pulumi.Output<string>;
    declare public readonly model: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly responseMessage: pulumi.Output<string>;
    declare public /*out*/ readonly responseYaml: pulumi.Output<string>;

    /**
     * Create a Chat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ChatArgs | ChatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ChatState | undefined;
            resourceInputs["chatId"] = state?.chatId;
            resourceInputs["context"] = state?.context;
            resourceInputs["environmentId"] = state?.environmentId;
            resourceInputs["message"] = state?.message;
            resourceInputs["model"] = state?.model;
            resourceInputs["responseMessage"] = state?.responseMessage;
            resourceInputs["responseYaml"] = state?.responseYaml;
        } else {
            const args = argsOrState as ChatArgs | undefined;
            if (args?.context === undefined && !opts.urn) {
                throw new Error("Missing required property 'context'");
            }
            if (args?.environmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if (args?.message === undefined && !opts.urn) {
                throw new Error("Missing required property 'message'");
            }
            resourceInputs["chatId"] = args?.chatId;
            resourceInputs["context"] = args?.context;
            resourceInputs["environmentId"] = args?.environmentId;
            resourceInputs["message"] = args?.message;
            resourceInputs["model"] = args?.model;
            resourceInputs["responseMessage"] = undefined /*out*/;
            resourceInputs["responseYaml"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Chat.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Chat resources.
 */
export interface ChatState {
    chatId?: pulumi.Input<string>;
    context?: pulumi.Input<string>;
    environmentId?: pulumi.Input<number>;
    message?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    responseMessage?: pulumi.Input<string>;
    responseYaml?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Chat resource.
 */
export interface ChatArgs {
    chatId?: pulumi.Input<string>;
    context: pulumi.Input<string>;
    environmentId: pulumi.Input<number>;
    message: pulumi.Input<string>;
    model?: pulumi.Input<string>;
}

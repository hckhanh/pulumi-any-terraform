// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KubernetesNamespaceAccess extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesNamespaceAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesNamespaceAccessState, opts?: pulumi.CustomResourceOptions): KubernetesNamespaceAccess {
        return new KubernetesNamespaceAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/kubernetesNamespaceAccess:KubernetesNamespaceAccess';

    /**
     * Returns true if the given object is an instance of KubernetesNamespaceAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesNamespaceAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesNamespaceAccess.__pulumiType;
    }

    declare public readonly endpointId: pulumi.Output<number>;
    declare public readonly kubernetesNamespaceAccessId: pulumi.Output<string>;
    declare public readonly namespaceId: pulumi.Output<string>;
    declare public readonly teamsToAdds: pulumi.Output<number[] | undefined>;
    declare public readonly teamsToRemoves: pulumi.Output<number[] | undefined>;
    declare public readonly usersToAdds: pulumi.Output<number[] | undefined>;
    declare public readonly usersToRemoves: pulumi.Output<number[] | undefined>;

    /**
     * Create a KubernetesNamespaceAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesNamespaceAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesNamespaceAccessArgs | KubernetesNamespaceAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesNamespaceAccessState | undefined;
            resourceInputs["endpointId"] = state?.endpointId;
            resourceInputs["kubernetesNamespaceAccessId"] = state?.kubernetesNamespaceAccessId;
            resourceInputs["namespaceId"] = state?.namespaceId;
            resourceInputs["teamsToAdds"] = state?.teamsToAdds;
            resourceInputs["teamsToRemoves"] = state?.teamsToRemoves;
            resourceInputs["usersToAdds"] = state?.usersToAdds;
            resourceInputs["usersToRemoves"] = state?.usersToRemoves;
        } else {
            const args = argsOrState as KubernetesNamespaceAccessArgs | undefined;
            if (args?.endpointId === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpointId'");
            }
            if (args?.namespaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespaceId'");
            }
            resourceInputs["endpointId"] = args?.endpointId;
            resourceInputs["kubernetesNamespaceAccessId"] = args?.kubernetesNamespaceAccessId;
            resourceInputs["namespaceId"] = args?.namespaceId;
            resourceInputs["teamsToAdds"] = args?.teamsToAdds;
            resourceInputs["teamsToRemoves"] = args?.teamsToRemoves;
            resourceInputs["usersToAdds"] = args?.usersToAdds;
            resourceInputs["usersToRemoves"] = args?.usersToRemoves;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesNamespaceAccess.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesNamespaceAccess resources.
 */
export interface KubernetesNamespaceAccessState {
    endpointId?: pulumi.Input<number>;
    kubernetesNamespaceAccessId?: pulumi.Input<string>;
    namespaceId?: pulumi.Input<string>;
    teamsToAdds?: pulumi.Input<pulumi.Input<number>[]>;
    teamsToRemoves?: pulumi.Input<pulumi.Input<number>[]>;
    usersToAdds?: pulumi.Input<pulumi.Input<number>[]>;
    usersToRemoves?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a KubernetesNamespaceAccess resource.
 */
export interface KubernetesNamespaceAccessArgs {
    endpointId: pulumi.Input<number>;
    kubernetesNamespaceAccessId?: pulumi.Input<string>;
    namespaceId: pulumi.Input<string>;
    teamsToAdds?: pulumi.Input<pulumi.Input<number>[]>;
    teamsToRemoves?: pulumi.Input<pulumi.Input<number>[]>;
    usersToAdds?: pulumi.Input<pulumi.Input<number>[]>;
    usersToRemoves?: pulumi.Input<pulumi.Input<number>[]>;
}

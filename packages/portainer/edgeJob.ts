// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EdgeJob extends pulumi.CustomResource {
    /**
     * Get an existing EdgeJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgeJobState, opts?: pulumi.CustomResourceOptions): EdgeJob {
        return new EdgeJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/edgeJob:EdgeJob';

    /**
     * Returns true if the given object is an instance of EdgeJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgeJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgeJob.__pulumiType;
    }

    declare public readonly cronExpression: pulumi.Output<string>;
    declare public readonly edgeGroups: pulumi.Output<number[]>;
    declare public readonly edgeJobId: pulumi.Output<string>;
    declare public readonly endpoints: pulumi.Output<number[]>;
    declare public readonly fileContent: pulumi.Output<string | undefined>;
    declare public readonly filePath: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly recurring: pulumi.Output<boolean | undefined>;

    /**
     * Create a EdgeJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgeJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgeJobArgs | EdgeJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgeJobState | undefined;
            resourceInputs["cronExpression"] = state?.cronExpression;
            resourceInputs["edgeGroups"] = state?.edgeGroups;
            resourceInputs["edgeJobId"] = state?.edgeJobId;
            resourceInputs["endpoints"] = state?.endpoints;
            resourceInputs["fileContent"] = state?.fileContent;
            resourceInputs["filePath"] = state?.filePath;
            resourceInputs["name"] = state?.name;
            resourceInputs["recurring"] = state?.recurring;
        } else {
            const args = argsOrState as EdgeJobArgs | undefined;
            if (args?.cronExpression === undefined && !opts.urn) {
                throw new Error("Missing required property 'cronExpression'");
            }
            if (args?.edgeGroups === undefined && !opts.urn) {
                throw new Error("Missing required property 'edgeGroups'");
            }
            if (args?.endpoints === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpoints'");
            }
            resourceInputs["cronExpression"] = args?.cronExpression;
            resourceInputs["edgeGroups"] = args?.edgeGroups;
            resourceInputs["edgeJobId"] = args?.edgeJobId;
            resourceInputs["endpoints"] = args?.endpoints;
            resourceInputs["fileContent"] = args?.fileContent;
            resourceInputs["filePath"] = args?.filePath;
            resourceInputs["name"] = args?.name;
            resourceInputs["recurring"] = args?.recurring;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EdgeJob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EdgeJob resources.
 */
export interface EdgeJobState {
    cronExpression?: pulumi.Input<string>;
    edgeGroups?: pulumi.Input<pulumi.Input<number>[]>;
    edgeJobId?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<number>[]>;
    fileContent?: pulumi.Input<string>;
    filePath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    recurring?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EdgeJob resource.
 */
export interface EdgeJobArgs {
    cronExpression: pulumi.Input<string>;
    edgeGroups: pulumi.Input<pulumi.Input<number>[]>;
    edgeJobId?: pulumi.Input<string>;
    endpoints: pulumi.Input<pulumi.Input<number>[]>;
    fileContent?: pulumi.Input<string>;
    filePath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    recurring?: pulumi.Input<boolean>;
}

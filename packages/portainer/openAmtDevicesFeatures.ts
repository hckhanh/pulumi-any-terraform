// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OpenAmtDevicesFeatures extends pulumi.CustomResource {
    /**
     * Get an existing OpenAmtDevicesFeatures resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpenAmtDevicesFeaturesState, opts?: pulumi.CustomResourceOptions): OpenAmtDevicesFeatures {
        return new OpenAmtDevicesFeatures(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/openAmtDevicesFeatures:OpenAmtDevicesFeatures';

    /**
     * Returns true if the given object is an instance of OpenAmtDevicesFeatures.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpenAmtDevicesFeatures {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpenAmtDevicesFeatures.__pulumiType;
    }

    /**
     * ID of the AMT-managed device.
     */
    declare public readonly deviceId: pulumi.Output<number>;
    /**
     * Portainer environment (endpoint) ID.
     */
    declare public readonly environmentId: pulumi.Output<number>;
    /**
     * Enable IDER (IDE Redirection).
     */
    declare public readonly ider: pulumi.Output<boolean | undefined>;
    /**
     * Enable KVM (Keyboard/Video/Mouse).
     */
    declare public readonly kvm: pulumi.Output<boolean | undefined>;
    declare public readonly openAmtDevicesFeaturesId: pulumi.Output<string>;
    /**
     * Enable redirection.
     */
    declare public readonly redirection: pulumi.Output<boolean | undefined>;
    /**
     * Enable SOL (Serial Over LAN).
     */
    declare public readonly sol: pulumi.Output<boolean | undefined>;
    /**
     * User consent policy (e.g., 'none', 'all', 'kvmOnly').
     */
    declare public readonly userConsent: pulumi.Output<string | undefined>;

    /**
     * Create a OpenAmtDevicesFeatures resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OpenAmtDevicesFeaturesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpenAmtDevicesFeaturesArgs | OpenAmtDevicesFeaturesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpenAmtDevicesFeaturesState | undefined;
            resourceInputs["deviceId"] = state?.deviceId;
            resourceInputs["environmentId"] = state?.environmentId;
            resourceInputs["ider"] = state?.ider;
            resourceInputs["kvm"] = state?.kvm;
            resourceInputs["openAmtDevicesFeaturesId"] = state?.openAmtDevicesFeaturesId;
            resourceInputs["redirection"] = state?.redirection;
            resourceInputs["sol"] = state?.sol;
            resourceInputs["userConsent"] = state?.userConsent;
        } else {
            const args = argsOrState as OpenAmtDevicesFeaturesArgs | undefined;
            if (args?.deviceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if (args?.environmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            resourceInputs["deviceId"] = args?.deviceId;
            resourceInputs["environmentId"] = args?.environmentId;
            resourceInputs["ider"] = args?.ider;
            resourceInputs["kvm"] = args?.kvm;
            resourceInputs["openAmtDevicesFeaturesId"] = args?.openAmtDevicesFeaturesId;
            resourceInputs["redirection"] = args?.redirection;
            resourceInputs["sol"] = args?.sol;
            resourceInputs["userConsent"] = args?.userConsent;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpenAmtDevicesFeatures.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OpenAmtDevicesFeatures resources.
 */
export interface OpenAmtDevicesFeaturesState {
    /**
     * ID of the AMT-managed device.
     */
    deviceId?: pulumi.Input<number>;
    /**
     * Portainer environment (endpoint) ID.
     */
    environmentId?: pulumi.Input<number>;
    /**
     * Enable IDER (IDE Redirection).
     */
    ider?: pulumi.Input<boolean>;
    /**
     * Enable KVM (Keyboard/Video/Mouse).
     */
    kvm?: pulumi.Input<boolean>;
    openAmtDevicesFeaturesId?: pulumi.Input<string>;
    /**
     * Enable redirection.
     */
    redirection?: pulumi.Input<boolean>;
    /**
     * Enable SOL (Serial Over LAN).
     */
    sol?: pulumi.Input<boolean>;
    /**
     * User consent policy (e.g., 'none', 'all', 'kvmOnly').
     */
    userConsent?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OpenAmtDevicesFeatures resource.
 */
export interface OpenAmtDevicesFeaturesArgs {
    /**
     * ID of the AMT-managed device.
     */
    deviceId: pulumi.Input<number>;
    /**
     * Portainer environment (endpoint) ID.
     */
    environmentId: pulumi.Input<number>;
    /**
     * Enable IDER (IDE Redirection).
     */
    ider?: pulumi.Input<boolean>;
    /**
     * Enable KVM (Keyboard/Video/Mouse).
     */
    kvm?: pulumi.Input<boolean>;
    openAmtDevicesFeaturesId?: pulumi.Input<string>;
    /**
     * Enable redirection.
     */
    redirection?: pulumi.Input<boolean>;
    /**
     * Enable SOL (Serial Over LAN).
     */
    sol?: pulumi.Input<boolean>;
    /**
     * User consent policy (e.g., 'none', 'all', 'kvmOnly').
     */
    userConsent?: pulumi.Input<string>;
}

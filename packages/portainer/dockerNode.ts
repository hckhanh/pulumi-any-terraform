// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DockerNode extends pulumi.CustomResource {
    /**
     * Get an existing DockerNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DockerNodeState, opts?: pulumi.CustomResourceOptions): DockerNode {
        return new DockerNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/dockerNode:DockerNode';

    /**
     * Returns true if the given object is an instance of DockerNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DockerNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DockerNode.__pulumiType;
    }

    declare public readonly availability: pulumi.Output<string | undefined>;
    declare public readonly dockerNodeId: pulumi.Output<string>;
    declare public readonly endpointId: pulumi.Output<number>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly nodeId: pulumi.Output<string>;
    declare public readonly role: pulumi.Output<string | undefined>;
    /**
     * Swarm node version required for update operation
     */
    declare public readonly version: pulumi.Output<number>;

    /**
     * Create a DockerNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DockerNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DockerNodeArgs | DockerNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DockerNodeState | undefined;
            resourceInputs["availability"] = state?.availability;
            resourceInputs["dockerNodeId"] = state?.dockerNodeId;
            resourceInputs["endpointId"] = state?.endpointId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeId"] = state?.nodeId;
            resourceInputs["role"] = state?.role;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as DockerNodeArgs | undefined;
            if (args?.endpointId === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpointId'");
            }
            if (args?.nodeId === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodeId'");
            }
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["availability"] = args?.availability;
            resourceInputs["dockerNodeId"] = args?.dockerNodeId;
            resourceInputs["endpointId"] = args?.endpointId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["nodeId"] = args?.nodeId;
            resourceInputs["role"] = args?.role;
            resourceInputs["version"] = args?.version;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DockerNode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DockerNode resources.
 */
export interface DockerNodeState {
    availability?: pulumi.Input<string>;
    dockerNodeId?: pulumi.Input<string>;
    endpointId?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    nodeId?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    /**
     * Swarm node version required for update operation
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DockerNode resource.
 */
export interface DockerNodeArgs {
    availability?: pulumi.Input<string>;
    dockerNodeId?: pulumi.Input<string>;
    endpointId: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    nodeId: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    /**
     * Swarm node version required for update operation
     */
    version: pulumi.Input<number>;
}

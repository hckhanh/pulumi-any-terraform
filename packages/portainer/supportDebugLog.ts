// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SupportDebugLog extends pulumi.CustomResource {
    /**
     * Get an existing SupportDebugLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SupportDebugLogState, opts?: pulumi.CustomResourceOptions): SupportDebugLog {
        return new SupportDebugLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/supportDebugLog:SupportDebugLog';

    /**
     * Returns true if the given object is an instance of SupportDebugLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SupportDebugLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SupportDebugLog.__pulumiType;
    }

    /**
     * Enable or disable the global debug log
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    declare public readonly supportDebugLogId: pulumi.Output<string>;

    /**
     * Create a SupportDebugLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SupportDebugLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SupportDebugLogArgs | SupportDebugLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SupportDebugLogState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["supportDebugLogId"] = state?.supportDebugLogId;
        } else {
            const args = argsOrState as SupportDebugLogArgs | undefined;
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["supportDebugLogId"] = args?.supportDebugLogId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SupportDebugLog.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SupportDebugLog resources.
 */
export interface SupportDebugLogState {
    /**
     * Enable or disable the global debug log
     */
    enabled?: pulumi.Input<boolean>;
    supportDebugLogId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SupportDebugLog resource.
 */
export interface SupportDebugLogArgs {
    /**
     * Enable or disable the global debug log
     */
    enabled: pulumi.Input<boolean>;
    supportDebugLogId?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Settings extends pulumi.CustomResource {
    /**
     * Get an existing Settings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingsState, opts?: pulumi.CustomResourceOptions): Settings {
        return new Settings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/settings:Settings';

    /**
     * Returns true if the given object is an instance of Settings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Settings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Settings.__pulumiType;
    }

    declare public readonly authenticationMethod: pulumi.Output<number>;
    declare public readonly blackListedLabels: pulumi.Output<outputs.SettingsBlackListedLabel[] | undefined>;
    declare public readonly disableKubeRolesSync: pulumi.Output<boolean>;
    declare public readonly disableKubeShell: pulumi.Output<boolean>;
    declare public readonly disableKubeconfigDownload: pulumi.Output<boolean>;
    declare public readonly displayDonationHeader: pulumi.Output<boolean>;
    declare public readonly displayExternalContributors: pulumi.Output<boolean>;
    declare public readonly edgeAgentCheckinInterval: pulumi.Output<number>;
    declare public readonly edgePortainerUrl: pulumi.Output<string>;
    declare public readonly enableEdgeComputeFeatures: pulumi.Output<boolean>;
    declare public readonly enableTelemetry: pulumi.Output<boolean>;
    declare public readonly enforceEdgeId: pulumi.Output<boolean>;
    declare public readonly globalDeploymentOptions: pulumi.Output<outputs.SettingsGlobalDeploymentOptions | undefined>;
    declare public readonly helmRepositoryUrl: pulumi.Output<string>;
    declare public readonly internalAuthSettings: pulumi.Output<outputs.SettingsInternalAuthSettings | undefined>;
    declare public readonly isDockerDesktopExtension: pulumi.Output<boolean>;
    declare public readonly kubeconfigExpiry: pulumi.Output<string>;
    declare public readonly kubectlShellImage: pulumi.Output<string>;
    declare public readonly ldapSettings: pulumi.Output<outputs.SettingsLdapSettings | undefined>;
    declare public readonly logoUrl: pulumi.Output<string>;
    declare public readonly oauthSettings: pulumi.Output<outputs.SettingsOauthSettings | undefined>;
    declare public readonly settingsId: pulumi.Output<string>;
    declare public readonly snapshotInterval: pulumi.Output<string>;
    declare public readonly templatesUrl: pulumi.Output<string>;
    declare public readonly trustOnFirstConnect: pulumi.Output<boolean>;
    declare public readonly userSessionTimeout: pulumi.Output<string>;

    /**
     * Create a Settings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingsArgs | SettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingsState | undefined;
            resourceInputs["authenticationMethod"] = state?.authenticationMethod;
            resourceInputs["blackListedLabels"] = state?.blackListedLabels;
            resourceInputs["disableKubeRolesSync"] = state?.disableKubeRolesSync;
            resourceInputs["disableKubeShell"] = state?.disableKubeShell;
            resourceInputs["disableKubeconfigDownload"] = state?.disableKubeconfigDownload;
            resourceInputs["displayDonationHeader"] = state?.displayDonationHeader;
            resourceInputs["displayExternalContributors"] = state?.displayExternalContributors;
            resourceInputs["edgeAgentCheckinInterval"] = state?.edgeAgentCheckinInterval;
            resourceInputs["edgePortainerUrl"] = state?.edgePortainerUrl;
            resourceInputs["enableEdgeComputeFeatures"] = state?.enableEdgeComputeFeatures;
            resourceInputs["enableTelemetry"] = state?.enableTelemetry;
            resourceInputs["enforceEdgeId"] = state?.enforceEdgeId;
            resourceInputs["globalDeploymentOptions"] = state?.globalDeploymentOptions;
            resourceInputs["helmRepositoryUrl"] = state?.helmRepositoryUrl;
            resourceInputs["internalAuthSettings"] = state?.internalAuthSettings;
            resourceInputs["isDockerDesktopExtension"] = state?.isDockerDesktopExtension;
            resourceInputs["kubeconfigExpiry"] = state?.kubeconfigExpiry;
            resourceInputs["kubectlShellImage"] = state?.kubectlShellImage;
            resourceInputs["ldapSettings"] = state?.ldapSettings;
            resourceInputs["logoUrl"] = state?.logoUrl;
            resourceInputs["oauthSettings"] = state?.oauthSettings;
            resourceInputs["settingsId"] = state?.settingsId;
            resourceInputs["snapshotInterval"] = state?.snapshotInterval;
            resourceInputs["templatesUrl"] = state?.templatesUrl;
            resourceInputs["trustOnFirstConnect"] = state?.trustOnFirstConnect;
            resourceInputs["userSessionTimeout"] = state?.userSessionTimeout;
        } else {
            const args = argsOrState as SettingsArgs | undefined;
            resourceInputs["authenticationMethod"] = args?.authenticationMethod;
            resourceInputs["blackListedLabels"] = args?.blackListedLabels;
            resourceInputs["disableKubeRolesSync"] = args?.disableKubeRolesSync;
            resourceInputs["disableKubeShell"] = args?.disableKubeShell;
            resourceInputs["disableKubeconfigDownload"] = args?.disableKubeconfigDownload;
            resourceInputs["displayDonationHeader"] = args?.displayDonationHeader;
            resourceInputs["displayExternalContributors"] = args?.displayExternalContributors;
            resourceInputs["edgeAgentCheckinInterval"] = args?.edgeAgentCheckinInterval;
            resourceInputs["edgePortainerUrl"] = args?.edgePortainerUrl;
            resourceInputs["enableEdgeComputeFeatures"] = args?.enableEdgeComputeFeatures;
            resourceInputs["enableTelemetry"] = args?.enableTelemetry;
            resourceInputs["enforceEdgeId"] = args?.enforceEdgeId;
            resourceInputs["globalDeploymentOptions"] = args?.globalDeploymentOptions;
            resourceInputs["helmRepositoryUrl"] = args?.helmRepositoryUrl;
            resourceInputs["internalAuthSettings"] = args?.internalAuthSettings;
            resourceInputs["isDockerDesktopExtension"] = args?.isDockerDesktopExtension;
            resourceInputs["kubeconfigExpiry"] = args?.kubeconfigExpiry;
            resourceInputs["kubectlShellImage"] = args?.kubectlShellImage;
            resourceInputs["ldapSettings"] = args?.ldapSettings;
            resourceInputs["logoUrl"] = args?.logoUrl;
            resourceInputs["oauthSettings"] = args?.oauthSettings;
            resourceInputs["settingsId"] = args?.settingsId;
            resourceInputs["snapshotInterval"] = args?.snapshotInterval;
            resourceInputs["templatesUrl"] = args?.templatesUrl;
            resourceInputs["trustOnFirstConnect"] = args?.trustOnFirstConnect;
            resourceInputs["userSessionTimeout"] = args?.userSessionTimeout;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Settings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Settings resources.
 */
export interface SettingsState {
    authenticationMethod?: pulumi.Input<number>;
    blackListedLabels?: pulumi.Input<pulumi.Input<inputs.SettingsBlackListedLabel>[]>;
    disableKubeRolesSync?: pulumi.Input<boolean>;
    disableKubeShell?: pulumi.Input<boolean>;
    disableKubeconfigDownload?: pulumi.Input<boolean>;
    displayDonationHeader?: pulumi.Input<boolean>;
    displayExternalContributors?: pulumi.Input<boolean>;
    edgeAgentCheckinInterval?: pulumi.Input<number>;
    edgePortainerUrl?: pulumi.Input<string>;
    enableEdgeComputeFeatures?: pulumi.Input<boolean>;
    enableTelemetry?: pulumi.Input<boolean>;
    enforceEdgeId?: pulumi.Input<boolean>;
    globalDeploymentOptions?: pulumi.Input<inputs.SettingsGlobalDeploymentOptions>;
    helmRepositoryUrl?: pulumi.Input<string>;
    internalAuthSettings?: pulumi.Input<inputs.SettingsInternalAuthSettings>;
    isDockerDesktopExtension?: pulumi.Input<boolean>;
    kubeconfigExpiry?: pulumi.Input<string>;
    kubectlShellImage?: pulumi.Input<string>;
    ldapSettings?: pulumi.Input<inputs.SettingsLdapSettings>;
    logoUrl?: pulumi.Input<string>;
    oauthSettings?: pulumi.Input<inputs.SettingsOauthSettings>;
    settingsId?: pulumi.Input<string>;
    snapshotInterval?: pulumi.Input<string>;
    templatesUrl?: pulumi.Input<string>;
    trustOnFirstConnect?: pulumi.Input<boolean>;
    userSessionTimeout?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Settings resource.
 */
export interface SettingsArgs {
    authenticationMethod?: pulumi.Input<number>;
    blackListedLabels?: pulumi.Input<pulumi.Input<inputs.SettingsBlackListedLabel>[]>;
    disableKubeRolesSync?: pulumi.Input<boolean>;
    disableKubeShell?: pulumi.Input<boolean>;
    disableKubeconfigDownload?: pulumi.Input<boolean>;
    displayDonationHeader?: pulumi.Input<boolean>;
    displayExternalContributors?: pulumi.Input<boolean>;
    edgeAgentCheckinInterval?: pulumi.Input<number>;
    edgePortainerUrl?: pulumi.Input<string>;
    enableEdgeComputeFeatures?: pulumi.Input<boolean>;
    enableTelemetry?: pulumi.Input<boolean>;
    enforceEdgeId?: pulumi.Input<boolean>;
    globalDeploymentOptions?: pulumi.Input<inputs.SettingsGlobalDeploymentOptions>;
    helmRepositoryUrl?: pulumi.Input<string>;
    internalAuthSettings?: pulumi.Input<inputs.SettingsInternalAuthSettings>;
    isDockerDesktopExtension?: pulumi.Input<boolean>;
    kubeconfigExpiry?: pulumi.Input<string>;
    kubectlShellImage?: pulumi.Input<string>;
    ldapSettings?: pulumi.Input<inputs.SettingsLdapSettings>;
    logoUrl?: pulumi.Input<string>;
    oauthSettings?: pulumi.Input<inputs.SettingsOauthSettings>;
    settingsId?: pulumi.Input<string>;
    snapshotInterval?: pulumi.Input<string>;
    templatesUrl?: pulumi.Input<string>;
    trustOnFirstConnect?: pulumi.Input<boolean>;
    userSessionTimeout?: pulumi.Input<string>;
}

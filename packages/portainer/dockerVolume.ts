// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DockerVolume extends pulumi.CustomResource {
    /**
     * Get an existing DockerVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DockerVolumeState, opts?: pulumi.CustomResourceOptions): DockerVolume {
        return new DockerVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/dockerVolume:DockerVolume';

    /**
     * Returns true if the given object is an instance of DockerVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DockerVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DockerVolume.__pulumiType;
    }

    declare public readonly clusterVolumeSpecs: pulumi.Output<outputs.DockerVolumeClusterVolumeSpec[] | undefined>;
    declare public readonly dockerVolumeId: pulumi.Output<string>;
    declare public readonly driver: pulumi.Output<string | undefined>;
    declare public readonly driverOpts: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly endpointId: pulumi.Output<number>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a DockerVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DockerVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DockerVolumeArgs | DockerVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DockerVolumeState | undefined;
            resourceInputs["clusterVolumeSpecs"] = state?.clusterVolumeSpecs;
            resourceInputs["dockerVolumeId"] = state?.dockerVolumeId;
            resourceInputs["driver"] = state?.driver;
            resourceInputs["driverOpts"] = state?.driverOpts;
            resourceInputs["endpointId"] = state?.endpointId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as DockerVolumeArgs | undefined;
            if (args?.endpointId === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpointId'");
            }
            resourceInputs["clusterVolumeSpecs"] = args?.clusterVolumeSpecs;
            resourceInputs["dockerVolumeId"] = args?.dockerVolumeId;
            resourceInputs["driver"] = args?.driver;
            resourceInputs["driverOpts"] = args?.driverOpts;
            resourceInputs["endpointId"] = args?.endpointId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DockerVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DockerVolume resources.
 */
export interface DockerVolumeState {
    clusterVolumeSpecs?: pulumi.Input<pulumi.Input<inputs.DockerVolumeClusterVolumeSpec>[]>;
    dockerVolumeId?: pulumi.Input<string>;
    driver?: pulumi.Input<string>;
    driverOpts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endpointId?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DockerVolume resource.
 */
export interface DockerVolumeArgs {
    clusterVolumeSpecs?: pulumi.Input<pulumi.Input<inputs.DockerVolumeClusterVolumeSpec>[]>;
    dockerVolumeId?: pulumi.Input<string>;
    driver?: pulumi.Input<string>;
    driverOpts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endpointId: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DockerNetwork extends pulumi.CustomResource {
    /**
     * Get an existing DockerNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DockerNetworkState, opts?: pulumi.CustomResourceOptions): DockerNetwork {
        return new DockerNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/dockerNetwork:DockerNetwork';

    /**
     * Returns true if the given object is an instance of DockerNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DockerNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DockerNetwork.__pulumiType;
    }

    declare public readonly attachable: pulumi.Output<boolean | undefined>;
    declare public readonly configFrom: pulumi.Output<string | undefined>;
    declare public readonly configOnly: pulumi.Output<boolean | undefined>;
    declare public readonly dockerNetworkId: pulumi.Output<string>;
    declare public readonly driver: pulumi.Output<string | undefined>;
    declare public readonly enableIpv4: pulumi.Output<boolean | undefined>;
    declare public readonly enableIpv6: pulumi.Output<boolean | undefined>;
    declare public readonly endpointId: pulumi.Output<number>;
    declare public readonly ingress: pulumi.Output<boolean | undefined>;
    declare public readonly internal: pulumi.Output<boolean | undefined>;
    declare public readonly ipamConfigs: pulumi.Output<outputs.DockerNetworkIpamConfig[] | undefined>;
    declare public readonly ipamDriver: pulumi.Output<string | undefined>;
    declare public readonly ipamOptions: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly options: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly scope: pulumi.Output<string | undefined>;
    declare public readonly swarmNodeId: pulumi.Output<string | undefined>;

    /**
     * Create a DockerNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DockerNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DockerNetworkArgs | DockerNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DockerNetworkState | undefined;
            resourceInputs["attachable"] = state?.attachable;
            resourceInputs["configFrom"] = state?.configFrom;
            resourceInputs["configOnly"] = state?.configOnly;
            resourceInputs["dockerNetworkId"] = state?.dockerNetworkId;
            resourceInputs["driver"] = state?.driver;
            resourceInputs["enableIpv4"] = state?.enableIpv4;
            resourceInputs["enableIpv6"] = state?.enableIpv6;
            resourceInputs["endpointId"] = state?.endpointId;
            resourceInputs["ingress"] = state?.ingress;
            resourceInputs["internal"] = state?.internal;
            resourceInputs["ipamConfigs"] = state?.ipamConfigs;
            resourceInputs["ipamDriver"] = state?.ipamDriver;
            resourceInputs["ipamOptions"] = state?.ipamOptions;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["options"] = state?.options;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["swarmNodeId"] = state?.swarmNodeId;
        } else {
            const args = argsOrState as DockerNetworkArgs | undefined;
            if (args?.endpointId === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpointId'");
            }
            resourceInputs["attachable"] = args?.attachable;
            resourceInputs["configFrom"] = args?.configFrom;
            resourceInputs["configOnly"] = args?.configOnly;
            resourceInputs["dockerNetworkId"] = args?.dockerNetworkId;
            resourceInputs["driver"] = args?.driver;
            resourceInputs["enableIpv4"] = args?.enableIpv4;
            resourceInputs["enableIpv6"] = args?.enableIpv6;
            resourceInputs["endpointId"] = args?.endpointId;
            resourceInputs["ingress"] = args?.ingress;
            resourceInputs["internal"] = args?.internal;
            resourceInputs["ipamConfigs"] = args?.ipamConfigs;
            resourceInputs["ipamDriver"] = args?.ipamDriver;
            resourceInputs["ipamOptions"] = args?.ipamOptions;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["options"] = args?.options;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["swarmNodeId"] = args?.swarmNodeId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DockerNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DockerNetwork resources.
 */
export interface DockerNetworkState {
    attachable?: pulumi.Input<boolean>;
    configFrom?: pulumi.Input<string>;
    configOnly?: pulumi.Input<boolean>;
    dockerNetworkId?: pulumi.Input<string>;
    driver?: pulumi.Input<string>;
    enableIpv4?: pulumi.Input<boolean>;
    enableIpv6?: pulumi.Input<boolean>;
    endpointId?: pulumi.Input<number>;
    ingress?: pulumi.Input<boolean>;
    internal?: pulumi.Input<boolean>;
    ipamConfigs?: pulumi.Input<pulumi.Input<inputs.DockerNetworkIpamConfig>[]>;
    ipamDriver?: pulumi.Input<string>;
    ipamOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    scope?: pulumi.Input<string>;
    swarmNodeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DockerNetwork resource.
 */
export interface DockerNetworkArgs {
    attachable?: pulumi.Input<boolean>;
    configFrom?: pulumi.Input<string>;
    configOnly?: pulumi.Input<boolean>;
    dockerNetworkId?: pulumi.Input<string>;
    driver?: pulumi.Input<string>;
    enableIpv4?: pulumi.Input<boolean>;
    enableIpv6?: pulumi.Input<boolean>;
    endpointId: pulumi.Input<number>;
    ingress?: pulumi.Input<boolean>;
    internal?: pulumi.Input<boolean>;
    ipamConfigs?: pulumi.Input<pulumi.Input<inputs.DockerNetworkIpamConfig>[]>;
    ipamDriver?: pulumi.Input<string>;
    ipamOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    scope?: pulumi.Input<string>;
    swarmNodeId?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Check extends pulumi.CustomResource {
    /**
     * Get an existing Check resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CheckState, opts?: pulumi.CustomResourceOptions): Check {
        return new Check(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/check:Check';

    /**
     * Returns true if the given object is an instance of Check.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Check {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Check.__pulumiType;
    }

    declare public readonly checkId: pulumi.Output<string>;
    /**
     * Desired container state (e.g. running).
     */
    declare public readonly desiredState: pulumi.Output<string | undefined>;
    declare public readonly endpointId: pulumi.Output<number>;
    /**
     * Maximum retries for each service check.
     */
    declare public readonly maxRetries: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly output: pulumi.Output<string>;
    /**
     * Expected revision (image tag) of running containers/services.
     */
    declare public readonly revision: pulumi.Output<string>;
    /**
     * Comma-separated list of service names (without stack prefix).
     */
    declare public readonly servicesList: pulumi.Output<string>;
    declare public readonly stackName: pulumi.Output<string>;
    /**
     * Initial wait before the first check (seconds).
     */
    declare public readonly wait: pulumi.Output<number | undefined>;
    /**
     * Wait time between retry checks (seconds).
     */
    declare public readonly waitBetweenChecks: pulumi.Output<number | undefined>;

    /**
     * Create a Check resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CheckArgs | CheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CheckState | undefined;
            resourceInputs["checkId"] = state?.checkId;
            resourceInputs["desiredState"] = state?.desiredState;
            resourceInputs["endpointId"] = state?.endpointId;
            resourceInputs["maxRetries"] = state?.maxRetries;
            resourceInputs["output"] = state?.output;
            resourceInputs["revision"] = state?.revision;
            resourceInputs["servicesList"] = state?.servicesList;
            resourceInputs["stackName"] = state?.stackName;
            resourceInputs["wait"] = state?.wait;
            resourceInputs["waitBetweenChecks"] = state?.waitBetweenChecks;
        } else {
            const args = argsOrState as CheckArgs | undefined;
            if (args?.endpointId === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpointId'");
            }
            if (args?.revision === undefined && !opts.urn) {
                throw new Error("Missing required property 'revision'");
            }
            if (args?.servicesList === undefined && !opts.urn) {
                throw new Error("Missing required property 'servicesList'");
            }
            if (args?.stackName === undefined && !opts.urn) {
                throw new Error("Missing required property 'stackName'");
            }
            resourceInputs["checkId"] = args?.checkId;
            resourceInputs["desiredState"] = args?.desiredState;
            resourceInputs["endpointId"] = args?.endpointId;
            resourceInputs["maxRetries"] = args?.maxRetries;
            resourceInputs["revision"] = args?.revision;
            resourceInputs["servicesList"] = args?.servicesList;
            resourceInputs["stackName"] = args?.stackName;
            resourceInputs["wait"] = args?.wait;
            resourceInputs["waitBetweenChecks"] = args?.waitBetweenChecks;
            resourceInputs["output"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Check.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Check resources.
 */
export interface CheckState {
    checkId?: pulumi.Input<string>;
    /**
     * Desired container state (e.g. running).
     */
    desiredState?: pulumi.Input<string>;
    endpointId?: pulumi.Input<number>;
    /**
     * Maximum retries for each service check.
     */
    maxRetries?: pulumi.Input<number>;
    output?: pulumi.Input<string>;
    /**
     * Expected revision (image tag) of running containers/services.
     */
    revision?: pulumi.Input<string>;
    /**
     * Comma-separated list of service names (without stack prefix).
     */
    servicesList?: pulumi.Input<string>;
    stackName?: pulumi.Input<string>;
    /**
     * Initial wait before the first check (seconds).
     */
    wait?: pulumi.Input<number>;
    /**
     * Wait time between retry checks (seconds).
     */
    waitBetweenChecks?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Check resource.
 */
export interface CheckArgs {
    checkId?: pulumi.Input<string>;
    /**
     * Desired container state (e.g. running).
     */
    desiredState?: pulumi.Input<string>;
    endpointId: pulumi.Input<number>;
    /**
     * Maximum retries for each service check.
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Expected revision (image tag) of running containers/services.
     */
    revision: pulumi.Input<string>;
    /**
     * Comma-separated list of service names (without stack prefix).
     */
    servicesList: pulumi.Input<string>;
    stackName: pulumi.Input<string>;
    /**
     * Initial wait before the first check (seconds).
     */
    wait?: pulumi.Input<number>;
    /**
     * Wait time between retry checks (seconds).
     */
    waitBetweenChecks?: pulumi.Input<number>;
}

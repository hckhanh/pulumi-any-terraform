// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesIngresses extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesIngresses resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesIngressesState, opts?: pulumi.CustomResourceOptions): KubernetesIngresses {
        return new KubernetesIngresses(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/kubernetesIngresses:KubernetesIngresses';

    /**
     * Returns true if the given object is an instance of KubernetesIngresses.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesIngresses {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesIngresses.__pulumiType;
    }

    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly className: pulumi.Output<string | undefined>;
    declare public readonly environmentId: pulumi.Output<number>;
    declare public readonly hosts: pulumi.Output<string[] | undefined>;
    declare public readonly kubernetesIngressesId: pulumi.Output<string>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly namespace: pulumi.Output<string>;
    declare public readonly paths: pulumi.Output<outputs.KubernetesIngressesPath[] | undefined>;
    declare public readonly tls: pulumi.Output<outputs.KubernetesIngressesTl[] | undefined>;

    /**
     * Create a KubernetesIngresses resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesIngressesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesIngressesArgs | KubernetesIngressesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesIngressesState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["className"] = state?.className;
            resourceInputs["environmentId"] = state?.environmentId;
            resourceInputs["hosts"] = state?.hosts;
            resourceInputs["kubernetesIngressesId"] = state?.kubernetesIngressesId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["paths"] = state?.paths;
            resourceInputs["tls"] = state?.tls;
        } else {
            const args = argsOrState as KubernetesIngressesArgs | undefined;
            if (args?.environmentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if (args?.namespace === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["className"] = args?.className;
            resourceInputs["environmentId"] = args?.environmentId;
            resourceInputs["hosts"] = args?.hosts;
            resourceInputs["kubernetesIngressesId"] = args?.kubernetesIngressesId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["paths"] = args?.paths;
            resourceInputs["tls"] = args?.tls;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesIngresses.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesIngresses resources.
 */
export interface KubernetesIngressesState {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    className?: pulumi.Input<string>;
    environmentId?: pulumi.Input<number>;
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    kubernetesIngressesId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.KubernetesIngressesPath>[]>;
    tls?: pulumi.Input<pulumi.Input<inputs.KubernetesIngressesTl>[]>;
}

/**
 * The set of arguments for constructing a KubernetesIngresses resource.
 */
export interface KubernetesIngressesArgs {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    className?: pulumi.Input<string>;
    environmentId: pulumi.Input<number>;
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    kubernetesIngressesId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.KubernetesIngressesPath>[]>;
    tls?: pulumi.Input<pulumi.Input<inputs.KubernetesIngressesTl>[]>;
}

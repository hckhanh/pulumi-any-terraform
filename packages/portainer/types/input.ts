// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DockerNetworkIpamConfig {
    auxiliaryAddresses?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    gateway?: pulumi.Input<string>;
    ipRange?: pulumi.Input<string>;
    subnet: pulumi.Input<string>;
}

export interface DockerPluginSetting {
    description?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DockerVolumeClusterVolumeSpec {
    accessMode?: pulumi.Input<inputs.DockerVolumeClusterVolumeSpecAccessMode>;
    accessibilityRequirements?: pulumi.Input<inputs.DockerVolumeClusterVolumeSpecAccessibilityRequirements>;
    availability?: pulumi.Input<string>;
    capacityRange?: pulumi.Input<inputs.DockerVolumeClusterVolumeSpecCapacityRange>;
    group?: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.DockerVolumeClusterVolumeSpecSecret>[]>;
}

export interface DockerVolumeClusterVolumeSpecAccessMode {
    mountVolume?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    scope?: pulumi.Input<string>;
    sharing?: pulumi.Input<string>;
}

export interface DockerVolumeClusterVolumeSpecAccessibilityRequirements {
    preferreds?: pulumi.Input<pulumi.Input<inputs.DockerVolumeClusterVolumeSpecAccessibilityRequirementsPreferred>[]>;
    requisites?: pulumi.Input<pulumi.Input<inputs.DockerVolumeClusterVolumeSpecAccessibilityRequirementsRequisite>[]>;
}

export interface DockerVolumeClusterVolumeSpecAccessibilityRequirementsPreferred {
    property1?: pulumi.Input<string>;
    property2?: pulumi.Input<string>;
}

export interface DockerVolumeClusterVolumeSpecAccessibilityRequirementsRequisite {
    property1?: pulumi.Input<string>;
    property2?: pulumi.Input<string>;
}

export interface DockerVolumeClusterVolumeSpecCapacityRange {
    limitBytes?: pulumi.Input<number>;
    requiredBytes?: pulumi.Input<number>;
}

export interface DockerVolumeClusterVolumeSpecSecret {
    key: pulumi.Input<string>;
    secret: pulumi.Input<string>;
}

export interface EndpointSettingsChangeWindow {
    enabled?: pulumi.Input<boolean>;
    endTime?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
}

export interface EndpointSettingsDeploymentOptions {
    hideAddWithForm?: pulumi.Input<boolean>;
    hideFileUpload?: pulumi.Input<boolean>;
    hideWebEditor?: pulumi.Input<boolean>;
    overrideGlobalOptions?: pulumi.Input<boolean>;
}

export interface EndpointSettingsGpus {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface EndpointSettingsSecuritySettings {
    allowBindMounts?: pulumi.Input<boolean>;
    allowContainerCapabilities?: pulumi.Input<boolean>;
    allowDeviceMapping?: pulumi.Input<boolean>;
    allowHostNamespace?: pulumi.Input<boolean>;
    allowPrivilegedMode?: pulumi.Input<boolean>;
    allowStackManagement?: pulumi.Input<boolean>;
    allowSysctlSetting?: pulumi.Input<boolean>;
    allowVolumeBrowser?: pulumi.Input<boolean>;
    enableHostManagement?: pulumi.Input<boolean>;
}

export interface KubernetesIngresscontrollersController {
    availability: pulumi.Input<boolean>;
    className: pulumi.Input<string>;
    name: pulumi.Input<string>;
    new: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    used: pulumi.Input<boolean>;
}

export interface KubernetesIngressesPath {
    host: pulumi.Input<string>;
    path: pulumi.Input<string>;
    pathType: pulumi.Input<string>;
    port: pulumi.Input<number>;
    serviceName: pulumi.Input<string>;
}

export interface KubernetesIngressesTl {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    secretName?: pulumi.Input<string>;
}

export interface KubernetesNamespaceIngresscontrollersController {
    availability: pulumi.Input<boolean>;
    className: pulumi.Input<string>;
    name: pulumi.Input<string>;
    new: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    used: pulumi.Input<boolean>;
}

export interface SettingsBlackListedLabel {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SettingsGlobalDeploymentOptions {
    hideStacksFunctionality?: pulumi.Input<boolean>;
}

export interface SettingsInternalAuthSettings {
    requiredPasswordLength?: pulumi.Input<number>;
}

export interface SettingsLdapSettings {
    anonymousMode?: pulumi.Input<boolean>;
    autoCreateUsers?: pulumi.Input<boolean>;
    groupSearchSettings?: pulumi.Input<pulumi.Input<inputs.SettingsLdapSettingsGroupSearchSetting>[]>;
    password?: pulumi.Input<string>;
    readerDn?: pulumi.Input<string>;
    searchSettings?: pulumi.Input<pulumi.Input<inputs.SettingsLdapSettingsSearchSetting>[]>;
    startTls?: pulumi.Input<boolean>;
    tlsConfig?: pulumi.Input<inputs.SettingsLdapSettingsTlsConfig>;
    url?: pulumi.Input<string>;
}

export interface SettingsLdapSettingsGroupSearchSetting {
    groupAttribute?: pulumi.Input<string>;
    groupBaseDn?: pulumi.Input<string>;
    groupFilter?: pulumi.Input<string>;
}

export interface SettingsLdapSettingsSearchSetting {
    baseDn?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    userNameAttribute?: pulumi.Input<string>;
}

export interface SettingsLdapSettingsTlsConfig {
    tls?: pulumi.Input<boolean>;
    tlsCaCert?: pulumi.Input<string>;
    tlsCert?: pulumi.Input<string>;
    tlsKey?: pulumi.Input<string>;
    tlsSkipVerify?: pulumi.Input<boolean>;
}

export interface SettingsOauthSettings {
    accessTokenUri?: pulumi.Input<string>;
    authStyle?: pulumi.Input<number>;
    authorizationUri?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    defaultTeamId?: pulumi.Input<number>;
    kubeSecretKeys?: pulumi.Input<pulumi.Input<number>[]>;
    logoutUri?: pulumi.Input<string>;
    oauthAutoCreateUsers?: pulumi.Input<boolean>;
    redirectUri?: pulumi.Input<string>;
    resourceUri?: pulumi.Input<string>;
    scopes?: pulumi.Input<string>;
    sso?: pulumi.Input<boolean>;
    userIdentifier?: pulumi.Input<string>;
}

export interface StackEnv {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

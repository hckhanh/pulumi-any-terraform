// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookState, opts?: pulumi.CustomResourceOptions): Webhook {
        return new Webhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/webhook:Webhook';

    /**
     * Returns true if the given object is an instance of Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Webhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Webhook.__pulumiType;
    }

    declare public readonly endpointId: pulumi.Output<number>;
    declare public readonly registryId: pulumi.Output<number | undefined>;
    declare public readonly resourceId: pulumi.Output<string>;
    declare public /*out*/ readonly token: pulumi.Output<string>;
    declare public readonly webhookId: pulumi.Output<string>;
    declare public readonly webhookType: pulumi.Output<number>;

    /**
     * Create a Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookArgs | WebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookState | undefined;
            resourceInputs["endpointId"] = state?.endpointId;
            resourceInputs["registryId"] = state?.registryId;
            resourceInputs["resourceId"] = state?.resourceId;
            resourceInputs["token"] = state?.token;
            resourceInputs["webhookId"] = state?.webhookId;
            resourceInputs["webhookType"] = state?.webhookType;
        } else {
            const args = argsOrState as WebhookArgs | undefined;
            if (args?.endpointId === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpointId'");
            }
            if (args?.resourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if (args?.webhookType === undefined && !opts.urn) {
                throw new Error("Missing required property 'webhookType'");
            }
            resourceInputs["endpointId"] = args?.endpointId;
            resourceInputs["registryId"] = args?.registryId;
            resourceInputs["resourceId"] = args?.resourceId;
            resourceInputs["webhookId"] = args?.webhookId;
            resourceInputs["webhookType"] = args?.webhookType;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Webhook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Webhook resources.
 */
export interface WebhookState {
    endpointId?: pulumi.Input<number>;
    registryId?: pulumi.Input<number>;
    resourceId?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
    webhookId?: pulumi.Input<string>;
    webhookType?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Webhook resource.
 */
export interface WebhookArgs {
    endpointId: pulumi.Input<number>;
    registryId?: pulumi.Input<number>;
    resourceId: pulumi.Input<string>;
    webhookId?: pulumi.Input<string>;
    webhookType: pulumi.Input<number>;
}

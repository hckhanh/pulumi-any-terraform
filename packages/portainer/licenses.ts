// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Licenses extends pulumi.CustomResource {
    /**
     * Get an existing Licenses resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicensesState, opts?: pulumi.CustomResourceOptions): Licenses {
        return new Licenses(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/licenses:Licenses';

    /**
     * Returns true if the given object is an instance of Licenses.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Licenses {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Licenses.__pulumiType;
    }

    /**
     * List of conflicting license keys, if any
     */
    declare public /*out*/ readonly conflictingKeys: pulumi.Output<string[]>;
    /**
     * Force attach even if there are conflicting licenses
     */
    declare public readonly force: pulumi.Output<boolean | undefined>;
    /**
     * License key to be attached
     */
    declare public readonly key: pulumi.Output<string>;
    declare public readonly licensesId: pulumi.Output<string>;

    /**
     * Create a Licenses resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicensesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicensesArgs | LicensesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicensesState | undefined;
            resourceInputs["conflictingKeys"] = state?.conflictingKeys;
            resourceInputs["force"] = state?.force;
            resourceInputs["key"] = state?.key;
            resourceInputs["licensesId"] = state?.licensesId;
        } else {
            const args = argsOrState as LicensesArgs | undefined;
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["force"] = args?.force;
            resourceInputs["key"] = args?.key ? pulumi.secret(args.key) : undefined;
            resourceInputs["licensesId"] = args?.licensesId;
            resourceInputs["conflictingKeys"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Licenses.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Licenses resources.
 */
export interface LicensesState {
    /**
     * List of conflicting license keys, if any
     */
    conflictingKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Force attach even if there are conflicting licenses
     */
    force?: pulumi.Input<boolean>;
    /**
     * License key to be attached
     */
    key?: pulumi.Input<string>;
    licensesId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Licenses resource.
 */
export interface LicensesArgs {
    /**
     * Force attach even if there are conflicting licenses
     */
    force?: pulumi.Input<boolean>;
    /**
     * License key to be attached
     */
    key: pulumi.Input<string>;
    licensesId?: pulumi.Input<string>;
}

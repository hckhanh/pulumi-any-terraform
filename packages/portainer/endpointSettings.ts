// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EndpointSettings extends pulumi.CustomResource {
    /**
     * Get an existing EndpointSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointSettingsState, opts?: pulumi.CustomResourceOptions): EndpointSettings {
        return new EndpointSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/endpointSettings:EndpointSettings';

    /**
     * Returns true if the given object is an instance of EndpointSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EndpointSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EndpointSettings.__pulumiType;
    }

    declare public readonly changeWindow: pulumi.Output<outputs.EndpointSettingsChangeWindow | undefined>;
    declare public readonly deploymentOptions: pulumi.Output<outputs.EndpointSettingsDeploymentOptions | undefined>;
    declare public readonly enableGpuManagement: pulumi.Output<boolean | undefined>;
    declare public readonly enableImageNotification: pulumi.Output<boolean | undefined>;
    declare public readonly endpointId: pulumi.Output<number>;
    declare public readonly endpointSettingsId: pulumi.Output<string>;
    declare public readonly gpuses: pulumi.Output<outputs.EndpointSettingsGpus[] | undefined>;
    declare public readonly securitySettings: pulumi.Output<outputs.EndpointSettingsSecuritySettings | undefined>;

    /**
     * Create a EndpointSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointSettingsArgs | EndpointSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EndpointSettingsState | undefined;
            resourceInputs["changeWindow"] = state?.changeWindow;
            resourceInputs["deploymentOptions"] = state?.deploymentOptions;
            resourceInputs["enableGpuManagement"] = state?.enableGpuManagement;
            resourceInputs["enableImageNotification"] = state?.enableImageNotification;
            resourceInputs["endpointId"] = state?.endpointId;
            resourceInputs["endpointSettingsId"] = state?.endpointSettingsId;
            resourceInputs["gpuses"] = state?.gpuses;
            resourceInputs["securitySettings"] = state?.securitySettings;
        } else {
            const args = argsOrState as EndpointSettingsArgs | undefined;
            if (args?.endpointId === undefined && !opts.urn) {
                throw new Error("Missing required property 'endpointId'");
            }
            resourceInputs["changeWindow"] = args?.changeWindow;
            resourceInputs["deploymentOptions"] = args?.deploymentOptions;
            resourceInputs["enableGpuManagement"] = args?.enableGpuManagement;
            resourceInputs["enableImageNotification"] = args?.enableImageNotification;
            resourceInputs["endpointId"] = args?.endpointId;
            resourceInputs["endpointSettingsId"] = args?.endpointSettingsId;
            resourceInputs["gpuses"] = args?.gpuses;
            resourceInputs["securitySettings"] = args?.securitySettings;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EndpointSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EndpointSettings resources.
 */
export interface EndpointSettingsState {
    changeWindow?: pulumi.Input<inputs.EndpointSettingsChangeWindow>;
    deploymentOptions?: pulumi.Input<inputs.EndpointSettingsDeploymentOptions>;
    enableGpuManagement?: pulumi.Input<boolean>;
    enableImageNotification?: pulumi.Input<boolean>;
    endpointId?: pulumi.Input<number>;
    endpointSettingsId?: pulumi.Input<string>;
    gpuses?: pulumi.Input<pulumi.Input<inputs.EndpointSettingsGpus>[]>;
    securitySettings?: pulumi.Input<inputs.EndpointSettingsSecuritySettings>;
}

/**
 * The set of arguments for constructing a EndpointSettings resource.
 */
export interface EndpointSettingsArgs {
    changeWindow?: pulumi.Input<inputs.EndpointSettingsChangeWindow>;
    deploymentOptions?: pulumi.Input<inputs.EndpointSettingsDeploymentOptions>;
    enableGpuManagement?: pulumi.Input<boolean>;
    enableImageNotification?: pulumi.Input<boolean>;
    endpointId: pulumi.Input<number>;
    endpointSettingsId?: pulumi.Input<string>;
    gpuses?: pulumi.Input<pulumi.Input<inputs.EndpointSettingsGpus>[]>;
    securitySettings?: pulumi.Input<inputs.EndpointSettingsSecuritySettings>;
}

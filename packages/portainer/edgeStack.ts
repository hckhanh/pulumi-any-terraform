// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EdgeStack extends pulumi.CustomResource {
    /**
     * Get an existing EdgeStack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgeStackState, opts?: pulumi.CustomResourceOptions): EdgeStack {
        return new EdgeStack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'portainer:index/edgeStack:EdgeStack';

    /**
     * Returns true if the given object is an instance of EdgeStack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdgeStack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdgeStack.__pulumiType;
    }

    /**
     * 0 = Docker Compose, 1 = Kubernetes
     */
    declare public readonly deploymentType: pulumi.Output<number>;
    declare public readonly dryrun: pulumi.Output<boolean | undefined>;
    declare public readonly edgeGroups: pulumi.Output<number[]>;
    declare public readonly edgeStackId: pulumi.Output<string>;
    /**
     * Environment variables for the Edge Stack
     */
    declare public readonly environment: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly filePathInRepository: pulumi.Output<string | undefined>;
    /**
     * Whether to prune unused services/networks during stack update (default: true)
     */
    declare public readonly forceUpdate: pulumi.Output<boolean | undefined>;
    declare public readonly gitRepositoryAuthentication: pulumi.Output<boolean | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly prePullImage: pulumi.Output<boolean | undefined>;
    /**
     * Whether to force pull latest images during stack update (default: true)
     */
    declare public readonly pullImage: pulumi.Output<boolean | undefined>;
    declare public readonly registries: pulumi.Output<number[] | undefined>;
    /**
     * Enable relative path volumes – also used as value for 'filesystemPath'.
     */
    declare public readonly relativePath: pulumi.Output<string | undefined>;
    declare public readonly repositoryPassword: pulumi.Output<string | undefined>;
    declare public readonly repositoryReferenceName: pulumi.Output<string | undefined>;
    declare public readonly repositoryUrl: pulumi.Output<string | undefined>;
    declare public readonly repositoryUsername: pulumi.Output<string | undefined>;
    declare public readonly retryDeploy: pulumi.Output<boolean | undefined>;
    declare public readonly stackFileContent: pulumi.Output<string | undefined>;
    declare public readonly stackFilePath: pulumi.Output<string | undefined>;
    /**
     * Enable autoUpdate webhook (GitOps).
     */
    declare public readonly stackWebhook: pulumi.Output<boolean | undefined>;
    declare public readonly updateInterval: pulumi.Output<string | undefined>;
    declare public readonly useManifestNamespaces: pulumi.Output<boolean | undefined>;
    /**
     * UUID of the GitOps webhook (read-only).
     */
    declare public /*out*/ readonly webhookId: pulumi.Output<string>;
    /**
     * Full URL of the webhook trigger
     */
    declare public /*out*/ readonly webhookUrl: pulumi.Output<string>;

    /**
     * Create a EdgeStack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgeStackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgeStackArgs | EdgeStackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgeStackState | undefined;
            resourceInputs["deploymentType"] = state?.deploymentType;
            resourceInputs["dryrun"] = state?.dryrun;
            resourceInputs["edgeGroups"] = state?.edgeGroups;
            resourceInputs["edgeStackId"] = state?.edgeStackId;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["filePathInRepository"] = state?.filePathInRepository;
            resourceInputs["forceUpdate"] = state?.forceUpdate;
            resourceInputs["gitRepositoryAuthentication"] = state?.gitRepositoryAuthentication;
            resourceInputs["name"] = state?.name;
            resourceInputs["prePullImage"] = state?.prePullImage;
            resourceInputs["pullImage"] = state?.pullImage;
            resourceInputs["registries"] = state?.registries;
            resourceInputs["relativePath"] = state?.relativePath;
            resourceInputs["repositoryPassword"] = state?.repositoryPassword;
            resourceInputs["repositoryReferenceName"] = state?.repositoryReferenceName;
            resourceInputs["repositoryUrl"] = state?.repositoryUrl;
            resourceInputs["repositoryUsername"] = state?.repositoryUsername;
            resourceInputs["retryDeploy"] = state?.retryDeploy;
            resourceInputs["stackFileContent"] = state?.stackFileContent;
            resourceInputs["stackFilePath"] = state?.stackFilePath;
            resourceInputs["stackWebhook"] = state?.stackWebhook;
            resourceInputs["updateInterval"] = state?.updateInterval;
            resourceInputs["useManifestNamespaces"] = state?.useManifestNamespaces;
            resourceInputs["webhookId"] = state?.webhookId;
            resourceInputs["webhookUrl"] = state?.webhookUrl;
        } else {
            const args = argsOrState as EdgeStackArgs | undefined;
            if (args?.deploymentType === undefined && !opts.urn) {
                throw new Error("Missing required property 'deploymentType'");
            }
            if (args?.edgeGroups === undefined && !opts.urn) {
                throw new Error("Missing required property 'edgeGroups'");
            }
            resourceInputs["deploymentType"] = args?.deploymentType;
            resourceInputs["dryrun"] = args?.dryrun;
            resourceInputs["edgeGroups"] = args?.edgeGroups;
            resourceInputs["edgeStackId"] = args?.edgeStackId;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["filePathInRepository"] = args?.filePathInRepository;
            resourceInputs["forceUpdate"] = args?.forceUpdate;
            resourceInputs["gitRepositoryAuthentication"] = args?.gitRepositoryAuthentication;
            resourceInputs["name"] = args?.name;
            resourceInputs["prePullImage"] = args?.prePullImage;
            resourceInputs["pullImage"] = args?.pullImage;
            resourceInputs["registries"] = args?.registries;
            resourceInputs["relativePath"] = args?.relativePath;
            resourceInputs["repositoryPassword"] = args?.repositoryPassword ? pulumi.secret(args.repositoryPassword) : undefined;
            resourceInputs["repositoryReferenceName"] = args?.repositoryReferenceName;
            resourceInputs["repositoryUrl"] = args?.repositoryUrl;
            resourceInputs["repositoryUsername"] = args?.repositoryUsername;
            resourceInputs["retryDeploy"] = args?.retryDeploy;
            resourceInputs["stackFileContent"] = args?.stackFileContent;
            resourceInputs["stackFilePath"] = args?.stackFilePath;
            resourceInputs["stackWebhook"] = args?.stackWebhook;
            resourceInputs["updateInterval"] = args?.updateInterval;
            resourceInputs["useManifestNamespaces"] = args?.useManifestNamespaces;
            resourceInputs["webhookId"] = undefined /*out*/;
            resourceInputs["webhookUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["repositoryPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EdgeStack.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EdgeStack resources.
 */
export interface EdgeStackState {
    /**
     * 0 = Docker Compose, 1 = Kubernetes
     */
    deploymentType?: pulumi.Input<number>;
    dryrun?: pulumi.Input<boolean>;
    edgeGroups?: pulumi.Input<pulumi.Input<number>[]>;
    edgeStackId?: pulumi.Input<string>;
    /**
     * Environment variables for the Edge Stack
     */
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    filePathInRepository?: pulumi.Input<string>;
    /**
     * Whether to prune unused services/networks during stack update (default: true)
     */
    forceUpdate?: pulumi.Input<boolean>;
    gitRepositoryAuthentication?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    prePullImage?: pulumi.Input<boolean>;
    /**
     * Whether to force pull latest images during stack update (default: true)
     */
    pullImage?: pulumi.Input<boolean>;
    registries?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Enable relative path volumes – also used as value for 'filesystemPath'.
     */
    relativePath?: pulumi.Input<string>;
    repositoryPassword?: pulumi.Input<string>;
    repositoryReferenceName?: pulumi.Input<string>;
    repositoryUrl?: pulumi.Input<string>;
    repositoryUsername?: pulumi.Input<string>;
    retryDeploy?: pulumi.Input<boolean>;
    stackFileContent?: pulumi.Input<string>;
    stackFilePath?: pulumi.Input<string>;
    /**
     * Enable autoUpdate webhook (GitOps).
     */
    stackWebhook?: pulumi.Input<boolean>;
    updateInterval?: pulumi.Input<string>;
    useManifestNamespaces?: pulumi.Input<boolean>;
    /**
     * UUID of the GitOps webhook (read-only).
     */
    webhookId?: pulumi.Input<string>;
    /**
     * Full URL of the webhook trigger
     */
    webhookUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EdgeStack resource.
 */
export interface EdgeStackArgs {
    /**
     * 0 = Docker Compose, 1 = Kubernetes
     */
    deploymentType: pulumi.Input<number>;
    dryrun?: pulumi.Input<boolean>;
    edgeGroups: pulumi.Input<pulumi.Input<number>[]>;
    edgeStackId?: pulumi.Input<string>;
    /**
     * Environment variables for the Edge Stack
     */
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    filePathInRepository?: pulumi.Input<string>;
    /**
     * Whether to prune unused services/networks during stack update (default: true)
     */
    forceUpdate?: pulumi.Input<boolean>;
    gitRepositoryAuthentication?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    prePullImage?: pulumi.Input<boolean>;
    /**
     * Whether to force pull latest images during stack update (default: true)
     */
    pullImage?: pulumi.Input<boolean>;
    registries?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Enable relative path volumes – also used as value for 'filesystemPath'.
     */
    relativePath?: pulumi.Input<string>;
    repositoryPassword?: pulumi.Input<string>;
    repositoryReferenceName?: pulumi.Input<string>;
    repositoryUrl?: pulumi.Input<string>;
    repositoryUsername?: pulumi.Input<string>;
    retryDeploy?: pulumi.Input<boolean>;
    stackFileContent?: pulumi.Input<string>;
    stackFilePath?: pulumi.Input<string>;
    /**
     * Enable autoUpdate webhook (GitOps).
     */
    stackWebhook?: pulumi.Input<boolean>;
    updateInterval?: pulumi.Input<string>;
    useManifestNamespaces?: pulumi.Input<boolean>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Metadata extends pulumi.CustomResource {
    /**
     * Get an existing Metadata resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetadataState, opts?: pulumi.CustomResourceOptions): Metadata {
        return new Metadata(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'better-uptime:index/metadata:Metadata';

    /**
     * Returns true if the given object is an instance of Metadata.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Metadata {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Metadata.__pulumiType;
    }

    /**
     * The time when this metadata was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The key of this Metadata.
     */
    declare public readonly key: pulumi.Output<string>;
    /**
     * An array of typed metadata values of this Metadata.
     */
    declare public readonly metadataValues: pulumi.Output<outputs.MetadataMetadataValue[] | undefined>;
    /**
     * The ID of the owner of this Metadata.
     */
    declare public readonly ownerId: pulumi.Output<string>;
    /**
     * The type of the owner of this Metadata. Valid values: `Monitor`, `Heartbeat`, `Incident`, `WebhookIntegration`, `EmailIntegration`, `IncomingWebhook`, `CallRouting`
     */
    declare public readonly ownerType: pulumi.Output<string>;
    /**
     * Used to specify the team the resource should be created in when using global tokens. This field is deprecated, team name doesn't have to be specified for this resource anymore.
     *
     * @deprecated Deprecated
     */
    declare public readonly teamName: pulumi.Output<string | undefined>;
    /**
     * The time when this metadata was updated.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The value of this Metadata. This field is deprecated, use repeatable block metadata_value to define values with types instead.
     *
     * @deprecated Deprecated
     */
    declare public readonly value: pulumi.Output<string | undefined>;

    /**
     * Create a Metadata resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetadataArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetadataArgs | MetadataState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetadataState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["key"] = state?.key;
            resourceInputs["metadataValues"] = state?.metadataValues;
            resourceInputs["ownerId"] = state?.ownerId;
            resourceInputs["ownerType"] = state?.ownerType;
            resourceInputs["teamName"] = state?.teamName;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["value"] = state?.value;
        } else {
            const args = argsOrState as MetadataArgs | undefined;
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if (args?.ownerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'ownerId'");
            }
            if (args?.ownerType === undefined && !opts.urn) {
                throw new Error("Missing required property 'ownerType'");
            }
            resourceInputs["key"] = args?.key;
            resourceInputs["metadataValues"] = args?.metadataValues;
            resourceInputs["ownerId"] = args?.ownerId;
            resourceInputs["ownerType"] = args?.ownerType;
            resourceInputs["teamName"] = args?.teamName;
            resourceInputs["value"] = args?.value;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Metadata.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Metadata resources.
 */
export interface MetadataState {
    /**
     * The time when this metadata was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The key of this Metadata.
     */
    key?: pulumi.Input<string>;
    /**
     * An array of typed metadata values of this Metadata.
     */
    metadataValues?: pulumi.Input<pulumi.Input<inputs.MetadataMetadataValue>[]>;
    /**
     * The ID of the owner of this Metadata.
     */
    ownerId?: pulumi.Input<string>;
    /**
     * The type of the owner of this Metadata. Valid values: `Monitor`, `Heartbeat`, `Incident`, `WebhookIntegration`, `EmailIntegration`, `IncomingWebhook`, `CallRouting`
     */
    ownerType?: pulumi.Input<string>;
    /**
     * Used to specify the team the resource should be created in when using global tokens. This field is deprecated, team name doesn't have to be specified for this resource anymore.
     *
     * @deprecated Deprecated
     */
    teamName?: pulumi.Input<string>;
    /**
     * The time when this metadata was updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The value of this Metadata. This field is deprecated, use repeatable block metadata_value to define values with types instead.
     *
     * @deprecated Deprecated
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Metadata resource.
 */
export interface MetadataArgs {
    /**
     * The key of this Metadata.
     */
    key: pulumi.Input<string>;
    /**
     * An array of typed metadata values of this Metadata.
     */
    metadataValues?: pulumi.Input<pulumi.Input<inputs.MetadataMetadataValue>[]>;
    /**
     * The ID of the owner of this Metadata.
     */
    ownerId: pulumi.Input<string>;
    /**
     * The type of the owner of this Metadata. Valid values: `Monitor`, `Heartbeat`, `Incident`, `WebhookIntegration`, `EmailIntegration`, `IncomingWebhook`, `CallRouting`
     */
    ownerType: pulumi.Input<string>;
    /**
     * Used to specify the team the resource should be created in when using global tokens. This field is deprecated, team name doesn't have to be specified for this resource anymore.
     *
     * @deprecated Deprecated
     */
    teamName?: pulumi.Input<string>;
    /**
     * The value of this Metadata. This field is deprecated, use repeatable block metadata_value to define values with types instead.
     *
     * @deprecated Deprecated
     */
    value?: pulumi.Input<string>;
}

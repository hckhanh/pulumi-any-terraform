// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Heartbeat extends pulumi.CustomResource {
    /**
     * Get an existing Heartbeat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HeartbeatState, opts?: pulumi.CustomResourceOptions): Heartbeat {
        return new Heartbeat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'better-uptime:index/heartbeat:Heartbeat';

    /**
     * Returns true if the given object is an instance of Heartbeat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Heartbeat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Heartbeat.__pulumiType;
    }

    /**
     * Whether to call when a new incident is created.
     */
    declare public readonly call: pulumi.Output<boolean>;
    /**
     * The time when this heartbeat was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Whether to send a critical push notification that ignores the mute switch and Do not Disturb mode when a new incident is created.
     */
    declare public readonly criticalAlert: pulumi.Output<boolean>;
    /**
     * Whether to send an email when a new incident is created.
     */
    declare public readonly email: pulumi.Output<boolean>;
    /**
     * Heartbeats can fluctuate; specify this value to control what is still acceptable. Minimum value: 0 seconds. We recommend setting this to approx. 20% of period
     */
    declare public readonly grace: pulumi.Output<number>;
    /**
     * Set this attribute if you want to add this heartbeat to a heartbeat group..
     */
    declare public readonly heartbeatGroupId: pulumi.Output<number>;
    /**
     * An array of maintenance days to set. If a maintenance window is overnight both affected days should be set. Allowed values are ["mon", "tue", "wed", "thu", "fri", "sat", "sun"] or any subset of these days.
     */
    declare public readonly maintenanceDays: pulumi.Output<string[]>;
    /**
     * Start of the maintenance window each day. We won't create incidents during this window. Example: "01:00:00"
     */
    declare public readonly maintenanceFrom: pulumi.Output<string>;
    /**
     * The timezone to use for the maintenance window each day. Defaults to UTC. The accepted values can be found in the Rails TimeZone documentation. https://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
     */
    declare public readonly maintenanceTimezone: pulumi.Output<string>;
    /**
     * End of the maintenance window each day. Example: "03:00:00"
     */
    declare public readonly maintenanceTo: pulumi.Output<string>;
    /**
     * A name of the service for this heartbeat.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Set to true to pause monitoring â€” we won't notify you about downtime. Set to false to resume monitoring.
     */
    declare public readonly paused: pulumi.Output<boolean>;
    /**
     * The time when this heartbeat was paused.
     */
    declare public /*out*/ readonly pausedAt: pulumi.Output<string>;
    /**
     * How often should we expect this heartbeat? In seconds. Minimum value: 30 seconds
     */
    declare public readonly period: pulumi.Output<number>;
    /**
     * Set the escalation policy for the heartbeat.
     */
    declare public readonly policyId: pulumi.Output<string | undefined>;
    /**
     * Whether to send a push notification when a new incident is created.
     */
    declare public readonly push: pulumi.Output<boolean>;
    /**
     * Whether to send an SMS when a new incident is created.
     */
    declare public readonly sms: pulumi.Output<boolean>;
    /**
     * An index controlling the position of a heartbeat in the heartbeat group.
     */
    declare public readonly sortIndex: pulumi.Output<number>;
    /**
     * The status of this heartbeat.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    declare public readonly teamName: pulumi.Output<string | undefined>;
    /**
     * How long to wait before escalating the incident alert to the team. Leave blank to disable escalating to the entire team.
     */
    declare public readonly teamWait: pulumi.Output<number>;
    /**
     * The time when this heartbeat was updated.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The url of this heartbeat.
     */
    declare public /*out*/ readonly url: pulumi.Output<string>;

    /**
     * Create a Heartbeat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HeartbeatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HeartbeatArgs | HeartbeatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HeartbeatState | undefined;
            resourceInputs["call"] = state?.call;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["criticalAlert"] = state?.criticalAlert;
            resourceInputs["email"] = state?.email;
            resourceInputs["grace"] = state?.grace;
            resourceInputs["heartbeatGroupId"] = state?.heartbeatGroupId;
            resourceInputs["maintenanceDays"] = state?.maintenanceDays;
            resourceInputs["maintenanceFrom"] = state?.maintenanceFrom;
            resourceInputs["maintenanceTimezone"] = state?.maintenanceTimezone;
            resourceInputs["maintenanceTo"] = state?.maintenanceTo;
            resourceInputs["name"] = state?.name;
            resourceInputs["paused"] = state?.paused;
            resourceInputs["pausedAt"] = state?.pausedAt;
            resourceInputs["period"] = state?.period;
            resourceInputs["policyId"] = state?.policyId;
            resourceInputs["push"] = state?.push;
            resourceInputs["sms"] = state?.sms;
            resourceInputs["sortIndex"] = state?.sortIndex;
            resourceInputs["status"] = state?.status;
            resourceInputs["teamName"] = state?.teamName;
            resourceInputs["teamWait"] = state?.teamWait;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as HeartbeatArgs | undefined;
            if (args?.grace === undefined && !opts.urn) {
                throw new Error("Missing required property 'grace'");
            }
            if (args?.period === undefined && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            resourceInputs["call"] = args?.call;
            resourceInputs["criticalAlert"] = args?.criticalAlert;
            resourceInputs["email"] = args?.email;
            resourceInputs["grace"] = args?.grace;
            resourceInputs["heartbeatGroupId"] = args?.heartbeatGroupId;
            resourceInputs["maintenanceDays"] = args?.maintenanceDays;
            resourceInputs["maintenanceFrom"] = args?.maintenanceFrom;
            resourceInputs["maintenanceTimezone"] = args?.maintenanceTimezone;
            resourceInputs["maintenanceTo"] = args?.maintenanceTo;
            resourceInputs["name"] = args?.name;
            resourceInputs["paused"] = args?.paused;
            resourceInputs["period"] = args?.period;
            resourceInputs["policyId"] = args?.policyId;
            resourceInputs["push"] = args?.push;
            resourceInputs["sms"] = args?.sms;
            resourceInputs["sortIndex"] = args?.sortIndex;
            resourceInputs["teamName"] = args?.teamName;
            resourceInputs["teamWait"] = args?.teamWait;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["pausedAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Heartbeat.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Heartbeat resources.
 */
export interface HeartbeatState {
    /**
     * Whether to call when a new incident is created.
     */
    call?: pulumi.Input<boolean>;
    /**
     * The time when this heartbeat was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether to send a critical push notification that ignores the mute switch and Do not Disturb mode when a new incident is created.
     */
    criticalAlert?: pulumi.Input<boolean>;
    /**
     * Whether to send an email when a new incident is created.
     */
    email?: pulumi.Input<boolean>;
    /**
     * Heartbeats can fluctuate; specify this value to control what is still acceptable. Minimum value: 0 seconds. We recommend setting this to approx. 20% of period
     */
    grace?: pulumi.Input<number>;
    /**
     * Set this attribute if you want to add this heartbeat to a heartbeat group..
     */
    heartbeatGroupId?: pulumi.Input<number>;
    /**
     * An array of maintenance days to set. If a maintenance window is overnight both affected days should be set. Allowed values are ["mon", "tue", "wed", "thu", "fri", "sat", "sun"] or any subset of these days.
     */
    maintenanceDays?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Start of the maintenance window each day. We won't create incidents during this window. Example: "01:00:00"
     */
    maintenanceFrom?: pulumi.Input<string>;
    /**
     * The timezone to use for the maintenance window each day. Defaults to UTC. The accepted values can be found in the Rails TimeZone documentation. https://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
     */
    maintenanceTimezone?: pulumi.Input<string>;
    /**
     * End of the maintenance window each day. Example: "03:00:00"
     */
    maintenanceTo?: pulumi.Input<string>;
    /**
     * A name of the service for this heartbeat.
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true to pause monitoring â€” we won't notify you about downtime. Set to false to resume monitoring.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * The time when this heartbeat was paused.
     */
    pausedAt?: pulumi.Input<string>;
    /**
     * How often should we expect this heartbeat? In seconds. Minimum value: 30 seconds
     */
    period?: pulumi.Input<number>;
    /**
     * Set the escalation policy for the heartbeat.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Whether to send a push notification when a new incident is created.
     */
    push?: pulumi.Input<boolean>;
    /**
     * Whether to send an SMS when a new incident is created.
     */
    sms?: pulumi.Input<boolean>;
    /**
     * An index controlling the position of a heartbeat in the heartbeat group.
     */
    sortIndex?: pulumi.Input<number>;
    /**
     * The status of this heartbeat.
     */
    status?: pulumi.Input<string>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    teamName?: pulumi.Input<string>;
    /**
     * How long to wait before escalating the incident alert to the team. Leave blank to disable escalating to the entire team.
     */
    teamWait?: pulumi.Input<number>;
    /**
     * The time when this heartbeat was updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The url of this heartbeat.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Heartbeat resource.
 */
export interface HeartbeatArgs {
    /**
     * Whether to call when a new incident is created.
     */
    call?: pulumi.Input<boolean>;
    /**
     * Whether to send a critical push notification that ignores the mute switch and Do not Disturb mode when a new incident is created.
     */
    criticalAlert?: pulumi.Input<boolean>;
    /**
     * Whether to send an email when a new incident is created.
     */
    email?: pulumi.Input<boolean>;
    /**
     * Heartbeats can fluctuate; specify this value to control what is still acceptable. Minimum value: 0 seconds. We recommend setting this to approx. 20% of period
     */
    grace: pulumi.Input<number>;
    /**
     * Set this attribute if you want to add this heartbeat to a heartbeat group..
     */
    heartbeatGroupId?: pulumi.Input<number>;
    /**
     * An array of maintenance days to set. If a maintenance window is overnight both affected days should be set. Allowed values are ["mon", "tue", "wed", "thu", "fri", "sat", "sun"] or any subset of these days.
     */
    maintenanceDays?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Start of the maintenance window each day. We won't create incidents during this window. Example: "01:00:00"
     */
    maintenanceFrom?: pulumi.Input<string>;
    /**
     * The timezone to use for the maintenance window each day. Defaults to UTC. The accepted values can be found in the Rails TimeZone documentation. https://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
     */
    maintenanceTimezone?: pulumi.Input<string>;
    /**
     * End of the maintenance window each day. Example: "03:00:00"
     */
    maintenanceTo?: pulumi.Input<string>;
    /**
     * A name of the service for this heartbeat.
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true to pause monitoring â€” we won't notify you about downtime. Set to false to resume monitoring.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * How often should we expect this heartbeat? In seconds. Minimum value: 30 seconds
     */
    period: pulumi.Input<number>;
    /**
     * Set the escalation policy for the heartbeat.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Whether to send a push notification when a new incident is created.
     */
    push?: pulumi.Input<boolean>;
    /**
     * Whether to send an SMS when a new incident is created.
     */
    sms?: pulumi.Input<boolean>;
    /**
     * An index controlling the position of a heartbeat in the heartbeat group.
     */
    sortIndex?: pulumi.Input<number>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    teamName?: pulumi.Input<string>;
    /**
     * How long to wait before escalating the incident alert to the team. Leave blank to disable escalating to the entire team.
     */
    teamWait?: pulumi.Input<number>;
}

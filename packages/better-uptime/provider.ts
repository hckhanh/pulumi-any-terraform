// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the better-uptime package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'better-uptime';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * Better Stack Uptime API token. The value can be omitted if `BETTERUPTIME_API_TOKEN` environment variable is set. See
     * https://betterstack.com/docs/uptime/api/getting-started-with-uptime-api/#obtaining-an-uptime-api-token on how to obtain
     * the API token for your team.
     */
    public readonly apiToken!: pulumi.Output<string>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.apiToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiToken'");
            }
            resourceInputs["apiRateBurst"] = pulumi.output(args ? args.apiRateBurst : undefined).apply(JSON.stringify);
            resourceInputs["apiRateLimit"] = pulumi.output(args ? args.apiRateLimit : undefined).apply(JSON.stringify);
            resourceInputs["apiRetryMax"] = pulumi.output(args ? args.apiRetryMax : undefined).apply(JSON.stringify);
            resourceInputs["apiRetryWaitMax"] = pulumi.output(args ? args.apiRetryWaitMax : undefined).apply(JSON.stringify);
            resourceInputs["apiRetryWaitMin"] = pulumi.output(args ? args.apiRetryWaitMin : undefined).apply(JSON.stringify);
            resourceInputs["apiTimeout"] = pulumi.output(args ? args.apiTimeout : undefined).apply(JSON.stringify);
            resourceInputs["apiToken"] = args?.apiToken ? pulumi.secret(args.apiToken) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Burst size for rate limiter, allows temporary bursts above the rate limit. 0 means use automatic default (2x rate limit,
     * minimum 10).
     */
    apiRateBurst?: pulumi.Input<number>;
    /**
     * Maximum number of API requests per second. 0 means no limit.
     */
    apiRateLimit?: pulumi.Input<number>;
    /**
     * Maximum number of retries for API requests.
     */
    apiRetryMax?: pulumi.Input<number>;
    /**
     * Maximum time to wait between retries in seconds.
     */
    apiRetryWaitMax?: pulumi.Input<number>;
    /**
     * Minimum time to wait between retries in seconds.
     */
    apiRetryWaitMin?: pulumi.Input<number>;
    /**
     * Timeout for individual HTTP requests in seconds.
     */
    apiTimeout?: pulumi.Input<number>;
    /**
     * Better Stack Uptime API token. The value can be omitted if `BETTERUPTIME_API_TOKEN` environment variable is set. See
     * https://betterstack.com/docs/uptime/api/getting-started-with-uptime-api/#obtaining-an-uptime-api-token on how to obtain
     * the API token for your team.
     */
    apiToken: pulumi.Input<string>;
}

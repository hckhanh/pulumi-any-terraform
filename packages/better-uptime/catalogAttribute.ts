// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CatalogAttribute extends pulumi.CustomResource {
    /**
     * Get an existing CatalogAttribute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogAttributeState, opts?: pulumi.CustomResourceOptions): CatalogAttribute {
        return new CatalogAttribute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'better-uptime:index/catalogAttribute:CatalogAttribute';

    /**
     * Returns true if the given object is an instance of CatalogAttribute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CatalogAttribute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CatalogAttribute.__pulumiType;
    }

    /**
     * The name of the Catalog attribute.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The position of the attribute in the Catalog relation.
     */
    public readonly position!: pulumi.Output<number>;
    /**
     * Whether this attribute is one of the primary attributes.
     */
    public readonly primary!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the Catalog relation this attribute belongs to.
     */
    public readonly relationId!: pulumi.Output<string>;

    /**
     * Create a CatalogAttribute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogAttributeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogAttributeArgs | CatalogAttributeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogAttributeState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["primary"] = state ? state.primary : undefined;
            resourceInputs["relationId"] = state ? state.relationId : undefined;
        } else {
            const args = argsOrState as CatalogAttributeArgs | undefined;
            if ((!args || args.relationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'relationId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["primary"] = args ? args.primary : undefined;
            resourceInputs["relationId"] = args ? args.relationId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CatalogAttribute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CatalogAttribute resources.
 */
export interface CatalogAttributeState {
    /**
     * The name of the Catalog attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * The position of the attribute in the Catalog relation.
     */
    position?: pulumi.Input<number>;
    /**
     * Whether this attribute is one of the primary attributes.
     */
    primary?: pulumi.Input<boolean>;
    /**
     * The ID of the Catalog relation this attribute belongs to.
     */
    relationId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CatalogAttribute resource.
 */
export interface CatalogAttributeArgs {
    /**
     * The name of the Catalog attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * The position of the attribute in the Catalog relation.
     */
    position?: pulumi.Input<number>;
    /**
     * Whether this attribute is one of the primary attributes.
     */
    primary?: pulumi.Input<boolean>;
    /**
     * The ID of the Catalog relation this attribute belongs to.
     */
    relationId: pulumi.Input<string>;
}

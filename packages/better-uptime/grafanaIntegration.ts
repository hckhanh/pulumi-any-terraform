// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GrafanaIntegration extends pulumi.CustomResource {
    /**
     * Get an existing GrafanaIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GrafanaIntegrationState, opts?: pulumi.CustomResourceOptions): GrafanaIntegration {
        return new GrafanaIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'better-uptime:index/grafanaIntegration:GrafanaIntegration';

    /**
     * Returns true if the given object is an instance of GrafanaIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GrafanaIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GrafanaIntegration.__pulumiType;
    }

    /**
     * Whether to call when a new incident is created.
     */
    declare public readonly call: pulumi.Output<boolean>;
    /**
     * Whether to send a critical push notification that ignores the mute switch and Do not Disturb mode when a new incident is created.
     */
    declare public readonly criticalAlert: pulumi.Output<boolean>;
    /**
     * Whether to send an email when a new incident is created.
     */
    declare public readonly email: pulumi.Output<boolean>;
    /**
     * The name of the Grafana Integration.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Is the Grafana integration paused.
     */
    declare public readonly paused: pulumi.Output<boolean>;
    /**
     * ID of the escalation policy associated with the Grafana integration.
     */
    declare public readonly policyId: pulumi.Output<number>;
    /**
     * Whether to send a push notification when a new incident is created.
     */
    declare public readonly push: pulumi.Output<boolean>;
    /**
     * How long the alert must be up to automatically mark an incident as resolved. In seconds.
     */
    declare public readonly recoveryPeriod: pulumi.Output<number>;
    /**
     * Whether to send an SMS when a new incident is created.
     */
    declare public readonly sms: pulumi.Output<boolean>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    declare public readonly teamName: pulumi.Output<string | undefined>;
    /**
     * How long we wait before escalating the incident alert to the team. In seconds.
     */
    declare public readonly teamWait: pulumi.Output<number>;
    /**
     * The webhook URL for the Grafana integration.
     */
    declare public /*out*/ readonly webhookUrl: pulumi.Output<string>;

    /**
     * Create a GrafanaIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GrafanaIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GrafanaIntegrationArgs | GrafanaIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GrafanaIntegrationState | undefined;
            resourceInputs["call"] = state?.call;
            resourceInputs["criticalAlert"] = state?.criticalAlert;
            resourceInputs["email"] = state?.email;
            resourceInputs["name"] = state?.name;
            resourceInputs["paused"] = state?.paused;
            resourceInputs["policyId"] = state?.policyId;
            resourceInputs["push"] = state?.push;
            resourceInputs["recoveryPeriod"] = state?.recoveryPeriod;
            resourceInputs["sms"] = state?.sms;
            resourceInputs["teamName"] = state?.teamName;
            resourceInputs["teamWait"] = state?.teamWait;
            resourceInputs["webhookUrl"] = state?.webhookUrl;
        } else {
            const args = argsOrState as GrafanaIntegrationArgs | undefined;
            resourceInputs["call"] = args?.call;
            resourceInputs["criticalAlert"] = args?.criticalAlert;
            resourceInputs["email"] = args?.email;
            resourceInputs["name"] = args?.name;
            resourceInputs["paused"] = args?.paused;
            resourceInputs["policyId"] = args?.policyId;
            resourceInputs["push"] = args?.push;
            resourceInputs["recoveryPeriod"] = args?.recoveryPeriod;
            resourceInputs["sms"] = args?.sms;
            resourceInputs["teamName"] = args?.teamName;
            resourceInputs["teamWait"] = args?.teamWait;
            resourceInputs["webhookUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GrafanaIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GrafanaIntegration resources.
 */
export interface GrafanaIntegrationState {
    /**
     * Whether to call when a new incident is created.
     */
    call?: pulumi.Input<boolean>;
    /**
     * Whether to send a critical push notification that ignores the mute switch and Do not Disturb mode when a new incident is created.
     */
    criticalAlert?: pulumi.Input<boolean>;
    /**
     * Whether to send an email when a new incident is created.
     */
    email?: pulumi.Input<boolean>;
    /**
     * The name of the Grafana Integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Is the Grafana integration paused.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * ID of the escalation policy associated with the Grafana integration.
     */
    policyId?: pulumi.Input<number>;
    /**
     * Whether to send a push notification when a new incident is created.
     */
    push?: pulumi.Input<boolean>;
    /**
     * How long the alert must be up to automatically mark an incident as resolved. In seconds.
     */
    recoveryPeriod?: pulumi.Input<number>;
    /**
     * Whether to send an SMS when a new incident is created.
     */
    sms?: pulumi.Input<boolean>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    teamName?: pulumi.Input<string>;
    /**
     * How long we wait before escalating the incident alert to the team. In seconds.
     */
    teamWait?: pulumi.Input<number>;
    /**
     * The webhook URL for the Grafana integration.
     */
    webhookUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GrafanaIntegration resource.
 */
export interface GrafanaIntegrationArgs {
    /**
     * Whether to call when a new incident is created.
     */
    call?: pulumi.Input<boolean>;
    /**
     * Whether to send a critical push notification that ignores the mute switch and Do not Disturb mode when a new incident is created.
     */
    criticalAlert?: pulumi.Input<boolean>;
    /**
     * Whether to send an email when a new incident is created.
     */
    email?: pulumi.Input<boolean>;
    /**
     * The name of the Grafana Integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Is the Grafana integration paused.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * ID of the escalation policy associated with the Grafana integration.
     */
    policyId?: pulumi.Input<number>;
    /**
     * Whether to send a push notification when a new incident is created.
     */
    push?: pulumi.Input<boolean>;
    /**
     * How long the alert must be up to automatically mark an incident as resolved. In seconds.
     */
    recoveryPeriod?: pulumi.Input<number>;
    /**
     * Whether to send an SMS when a new incident is created.
     */
    sms?: pulumi.Input<boolean>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    teamName?: pulumi.Input<string>;
    /**
     * How long we wait before escalating the incident alert to the team. In seconds.
     */
    teamWait?: pulumi.Input<number>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OutgoingWebhook extends pulumi.CustomResource {
    /**
     * Get an existing OutgoingWebhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OutgoingWebhookState, opts?: pulumi.CustomResourceOptions): OutgoingWebhook {
        return new OutgoingWebhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'better-uptime:index/outgoingWebhook:OutgoingWebhook';

    /**
     * Returns true if the given object is an instance of OutgoingWebhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OutgoingWebhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OutgoingWebhook.__pulumiType;
    }

    /**
     * Custom webhook template configuration.
     */
    declare public readonly customWebhookTemplateAttributes: pulumi.Output<outputs.OutgoingWebhookCustomWebhookTemplateAttributes | undefined>;
    /**
     * The name of the outgoing webhook.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Whether to trigger webhook when incident is acknowledged. Only when `trigger_type=incident_change`.
     */
    declare public readonly onIncidentAcknowledged: pulumi.Output<boolean | undefined>;
    /**
     * Whether to trigger webhook when incident is resolved. Only when `trigger_type=incident_change`.
     */
    declare public readonly onIncidentResolved: pulumi.Output<boolean | undefined>;
    /**
     * Whether to trigger webhook when incident starts. Only when `trigger_type=incident_change`.
     */
    declare public readonly onIncidentStarted: pulumi.Output<boolean | undefined>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    declare public readonly teamName: pulumi.Output<string | undefined>;
    /**
     * The type of trigger for the webhook. Only settable during creation. Available values: `incident_change`, `on_call_change`, `monitor_change`.
     */
    declare public readonly triggerType: pulumi.Output<string>;
    /**
     * The URL to send webhooks to.
     */
    declare public readonly url: pulumi.Output<string>;

    /**
     * Create a OutgoingWebhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OutgoingWebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OutgoingWebhookArgs | OutgoingWebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OutgoingWebhookState | undefined;
            resourceInputs["customWebhookTemplateAttributes"] = state?.customWebhookTemplateAttributes;
            resourceInputs["name"] = state?.name;
            resourceInputs["onIncidentAcknowledged"] = state?.onIncidentAcknowledged;
            resourceInputs["onIncidentResolved"] = state?.onIncidentResolved;
            resourceInputs["onIncidentStarted"] = state?.onIncidentStarted;
            resourceInputs["teamName"] = state?.teamName;
            resourceInputs["triggerType"] = state?.triggerType;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as OutgoingWebhookArgs | undefined;
            if (args?.triggerType === undefined && !opts.urn) {
                throw new Error("Missing required property 'triggerType'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["customWebhookTemplateAttributes"] = args?.customWebhookTemplateAttributes;
            resourceInputs["name"] = args?.name;
            resourceInputs["onIncidentAcknowledged"] = args?.onIncidentAcknowledged;
            resourceInputs["onIncidentResolved"] = args?.onIncidentResolved;
            resourceInputs["onIncidentStarted"] = args?.onIncidentStarted;
            resourceInputs["teamName"] = args?.teamName;
            resourceInputs["triggerType"] = args?.triggerType;
            resourceInputs["url"] = args?.url;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OutgoingWebhook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OutgoingWebhook resources.
 */
export interface OutgoingWebhookState {
    /**
     * Custom webhook template configuration.
     */
    customWebhookTemplateAttributes?: pulumi.Input<inputs.OutgoingWebhookCustomWebhookTemplateAttributes>;
    /**
     * The name of the outgoing webhook.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to trigger webhook when incident is acknowledged. Only when `trigger_type=incident_change`.
     */
    onIncidentAcknowledged?: pulumi.Input<boolean>;
    /**
     * Whether to trigger webhook when incident is resolved. Only when `trigger_type=incident_change`.
     */
    onIncidentResolved?: pulumi.Input<boolean>;
    /**
     * Whether to trigger webhook when incident starts. Only when `trigger_type=incident_change`.
     */
    onIncidentStarted?: pulumi.Input<boolean>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    teamName?: pulumi.Input<string>;
    /**
     * The type of trigger for the webhook. Only settable during creation. Available values: `incident_change`, `on_call_change`, `monitor_change`.
     */
    triggerType?: pulumi.Input<string>;
    /**
     * The URL to send webhooks to.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OutgoingWebhook resource.
 */
export interface OutgoingWebhookArgs {
    /**
     * Custom webhook template configuration.
     */
    customWebhookTemplateAttributes?: pulumi.Input<inputs.OutgoingWebhookCustomWebhookTemplateAttributes>;
    /**
     * The name of the outgoing webhook.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to trigger webhook when incident is acknowledged. Only when `trigger_type=incident_change`.
     */
    onIncidentAcknowledged?: pulumi.Input<boolean>;
    /**
     * Whether to trigger webhook when incident is resolved. Only when `trigger_type=incident_change`.
     */
    onIncidentResolved?: pulumi.Input<boolean>;
    /**
     * Whether to trigger webhook when incident starts. Only when `trigger_type=incident_change`.
     */
    onIncidentStarted?: pulumi.Input<boolean>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    teamName?: pulumi.Input<string>;
    /**
     * The type of trigger for the webhook. Only settable during creation. Available values: `incident_change`, `on_call_change`, `monitor_change`.
     */
    triggerType: pulumi.Input<string>;
    /**
     * The URL to send webhooks to.
     */
    url: pulumi.Input<string>;
}

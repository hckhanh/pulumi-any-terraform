// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IncomingWebhook extends pulumi.CustomResource {
    /**
     * Get an existing IncomingWebhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IncomingWebhookState, opts?: pulumi.CustomResourceOptions): IncomingWebhook {
        return new IncomingWebhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'better-uptime:index/incomingWebhook:IncomingWebhook';

    /**
     * Returns true if the given object is an instance of IncomingWebhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IncomingWebhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IncomingWebhook.__pulumiType;
    }

    /**
     * When acknowledging an incident, how to extract an alert id, a unique alert identifier which will be used to acknowledge and resolve incidents.
     */
    declare public readonly acknowledgedAlertIdField: pulumi.Output<outputs.IncomingWebhookAcknowledgedAlertIdField | undefined>;
    /**
     * Should an incident be acknowledged for all webhooks, those satisfying all acknowledged_rules, or those satisfying any of them. Valid values are unused, all, or any
     */
    declare public readonly acknowledgedRuleType: pulumi.Output<string>;
    /**
     * An array of rules to match to acknowledge an incident.
     */
    declare public readonly acknowledgedRules: pulumi.Output<outputs.IncomingWebhookAcknowledgedRule[] | undefined>;
    /**
     * Whether to call when a new incident is created.
     */
    declare public readonly call: pulumi.Output<boolean>;
    /**
     * A field describing how to extract an incident cause, used as a short description shared with the team member on-call.
     */
    declare public readonly causeField: pulumi.Output<outputs.IncomingWebhookCauseField | undefined>;
    /**
     * The time when this incoming webhook was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Whether to send a critical push notification that ignores the mute switch and Do not Disturb mode when a new incident is created.
     */
    declare public readonly criticalAlert: pulumi.Output<boolean>;
    /**
     * Whether to send an email when a new incident is created.
     */
    declare public readonly email: pulumi.Output<boolean>;
    /**
     * The name of this incoming webhook.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * An array of additional fields, which will be extracted when acknowledging an incident.
     */
    declare public readonly otherAcknowledgedFields: pulumi.Output<outputs.IncomingWebhookOtherAcknowledgedField[] | undefined>;
    /**
     * An array of additional fields, which will be extracted when resolving an incident.
     */
    declare public readonly otherResolvedFields: pulumi.Output<outputs.IncomingWebhookOtherResolvedField[] | undefined>;
    /**
     * An array of additional fields, which will be extracted when starting an incident.
     */
    declare public readonly otherStartedFields: pulumi.Output<outputs.IncomingWebhookOtherStartedField[] | undefined>;
    /**
     * Set to true to pause monitoring - we won't notify you about downtime. Set to false to resume monitoring.
     */
    declare public readonly paused: pulumi.Output<boolean>;
    /**
     * ID of the escalation policy associated with the incoming webhook.
     */
    declare public readonly policyId: pulumi.Output<string>;
    /**
     * Whether to send a push notification when a new incident is created.
     */
    declare public readonly push: pulumi.Output<boolean>;
    /**
     * How long the integration must be up to automatically mark an incident as resolved after being down.
     */
    declare public readonly recoveryPeriod: pulumi.Output<number>;
    /**
     * When resolving an incident, how to extract an alert id, a unique alert identifier which will be used to acknowledge and resolve incidents.
     */
    declare public readonly resolvedAlertIdField: pulumi.Output<outputs.IncomingWebhookResolvedAlertIdField | undefined>;
    /**
     * Should an incident be resolved for all webhooks, those satisfying all resolved_rules, or those satisfying any of them. Valid values are unused, all, or any
     */
    declare public readonly resolvedRuleType: pulumi.Output<string>;
    /**
     * An array of rules to match to resolved an incident.
     */
    declare public readonly resolvedRules: pulumi.Output<outputs.IncomingWebhookResolvedRule[] | undefined>;
    /**
     * Sample request body the webhook. Used only to make the configuration easier.
     */
    declare public /*out*/ readonly sampleBody: pulumi.Output<string>;
    /**
     * Sample request HTTP headers the webhook (separated by a newline). Used only to make the configuration easier.
     */
    declare public /*out*/ readonly sampleHeaders: pulumi.Output<string>;
    /**
     * Sample query string of the webhook (without the leading ?). Used only to make the configuration easier.
     */
    declare public /*out*/ readonly sampleQueryString: pulumi.Output<string>;
    /**
     * Whether to send an SMS when a new incident is created.
     */
    declare public readonly sms: pulumi.Output<boolean>;
    /**
     * When starting an incident, how to extract an alert id, a unique alert identifier which will be used to acknowledge and resolve incidents.
     */
    declare public readonly startedAlertIdField: pulumi.Output<outputs.IncomingWebhookStartedAlertIdField | undefined>;
    /**
     * Should an incident be started for all webhooks, those satisfying all started_rules, or those satisfying any of them. Valid values are unused, all, or any
     */
    declare public readonly startedRuleType: pulumi.Output<string>;
    /**
     * An array of rules to match to start a new incident.
     */
    declare public readonly startedRules: pulumi.Output<outputs.IncomingWebhookStartedRule[] | undefined>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    declare public readonly teamName: pulumi.Output<string | undefined>;
    /**
     * How long to wait before escalating the incident alert to the team. Leave blank to disable escalating to the entire team.
     */
    declare public readonly teamWait: pulumi.Output<number>;
    /**
     * An optional field describing how to extract a customized incident title.
     */
    declare public readonly titleField: pulumi.Output<outputs.IncomingWebhookTitleField | undefined>;
    /**
     * The time when this incoming webhook was updated.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The url at which we expect to receive the webhook.
     */
    declare public /*out*/ readonly url: pulumi.Output<string>;

    /**
     * Create a IncomingWebhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IncomingWebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IncomingWebhookArgs | IncomingWebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IncomingWebhookState | undefined;
            resourceInputs["acknowledgedAlertIdField"] = state?.acknowledgedAlertIdField;
            resourceInputs["acknowledgedRuleType"] = state?.acknowledgedRuleType;
            resourceInputs["acknowledgedRules"] = state?.acknowledgedRules;
            resourceInputs["call"] = state?.call;
            resourceInputs["causeField"] = state?.causeField;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["criticalAlert"] = state?.criticalAlert;
            resourceInputs["email"] = state?.email;
            resourceInputs["name"] = state?.name;
            resourceInputs["otherAcknowledgedFields"] = state?.otherAcknowledgedFields;
            resourceInputs["otherResolvedFields"] = state?.otherResolvedFields;
            resourceInputs["otherStartedFields"] = state?.otherStartedFields;
            resourceInputs["paused"] = state?.paused;
            resourceInputs["policyId"] = state?.policyId;
            resourceInputs["push"] = state?.push;
            resourceInputs["recoveryPeriod"] = state?.recoveryPeriod;
            resourceInputs["resolvedAlertIdField"] = state?.resolvedAlertIdField;
            resourceInputs["resolvedRuleType"] = state?.resolvedRuleType;
            resourceInputs["resolvedRules"] = state?.resolvedRules;
            resourceInputs["sampleBody"] = state?.sampleBody;
            resourceInputs["sampleHeaders"] = state?.sampleHeaders;
            resourceInputs["sampleQueryString"] = state?.sampleQueryString;
            resourceInputs["sms"] = state?.sms;
            resourceInputs["startedAlertIdField"] = state?.startedAlertIdField;
            resourceInputs["startedRuleType"] = state?.startedRuleType;
            resourceInputs["startedRules"] = state?.startedRules;
            resourceInputs["teamName"] = state?.teamName;
            resourceInputs["teamWait"] = state?.teamWait;
            resourceInputs["titleField"] = state?.titleField;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as IncomingWebhookArgs | undefined;
            if (args?.acknowledgedRuleType === undefined && !opts.urn) {
                throw new Error("Missing required property 'acknowledgedRuleType'");
            }
            if (args?.resolvedRuleType === undefined && !opts.urn) {
                throw new Error("Missing required property 'resolvedRuleType'");
            }
            if (args?.startedRuleType === undefined && !opts.urn) {
                throw new Error("Missing required property 'startedRuleType'");
            }
            resourceInputs["acknowledgedAlertIdField"] = args?.acknowledgedAlertIdField;
            resourceInputs["acknowledgedRuleType"] = args?.acknowledgedRuleType;
            resourceInputs["acknowledgedRules"] = args?.acknowledgedRules;
            resourceInputs["call"] = args?.call;
            resourceInputs["causeField"] = args?.causeField;
            resourceInputs["criticalAlert"] = args?.criticalAlert;
            resourceInputs["email"] = args?.email;
            resourceInputs["name"] = args?.name;
            resourceInputs["otherAcknowledgedFields"] = args?.otherAcknowledgedFields;
            resourceInputs["otherResolvedFields"] = args?.otherResolvedFields;
            resourceInputs["otherStartedFields"] = args?.otherStartedFields;
            resourceInputs["paused"] = args?.paused;
            resourceInputs["policyId"] = args?.policyId;
            resourceInputs["push"] = args?.push;
            resourceInputs["recoveryPeriod"] = args?.recoveryPeriod;
            resourceInputs["resolvedAlertIdField"] = args?.resolvedAlertIdField;
            resourceInputs["resolvedRuleType"] = args?.resolvedRuleType;
            resourceInputs["resolvedRules"] = args?.resolvedRules;
            resourceInputs["sms"] = args?.sms;
            resourceInputs["startedAlertIdField"] = args?.startedAlertIdField;
            resourceInputs["startedRuleType"] = args?.startedRuleType;
            resourceInputs["startedRules"] = args?.startedRules;
            resourceInputs["teamName"] = args?.teamName;
            resourceInputs["teamWait"] = args?.teamWait;
            resourceInputs["titleField"] = args?.titleField;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["sampleBody"] = undefined /*out*/;
            resourceInputs["sampleHeaders"] = undefined /*out*/;
            resourceInputs["sampleQueryString"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IncomingWebhook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IncomingWebhook resources.
 */
export interface IncomingWebhookState {
    /**
     * When acknowledging an incident, how to extract an alert id, a unique alert identifier which will be used to acknowledge and resolve incidents.
     */
    acknowledgedAlertIdField?: pulumi.Input<inputs.IncomingWebhookAcknowledgedAlertIdField>;
    /**
     * Should an incident be acknowledged for all webhooks, those satisfying all acknowledged_rules, or those satisfying any of them. Valid values are unused, all, or any
     */
    acknowledgedRuleType?: pulumi.Input<string>;
    /**
     * An array of rules to match to acknowledge an incident.
     */
    acknowledgedRules?: pulumi.Input<pulumi.Input<inputs.IncomingWebhookAcknowledgedRule>[]>;
    /**
     * Whether to call when a new incident is created.
     */
    call?: pulumi.Input<boolean>;
    /**
     * A field describing how to extract an incident cause, used as a short description shared with the team member on-call.
     */
    causeField?: pulumi.Input<inputs.IncomingWebhookCauseField>;
    /**
     * The time when this incoming webhook was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether to send a critical push notification that ignores the mute switch and Do not Disturb mode when a new incident is created.
     */
    criticalAlert?: pulumi.Input<boolean>;
    /**
     * Whether to send an email when a new incident is created.
     */
    email?: pulumi.Input<boolean>;
    /**
     * The name of this incoming webhook.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of additional fields, which will be extracted when acknowledging an incident.
     */
    otherAcknowledgedFields?: pulumi.Input<pulumi.Input<inputs.IncomingWebhookOtherAcknowledgedField>[]>;
    /**
     * An array of additional fields, which will be extracted when resolving an incident.
     */
    otherResolvedFields?: pulumi.Input<pulumi.Input<inputs.IncomingWebhookOtherResolvedField>[]>;
    /**
     * An array of additional fields, which will be extracted when starting an incident.
     */
    otherStartedFields?: pulumi.Input<pulumi.Input<inputs.IncomingWebhookOtherStartedField>[]>;
    /**
     * Set to true to pause monitoring - we won't notify you about downtime. Set to false to resume monitoring.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * ID of the escalation policy associated with the incoming webhook.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Whether to send a push notification when a new incident is created.
     */
    push?: pulumi.Input<boolean>;
    /**
     * How long the integration must be up to automatically mark an incident as resolved after being down.
     */
    recoveryPeriod?: pulumi.Input<number>;
    /**
     * When resolving an incident, how to extract an alert id, a unique alert identifier which will be used to acknowledge and resolve incidents.
     */
    resolvedAlertIdField?: pulumi.Input<inputs.IncomingWebhookResolvedAlertIdField>;
    /**
     * Should an incident be resolved for all webhooks, those satisfying all resolved_rules, or those satisfying any of them. Valid values are unused, all, or any
     */
    resolvedRuleType?: pulumi.Input<string>;
    /**
     * An array of rules to match to resolved an incident.
     */
    resolvedRules?: pulumi.Input<pulumi.Input<inputs.IncomingWebhookResolvedRule>[]>;
    /**
     * Sample request body the webhook. Used only to make the configuration easier.
     */
    sampleBody?: pulumi.Input<string>;
    /**
     * Sample request HTTP headers the webhook (separated by a newline). Used only to make the configuration easier.
     */
    sampleHeaders?: pulumi.Input<string>;
    /**
     * Sample query string of the webhook (without the leading ?). Used only to make the configuration easier.
     */
    sampleQueryString?: pulumi.Input<string>;
    /**
     * Whether to send an SMS when a new incident is created.
     */
    sms?: pulumi.Input<boolean>;
    /**
     * When starting an incident, how to extract an alert id, a unique alert identifier which will be used to acknowledge and resolve incidents.
     */
    startedAlertIdField?: pulumi.Input<inputs.IncomingWebhookStartedAlertIdField>;
    /**
     * Should an incident be started for all webhooks, those satisfying all started_rules, or those satisfying any of them. Valid values are unused, all, or any
     */
    startedRuleType?: pulumi.Input<string>;
    /**
     * An array of rules to match to start a new incident.
     */
    startedRules?: pulumi.Input<pulumi.Input<inputs.IncomingWebhookStartedRule>[]>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    teamName?: pulumi.Input<string>;
    /**
     * How long to wait before escalating the incident alert to the team. Leave blank to disable escalating to the entire team.
     */
    teamWait?: pulumi.Input<number>;
    /**
     * An optional field describing how to extract a customized incident title.
     */
    titleField?: pulumi.Input<inputs.IncomingWebhookTitleField>;
    /**
     * The time when this incoming webhook was updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The url at which we expect to receive the webhook.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IncomingWebhook resource.
 */
export interface IncomingWebhookArgs {
    /**
     * When acknowledging an incident, how to extract an alert id, a unique alert identifier which will be used to acknowledge and resolve incidents.
     */
    acknowledgedAlertIdField?: pulumi.Input<inputs.IncomingWebhookAcknowledgedAlertIdField>;
    /**
     * Should an incident be acknowledged for all webhooks, those satisfying all acknowledged_rules, or those satisfying any of them. Valid values are unused, all, or any
     */
    acknowledgedRuleType: pulumi.Input<string>;
    /**
     * An array of rules to match to acknowledge an incident.
     */
    acknowledgedRules?: pulumi.Input<pulumi.Input<inputs.IncomingWebhookAcknowledgedRule>[]>;
    /**
     * Whether to call when a new incident is created.
     */
    call?: pulumi.Input<boolean>;
    /**
     * A field describing how to extract an incident cause, used as a short description shared with the team member on-call.
     */
    causeField?: pulumi.Input<inputs.IncomingWebhookCauseField>;
    /**
     * Whether to send a critical push notification that ignores the mute switch and Do not Disturb mode when a new incident is created.
     */
    criticalAlert?: pulumi.Input<boolean>;
    /**
     * Whether to send an email when a new incident is created.
     */
    email?: pulumi.Input<boolean>;
    /**
     * The name of this incoming webhook.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of additional fields, which will be extracted when acknowledging an incident.
     */
    otherAcknowledgedFields?: pulumi.Input<pulumi.Input<inputs.IncomingWebhookOtherAcknowledgedField>[]>;
    /**
     * An array of additional fields, which will be extracted when resolving an incident.
     */
    otherResolvedFields?: pulumi.Input<pulumi.Input<inputs.IncomingWebhookOtherResolvedField>[]>;
    /**
     * An array of additional fields, which will be extracted when starting an incident.
     */
    otherStartedFields?: pulumi.Input<pulumi.Input<inputs.IncomingWebhookOtherStartedField>[]>;
    /**
     * Set to true to pause monitoring - we won't notify you about downtime. Set to false to resume monitoring.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * ID of the escalation policy associated with the incoming webhook.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Whether to send a push notification when a new incident is created.
     */
    push?: pulumi.Input<boolean>;
    /**
     * How long the integration must be up to automatically mark an incident as resolved after being down.
     */
    recoveryPeriod?: pulumi.Input<number>;
    /**
     * When resolving an incident, how to extract an alert id, a unique alert identifier which will be used to acknowledge and resolve incidents.
     */
    resolvedAlertIdField?: pulumi.Input<inputs.IncomingWebhookResolvedAlertIdField>;
    /**
     * Should an incident be resolved for all webhooks, those satisfying all resolved_rules, or those satisfying any of them. Valid values are unused, all, or any
     */
    resolvedRuleType: pulumi.Input<string>;
    /**
     * An array of rules to match to resolved an incident.
     */
    resolvedRules?: pulumi.Input<pulumi.Input<inputs.IncomingWebhookResolvedRule>[]>;
    /**
     * Whether to send an SMS when a new incident is created.
     */
    sms?: pulumi.Input<boolean>;
    /**
     * When starting an incident, how to extract an alert id, a unique alert identifier which will be used to acknowledge and resolve incidents.
     */
    startedAlertIdField?: pulumi.Input<inputs.IncomingWebhookStartedAlertIdField>;
    /**
     * Should an incident be started for all webhooks, those satisfying all started_rules, or those satisfying any of them. Valid values are unused, all, or any
     */
    startedRuleType: pulumi.Input<string>;
    /**
     * An array of rules to match to start a new incident.
     */
    startedRules?: pulumi.Input<pulumi.Input<inputs.IncomingWebhookStartedRule>[]>;
    /**
     * Used to specify the team the resource should be created in when using global tokens.
     */
    teamName?: pulumi.Input<string>;
    /**
     * How long to wait before escalating the incident alert to the team. Leave blank to disable escalating to the entire team.
     */
    teamWait?: pulumi.Input<number>;
    /**
     * An optional field describing how to extract a customized incident title.
     */
    titleField?: pulumi.Input<inputs.IncomingWebhookTitleField>;
}

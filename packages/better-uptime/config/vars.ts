// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("better-uptime");

/**
 * Burst size for rate limiter, allows temporary bursts above the rate limit. 0 means use automatic default (2x rate limit, minimum 10).
 */
export declare const apiRateBurst: number | undefined;
Object.defineProperty(exports, "apiRateBurst", {
    get() {
        return __config.getObject<number>("apiRateBurst");
    },
    enumerable: true,
});

/**
 * Maximum number of API requests per second. 0 means no limit.
 */
export declare const apiRateLimit: number | undefined;
Object.defineProperty(exports, "apiRateLimit", {
    get() {
        return __config.getObject<number>("apiRateLimit");
    },
    enumerable: true,
});

/**
 * Maximum number of retries for API requests.
 */
export declare const apiRetryMax: number | undefined;
Object.defineProperty(exports, "apiRetryMax", {
    get() {
        return __config.getObject<number>("apiRetryMax");
    },
    enumerable: true,
});

/**
 * Maximum time to wait between retries in seconds.
 */
export declare const apiRetryWaitMax: number | undefined;
Object.defineProperty(exports, "apiRetryWaitMax", {
    get() {
        return __config.getObject<number>("apiRetryWaitMax");
    },
    enumerable: true,
});

/**
 * Minimum time to wait between retries in seconds.
 */
export declare const apiRetryWaitMin: number | undefined;
Object.defineProperty(exports, "apiRetryWaitMin", {
    get() {
        return __config.getObject<number>("apiRetryWaitMin");
    },
    enumerable: true,
});

/**
 * Timeout for individual HTTP requests in seconds.
 */
export declare const apiTimeout: number | undefined;
Object.defineProperty(exports, "apiTimeout", {
    get() {
        return __config.getObject<number>("apiTimeout");
    },
    enumerable: true,
});

/**
 * Better Stack Uptime API token. The value can be omitted if `BETTERUPTIME_API_TOKEN` environment variable is set. See https://betterstack.com/docs/uptime/api/getting-started-with-uptime-api/#obtaining-an-uptime-api-token on how to obtain the API token for your team.
 */
export declare const apiToken: string | undefined;
Object.defineProperty(exports, "apiToken", {
    get() {
        return __config.get("apiToken");
    },
    enumerable: true,
});

